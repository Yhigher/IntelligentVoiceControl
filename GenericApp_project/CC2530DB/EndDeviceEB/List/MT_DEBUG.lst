###############################################################################
#
# IAR C/C++ Compiler V10.10.1.4655 for 8051               29/Apr/2024  11:26:03
# Copyright 2004-2017 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Components\mt\MT_DEBUG.c
#    Command line       =  
#        -f C:\Users\Ñî\AppData\Local\Temp\EW57BE.tmp
#        (D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Components\mt\MT_DEBUG.c
#        -D xNWK_AUTO_POLL -D ZTOOL_P1 -D xMT_TASK -D xMT_SYS_FUNC -D
#        xMT_ZDO_FUNC -D xLCD_SUPPORTED=DEBUG -D xPOWER_SAVING -lC
#        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\CC2530DB\EndDeviceEB\List
#        -lA
#        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\CC2530DB\EndDeviceEB\List
#        --diag_suppress Pe001,Pa010 -o
#        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\CC2530DB\EndDeviceEB\Obj
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 8 -f
#        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f
#        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0x520
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=TRUE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440) -I
#        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\CC2530DB\
#        -I
#        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\CC2530DB\..\Source\
#        -I
#        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\CC2530DB\..\..\..\ZMain\TI2530DB\
#        -I
#        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\CC2530DB\..\..\..\..\..\Components\hal\include\
#        -I
#        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
#        -I
#        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\CC2530DB\..\..\..\..\..\Components\mac\include\
#        -I
#        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\CC2530DB\..\..\..\..\..\Components\mac\high_level\
#        -I
#        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
#        -I
#        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
#        -I
#        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\CC2530DB\..\..\..\..\..\Components\mt\
#        -I
#        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\CC2530DB\..\..\..\..\..\Components\osal\include\
#        -I
#        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\CC2530DB\..\..\..\..\..\Components\osal\mcu\ccsoc\
#        -I
#        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\CC2530DB\..\..\..\..\..\Components\services\saddr\
#        -I
#        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\CC2530DB\..\..\..\..\..\Components\services\sdata\
#        -I
#        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\CC2530DB\..\..\..\..\..\Components\stack\af\
#        -I
#        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\CC2530DB\..\..\..\..\..\Components\stack\nwk\
#        -I
#        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\CC2530DB\..\..\..\..\..\Components\stack\sapi\
#        -I
#        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\CC2530DB\..\..\..\..\..\Components\stack\sec\
#        -I
#        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\CC2530DB\..\..\..\..\..\Components\stack\sys\
#        -I
#        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\CC2530DB\..\..\..\..\..\Components\stack\zdo\
#        -I
#        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\CC2530DB\..\..\..\..\..\Components\zmac\
#        -I
#        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
#        -Ohz --require_prototypes --no_code_motion)
#    Locale             =  Chinese (Simplified)_China.936
#    List file          =  
#        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\CC2530DB\EndDeviceEB\List\MT_DEBUG.lst
#    Object file        =  
#        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\CC2530DB\EndDeviceEB\Obj\MT_DEBUG.r51
#
###############################################################################

D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Components\mt\MT_DEBUG.c
      1          /***************************************************************************************************
      2            Filename:       MT.c
      3            Revised:        $Date: 2008-02-12 16:28:45 -0800 (Tue, 12 Feb 2008) $
      4            Revision:       $Revision: 16392 $
      5          
      6            Description:
      7          
      8            Copyright 2007 Texas Instruments Incorporated. All rights reserved.
      9          
     10            IMPORTANT: Your use of this Software is limited to those specific rights
     11            granted under the terms of a software license agreement between the user
     12            who downloaded the software, his/her employer (which must be your employer)
     13            and Texas Instruments Incorporated (the "License").  You may not use this
     14            Software unless you agree to abide by the terms of the License. The License
     15            limits your use, and you acknowledge, that the Software may not be modified,
     16            copied or distributed unless embedded on a Texas Instruments microcontroller
     17            or used solely and exclusively in conjunction with a Texas Instruments radio
     18            frequency transceiver, which is integrated into your product.  Other than for
     19            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     20            works of, modify, distribute, perform, display or sell this Software and/or
     21            its documentation for any purpose.
     22          
     23            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     24            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     25            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     26            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     27            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     28            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     29            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     30            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     31            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     32            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     33            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     34          
     35            Should you have any questions regarding your right to use this Software,
     36            contact Texas Instruments Incorporated at www.TI.com.
     37          
     38           ***************************************************************************************************/
     39          
     40          /***************************************************************************************************
     41           * INCLUDES
     42           ***************************************************************************************************/
     43          #include "ZComDef.h"
     44          #include "MT.h"
     45          #include "MT_DEBUG.h"
     46          #include "MT_UART.h"
     47          
     48          /***************************************************************************************************
     49           * LOCAL FUNCTIONs
     50           ***************************************************************************************************/
     51          #if defined (MT_DEBUG_FUNC)
     52          void MT_DebugSetThreshold(uint8 *pBuf);
     53          #endif
     54          
     55          #if defined (MT_DEBUG_FUNC)
     56          /***************************************************************************************************
     57           * @fn      MT_DebugProcessing
     58           *
     59           * @brief   Process all the DEBUG commands that are issued by test tool
     60           *
     61           * @param   pBuf - pointer to received buffer
     62           *
     63           * @return  status
     64           ***************************************************************************************************/
     65          uint8 MT_DebugCommandProcessing(uint8 *pBuf)
     66          {
     67            uint8 status = MT_RPC_SUCCESS;
     68          
     69            switch (pBuf[MT_RPC_POS_CMD1])
     70            {
     71              case MT_DEBUG_SET_THRESHOLD:
     72                MT_DebugSetThreshold(pBuf);
     73                break;
     74          
     75              default:
     76                status = MT_RPC_ERR_COMMAND_ID;
     77                break;
     78            }
     79          
     80            return status;
     81          }
     82          
     83          /***************************************************************************************************
     84           * @fn      MT_DebugSetThreshold
     85           *
     86           * @brief   Process Debug Set Threshold
     87           *
     88           * @param   pBuf - pointer to received buffer
     89           *
     90           * @return  void
     91           ***************************************************************************************************/
     92          void MT_DebugSetThreshold(uint8 *pBuf)
     93          {
     94            uint8 retValue = ZSuccess;
     95            uint8 cmdId;
     96          
     97            /* parse header */
     98            cmdId = pBuf[MT_RPC_POS_CMD1];
     99            pBuf += MT_RPC_FRAME_HDR_SZ;
    100          
    101            /* Populate info */
    102            debugCompId = *pBuf++;
    103            debugThreshold = *pBuf++;
    104          
    105            /* Build and send back the response */
    106            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_DBG), cmdId, 1, &retValue);
    107          }
    108          #endif /* MT_DEBUG_FUNC */
    109          
    110          /***************************************************************************************************
    111           * @fn      MT_ProcessDebugMsg
    112           *
    113           * @brief   Build and send a debug message.
    114           *
    115           * @param   byte *data - pointer to the data portion of the debug message
    116           *
    117           * @return  void
    118           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    119          void MT_ProcessDebugMsg( mtDebugMsg_t *msg )
   \                     MT_ProcessDebugMsg:
    120          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 11
   \   000005   74F5         MOV       A,#-0xb
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
    121            byte *msg_ptr;
    122            byte dataLen;
    123            uint8 buf[11];
    124            uint8 *pBuf;
    125          
    126            /* Calculate the data length based */
    127            dataLen = 5 + (msg->numParams * sizeof ( uint16 ));
   \   00000E   8E82         MOV       DPL,R6
   \   000010   8F83         MOV       DPH,R7
   \   000012   A3           INC       DPTR
   \   000013   A3           INC       DPTR
   \   000014   A3           INC       DPTR
   \   000015   A3           INC       DPTR
   \   000016   E0           MOVX      A,@DPTR
   \   000017   C3           CLR       C
   \   000018   33           RLC       A
   \   000019   2405         ADD       A,#0x5
   \   00001B   F5..         MOV       ?V2,A
    128          
    129            /* Get a message buffer to build the debug message */
    130            msg_ptr = osal_msg_allocate( (byte)(SPI_0DATA_MSG_LEN + dataLen + 1) );
   \   00001D                ; Setup parameters for call to function osal_msg_allocate
   \   00001D   7406         MOV       A,#0x6
   \   00001F   25..         ADD       A,?V2
   \   000021   FA           MOV       R2,A
   \   000022   7B00         MOV       R3,#0x0
   \   000024   12....       LCALL     `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   000027   8A..         MOV       ?V0,R2
   \   000029   8B..         MOV       ?V1,R3
    131            if ( msg_ptr )
   \   00002B   EA           MOV       A,R2
   \   00002C   45..         ORL       A,?V1
   \   00002E   7003         JNZ       $+5
   \   000030   02....       LJMP      ??MT_ProcessDebugMsg_0 & 0xFFFF
    132            {
    133              /* Build the message */
    134              pBuf = buf;
    135              *pBuf++ = msg->compID;
   \   000033   8E82         MOV       DPL,R6
   \   000035   8F83         MOV       DPH,R7
   \   000037   A3           INC       DPTR
   \   000038   A3           INC       DPTR
   \   000039   E0           MOVX      A,@DPTR
   \   00003A   85..82       MOV       DPL,?XSP + 0
   \   00003D   85..83       MOV       DPH,?XSP + 1
   \   000040   F0           MOVX      @DPTR,A
    136              *pBuf++ = msg->severity;
   \   000041   8E82         MOV       DPL,R6
   \   000043   8F83         MOV       DPH,R7
   \   000045   A3           INC       DPTR
   \   000046   A3           INC       DPTR
   \   000047   A3           INC       DPTR
   \   000048   E0           MOVX      A,@DPTR
   \   000049   C0E0         PUSH      A
   \   00004B   7401         MOV       A,#0x1
   \   00004D   12....       LCALL     ?XSTACK_DISP0_8
   \   000050   D0E0         POP       A
   \   000052   F0           MOVX      @DPTR,A
    137              *pBuf++ = msg->numParams;
   \   000053   EE           MOV       A,R6
   \   000054   2404         ADD       A,#0x4
   \   000056   F8           MOV       R0,A
   \   000057   E4           CLR       A
   \   000058   3F           ADDC      A,R7
   \   000059   F9           MOV       R1,A
   \   00005A   E8           MOV       A,R0
   \   00005B   FA           MOV       R2,A
   \   00005C   E9           MOV       A,R1
   \   00005D   FB           MOV       R3,A
   \   00005E   8A82         MOV       DPL,R2
   \   000060   8B83         MOV       DPH,R3
   \   000062   E0           MOVX      A,@DPTR
   \   000063   C0E0         PUSH      A
   \   000065   7402         MOV       A,#0x2
   \   000067   12....       LCALL     ?XSTACK_DISP0_8
   \   00006A   D0E0         POP       A
   \   00006C   F0           MOVX      @DPTR,A
   \   00006D   7403         MOV       A,#0x3
   \   00006F   12....       LCALL     ?XSTACK_DISP0_8
   \   000072   A882         MOV       R0,DPL
   \   000074   A983         MOV       R1,DPH
    138          
    139              if ( msg->numParams >= 1 )
   \   000076   8A82         MOV       DPL,R2
   \   000078   8B83         MOV       DPH,R3
   \   00007A   E0           MOVX      A,@DPTR
   \   00007B   7003         JNZ       $+5
   \   00007D   02....       LJMP      ??MT_ProcessDebugMsg_1 & 0xFFFF
    140              {
    141                *pBuf++ = LO_UINT16( msg->param1 );
   \   000080   EE           MOV       A,R6
   \   000081   2405         ADD       A,#0x5
   \   000083   F8           MOV       R0,A
   \   000084   E4           CLR       A
   \   000085   3F           ADDC      A,R7
   \   000086   F9           MOV       R1,A
   \   000087   8882         MOV       DPL,R0
   \   000089   8983         MOV       DPH,R1
   \   00008B   E0           MOVX      A,@DPTR
   \   00008C   C0E0         PUSH      A
   \   00008E   7403         MOV       A,#0x3
   \   000090   12....       LCALL     ?XSTACK_DISP0_8
   \   000093   D0E0         POP       A
   \   000095   F0           MOVX      @DPTR,A
    142                *pBuf++ = HI_UINT16( msg->param1 );
   \   000096   8882         MOV       DPL,R0
   \   000098   8983         MOV       DPH,R1
   \   00009A   A3           INC       DPTR
   \   00009B   E0           MOVX      A,@DPTR
   \   00009C   C0E0         PUSH      A
   \   00009E   7404         MOV       A,#0x4
   \   0000A0   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A3   D0E0         POP       A
   \   0000A5   F0           MOVX      @DPTR,A
   \   0000A6   7405         MOV       A,#0x5
   \   0000A8   12....       LCALL     ?XSTACK_DISP0_8
   \   0000AB   A882         MOV       R0,DPL
   \   0000AD   A983         MOV       R1,DPH
    143              }
    144          
    145              if ( msg->numParams >= 2 )
   \   0000AF   8E82         MOV       DPL,R6
   \   0000B1   8F83         MOV       DPH,R7
   \   0000B3   A3           INC       DPTR
   \   0000B4   A3           INC       DPTR
   \   0000B5   A3           INC       DPTR
   \   0000B6   A3           INC       DPTR
   \   0000B7   E0           MOVX      A,@DPTR
   \   0000B8   C3           CLR       C
   \   0000B9   9402         SUBB      A,#0x2
   \   0000BB   402F         JC        ??MT_ProcessDebugMsg_2
    146              {
    147                *pBuf++ = LO_UINT16( msg->param2 );
   \   0000BD   EE           MOV       A,R6
   \   0000BE   2407         ADD       A,#0x7
   \   0000C0   F8           MOV       R0,A
   \   0000C1   E4           CLR       A
   \   0000C2   3F           ADDC      A,R7
   \   0000C3   F9           MOV       R1,A
   \   0000C4   8882         MOV       DPL,R0
   \   0000C6   8983         MOV       DPH,R1
   \   0000C8   E0           MOVX      A,@DPTR
   \   0000C9   C0E0         PUSH      A
   \   0000CB   7405         MOV       A,#0x5
   \   0000CD   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D0   D0E0         POP       A
   \   0000D2   F0           MOVX      @DPTR,A
    148                *pBuf++ = HI_UINT16( msg->param2 );
   \   0000D3   8882         MOV       DPL,R0
   \   0000D5   8983         MOV       DPH,R1
   \   0000D7   A3           INC       DPTR
   \   0000D8   E0           MOVX      A,@DPTR
   \   0000D9   C0E0         PUSH      A
   \   0000DB   7406         MOV       A,#0x6
   \   0000DD   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E0   D0E0         POP       A
   \   0000E2   F0           MOVX      @DPTR,A
   \   0000E3   7407         MOV       A,#0x7
   \   0000E5   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E8   A882         MOV       R0,DPL
   \   0000EA   A983         MOV       R1,DPH
    149              }
    150          
    151              if ( msg->numParams == 3 )
   \                     ??MT_ProcessDebugMsg_2:
   \   0000EC   8E82         MOV       DPL,R6
   \   0000EE   8F83         MOV       DPH,R7
   \   0000F0   A3           INC       DPTR
   \   0000F1   A3           INC       DPTR
   \   0000F2   A3           INC       DPTR
   \   0000F3   A3           INC       DPTR
   \   0000F4   E0           MOVX      A,@DPTR
   \   0000F5   6403         XRL       A,#0x3
   \   0000F7   700D         JNZ       ??MT_ProcessDebugMsg_1
    152              {
    153                *pBuf++ = LO_UINT16( msg->param3 );
   \   0000F9   EE           MOV       A,R6
   \   0000FA   2409         ADD       A,#0x9
   \   0000FC   12....       LCALL     ?Subroutine0 & 0xFFFF
    154                *pBuf++ = HI_UINT16( msg->param3 );
    155              }
   \                     ??CrossCallReturnLabel_0:
   \   0000FF   E8           MOV       A,R0
   \   000100   2402         ADD       A,#0x2
   \   000102   F8           MOV       R0,A
   \   000103   5001         JNC       ??MT_ProcessDebugMsg_1
   \   000105   09           INC       R1
    156          
    157              *pBuf++ = LO_UINT16( msg->timestamp );
   \                     ??MT_ProcessDebugMsg_1:
   \   000106   EE           MOV       A,R6
   \   000107   240B         ADD       A,#0xb
   \   000109   12....       LCALL     ?Subroutine0 & 0xFFFF
    158              *pBuf++ = HI_UINT16( msg->timestamp );
    159          
    160          #ifdef MT_UART_DEFAULT_PORT
    161              /* Debug message is set to AREQ CMD 0x80 for now */
    162              /* Build and send back the response */
    163              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_DBG), 0x80, dataLen, buf);
   \                     ??CrossCallReturnLabel_1:
   \   00010C                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00010C   AC..         MOV       R4,?XSP + 0
   \   00010E   AD..         MOV       R5,?XSP + 1
   \   000110   AB..         MOV       R3,?V2
   \   000112   7A80         MOV       R2,#-0x80
   \   000114   7948         MOV       R1,#0x48
   \   000116   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    164          #endif
    165              osal_msg_deallocate( msg_ptr );
   \   000119                ; Setup parameters for call to function osal_msg_deallocate
   \   000119   AA..         MOV       R2,?V0
   \   00011B   AB..         MOV       R3,?V1
   \   00011D   12....       LCALL     `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
    166            }
    167          }
   \                     ??MT_ProcessDebugMsg_0:
   \   000120   740B         MOV       A,#0xb
   \   000122   12....       LCALL     ?DEALLOC_XSTACK8
   \   000125   7F06         MOV       R7,#0x6
   \   000127   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   FA           MOV       R2,A
   \   000001   E4           CLR       A
   \   000002   3F           ADDC      A,R7
   \   000003   FB           MOV       R3,A
   \   000004   8A82         MOV       DPL,R2
   \   000006   8B83         MOV       DPH,R3
   \   000008   E0           MOVX      A,@DPTR
   \   000009   8882         MOV       DPL,R0
   \   00000B   8983         MOV       DPH,R1
   \   00000D   F0           MOVX      @DPTR,A
   \   00000E   8A82         MOV       DPL,R2
   \   000010   8B83         MOV       DPH,R3
   \   000012   A3           INC       DPTR
   \   000013   E0           MOVX      A,@DPTR
   \   000014   8882         MOV       DPL,R0
   \   000016   8983         MOV       DPH,R1
   \   000018   A3           INC       DPTR
   \   000019   F0           MOVX      @DPTR,A
   \   00001A   22           RET
    168          
    169          /***************************************************************************************************
    170           * @fn      MT_ProcessDebugStr
    171           *
    172           * @brief   Build and send a debug string.
    173           *
    174           * @param   byte *dstr - pointer to the data portion of the debug message
    175           *
    176           * @return  void
    177           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    178          void MT_ProcessDebugStr(mtDebugStr_t *dstr)
   \                     MT_ProcessDebugStr:
    179          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
    180            byte *msg_ptr;
    181          
    182            /* Get a message buffer to build the debug message */
    183            msg_ptr = osal_mem_alloc( (byte)(SPI_0DATA_MSG_LEN + dstr->strLen) );
   \   000009                ; Setup parameters for call to function osal_mem_alloc
   \   000009   8E82         MOV       DPL,R6
   \   00000B   8F83         MOV       DPH,R7
   \   00000D   A3           INC       DPTR
   \   00000E   A3           INC       DPTR
   \   00000F   E0           MOVX      A,@DPTR
   \   000010   2405         ADD       A,#0x5
   \   000012   FA           MOV       R2,A
   \   000013   7B00         MOV       R3,#0x0
   \   000015   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000018   8A..         MOV       ?V0,R2
   \   00001A   8B..         MOV       ?V1,R3
    184            if ( msg_ptr )
   \   00001C   EA           MOV       A,R2
   \   00001D   45..         ORL       A,?V1
   \   00001F   6022         JZ        ??MT_ProcessDebugStr_0
    185            {
    186          #ifdef MT_UART_DEFAULT_PORT
    187              /* Debug message is set to AREQ CMD 0x80 for now */
    188              /* Build and send back the response */
    189              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_DBG), MT_DEBUG_MSG, dstr->strLen, dstr->pString);
   \   000021                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000021   8E82         MOV       DPL,R6
   \   000023   8F83         MOV       DPH,R7
   \   000025   A3           INC       DPTR
   \   000026   A3           INC       DPTR
   \   000027   A3           INC       DPTR
   \   000028   E0           MOVX      A,@DPTR
   \   000029   FC           MOV       R4,A
   \   00002A   A3           INC       DPTR
   \   00002B   E0           MOVX      A,@DPTR
   \   00002C   FD           MOV       R5,A
   \   00002D   8E82         MOV       DPL,R6
   \   00002F   8F83         MOV       DPH,R7
   \   000031   A3           INC       DPTR
   \   000032   A3           INC       DPTR
   \   000033   E0           MOVX      A,@DPTR
   \   000034   FB           MOV       R3,A
   \   000035   7A80         MOV       R2,#-0x80
   \   000037   7948         MOV       R1,#0x48
   \   000039   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    190          #endif
    191              osal_mem_free( msg_ptr );
   \   00003C                ; Setup parameters for call to function osal_mem_free
   \   00003C   AA..         MOV       R2,?V0
   \   00003E   AB..         MOV       R3,?V1
   \   000040   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    192            }
    193          }
   \                     ??MT_ProcessDebugStr_0:
   \   000043   7F04         MOV       R7,#0x4
   \   000045   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ProcessDebugMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ProcessDebugMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ProcessDebugStr::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ProcessDebugStr
    194          /***************************************************************************************************
    195           ***************************************************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      1     25   MT_ProcessDebugMsg
        0     25   -> MT_BuildAndSendZToolResponse
        0     25   -> osal_msg_allocate
        0     25   -> osal_msg_deallocate
      0     12   MT_ProcessDebugStr
        0     12   -> MT_BuildAndSendZToolResponse
        0     12   -> osal_mem_alloc
        0     12   -> osal_mem_free


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      27  ?Subroutine0
     298  MT_ProcessDebugMsg
       6  MT_ProcessDebugMsg::?relay
      72  MT_ProcessDebugStr
       6  MT_ProcessDebugStr::?relay

 
 397 bytes in segment BANKED_CODE
  12 bytes in segment BANK_RELAYS
 
  12 bytes of CODE     memory
 397 bytes of HUGECODE memory

Errors: none
Warnings: none
