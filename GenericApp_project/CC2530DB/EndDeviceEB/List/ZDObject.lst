###############################################################################
#
# IAR C/C++ Compiler V10.10.1.4655 for 8051               29/Apr/2024  11:26:06
# Copyright 2004-2017 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Components\stack\zdo\ZDObject.c
#    Command line       =  
#        -f C:\Users\Ñî\AppData\Local\Temp\EW5DF0.tmp
#        (D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Components\stack\zdo\ZDObject.c
#        -D xNWK_AUTO_POLL -D ZTOOL_P1 -D xMT_TASK -D xMT_SYS_FUNC -D
#        xMT_ZDO_FUNC -D xLCD_SUPPORTED=DEBUG -D xPOWER_SAVING -lC
#        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\CC2530DB\EndDeviceEB\List
#        -lA
#        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\CC2530DB\EndDeviceEB\List
#        --diag_suppress Pe001,Pa010 -o
#        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\CC2530DB\EndDeviceEB\Obj
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 8 -f
#        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f
#        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0x520
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=TRUE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440) -I
#        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\CC2530DB\
#        -I
#        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\CC2530DB\..\Source\
#        -I
#        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\CC2530DB\..\..\..\ZMain\TI2530DB\
#        -I
#        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\CC2530DB\..\..\..\..\..\Components\hal\include\
#        -I
#        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
#        -I
#        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\CC2530DB\..\..\..\..\..\Components\mac\include\
#        -I
#        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\CC2530DB\..\..\..\..\..\Components\mac\high_level\
#        -I
#        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
#        -I
#        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
#        -I
#        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\CC2530DB\..\..\..\..\..\Components\mt\
#        -I
#        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\CC2530DB\..\..\..\..\..\Components\osal\include\
#        -I
#        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\CC2530DB\..\..\..\..\..\Components\osal\mcu\ccsoc\
#        -I
#        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\CC2530DB\..\..\..\..\..\Components\services\saddr\
#        -I
#        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\CC2530DB\..\..\..\..\..\Components\services\sdata\
#        -I
#        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\CC2530DB\..\..\..\..\..\Components\stack\af\
#        -I
#        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\CC2530DB\..\..\..\..\..\Components\stack\nwk\
#        -I
#        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\CC2530DB\..\..\..\..\..\Components\stack\sapi\
#        -I
#        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\CC2530DB\..\..\..\..\..\Components\stack\sec\
#        -I
#        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\CC2530DB\..\..\..\..\..\Components\stack\sys\
#        -I
#        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\CC2530DB\..\..\..\..\..\Components\stack\zdo\
#        -I
#        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\CC2530DB\..\..\..\..\..\Components\zmac\
#        -I
#        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
#        -Ohz --require_prototypes --no_code_motion)
#    Locale             =  Chinese (Simplified)_China.936
#    List file          =  
#        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\CC2530DB\EndDeviceEB\List\ZDObject.lst
#    Object file        =  
#        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\CC2530DB\EndDeviceEB\Obj\ZDObject.r51
#
###############################################################################

D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Components\stack\zdo\ZDObject.c
      1          /**************************************************************************************************
      2            Filename:       ZDObject.c
      3            Revised:        $Date: 2010-06-28 16:07:20 -0700 (Mon, 28 Jun 2010) $
      4            Revision:       $Revision: 22834 $
      5          
      6            Description:    This is the Zigbee Device Object.
      7          
      8          
      9            Copyright 2004-2010 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          #include "ZComdef.h"
     44          #include "OSAL.h"
     45          #include "OSAL_Nv.h"
     46          #include "rtg.h"
     47          #include "NLMEDE.h"
     48          #include "nwk_globals.h"
     49          #include "APS.h"
     50          #include "APSMEDE.h"
     51          #include "AssocList.h"
     52          #include "BindingTable.h"
     53          #include "AddrMgr.h"
     54          #include "AF.h"
     55          #include "ZDObject.h"
     56          #include "ZDProfile.h"
     57          #include "ZDConfig.h"
     58          #include "ZDSecMgr.h"
     59          #include "ZDApp.h"
     60          #include "nwk_util.h"   // NLME_IsAddressBroadcast()
     61          #include "ZGlobals.h"
     62          #if defined MT_ZDO_CB_FUNC
     63          #include "MT.h"
     64          #endif
     65          
     66          #if defined( LCD_SUPPORTED )
     67            #include "OnBoard.h"
     68          #endif
     69          
     70          /* HAL */
     71          #include "hal_lcd.h"
     72          
     73          /*********************************************************************
     74           * MACROS
     75           */
     76          
     77          /*********************************************************************
     78           * CONSTANTS
     79           */
     80          // NLME Stub Implementations
     81          #define ZDO_ProcessMgmtPermitJoinTimeout NLME_PermitJoiningTimeout
     82          
     83          // Status fields used by ZDO_ProcessMgmtRtgReq
     84          #define ZDO_MGMT_RTG_ENTRY_ACTIVE             0x00
     85          #define ZDO_MGMT_RTG_ENTRY_DISCOVERY_UNDERWAY 0x01
     86          #define ZDO_MGMT_RTG_ENTRY_DISCOVERY_FAILED   0x02
     87          #define ZDO_MGMT_RTG_ENTRY_INACTIVE           0x03
     88          
     89          /*********************************************************************
     90           * TYPEDEFS
     91           */
     92          #if defined ( REFLECTOR )
     93          typedef struct
     94          {
     95            byte SrcTransSeq;
     96            zAddrType_t SrcAddr;
     97            uint16 LocalCoordinator;
     98            byte epIntf;
     99            uint16 ProfileID;
    100            byte numInClusters;
    101            uint16 *inClusters;
    102            byte numOutClusters;
    103            uint16 *outClusters;
    104            byte SecurityUse;
    105            byte status;
    106          } ZDO_EDBind_t;
    107          #endif // defined ( REFLECTOR )
    108          
    109          enum
    110          {
    111            ZDMATCH_INIT,           // Initialized
    112            ZDMATCH_WAIT_REQ,       // Received first request, waiting for second
    113            ZDMATCH_SENDING_BINDS   // Received both requests, sending unbind/binds
    114          };
    115          
    116          enum
    117          {
    118            ZDMATCH_SENDING_NOT,
    119            ZDMATCH_SENDING_UNBIND,
    120            ZDMATCH_SENDING_BIND
    121          };
    122          
    123          /*********************************************************************
    124           * GLOBAL VARIABLES
    125           */
    126          
    127          /*********************************************************************
    128           * EXTERNAL VARIABLES
    129           */
    130          
    131          /*********************************************************************
    132           * EXTERNAL FUNCTIONS
    133           */
    134          
    135          /*********************************************************************
    136           * LOCAL VARIABLES
    137           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    138          static uint16 ZDOBuildBuf[26];  // temp area to build data without allocation
   \                     ZDOBuildBuf:
   \   000000                DS 52
   \   000034                REQUIRE __INIT_XDATA_Z
    139          
    140          #if defined ( REFLECTOR )

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    141          static ZDO_EDBind_t *ZDO_EDBind;     // Null when not used
   \                     ZDO_EDBind:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    142          #endif
    143          
    144          #if defined ( MANAGED_SCAN )
    145            uint32 managedScanNextChannel = 0;
    146            uint32 managedScanChannelMask = 0;
    147            uint8  managedScanTimesPerChannel = 0;
    148          #endif
    149          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    150          ZDMatchEndDeviceBind_t *matchED = (ZDMatchEndDeviceBind_t *)NULL;
   \                     matchED:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    151          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    152          uint32 apsChannelMask = 0;
   \                     apsChannelMask:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z
    153          
    154          /*********************************************************************
    155           * LOCAL FUNCTIONS
    156           */
    157          static void ZDODeviceSetup( void );
    158          #if defined ( MANAGED_SCAN )
    159            static void ZDOManagedScan_Next( void );
    160          #endif
    161          #if defined ( REFLECTOR )
    162            static void ZDO_RemoveEndDeviceBind( void );
    163            static void ZDO_SendEDBindRsp( byte TransSeq, zAddrType_t *dstAddr, byte Status, byte secUse );
    164          #endif
    165          static byte ZDO_CompareClusterLists( byte numList1, uint16 *list1,
    166                                          byte numList2, uint16 *list2, uint16 *pMatches );
    167          static void ZDO_RemoveMatchMemory( void );
    168          static uint8 ZDO_CopyMatchInfo( ZDEndDeviceBind_t *destReq, ZDEndDeviceBind_t *srcReq );
    169          static void ZDO_EndDeviceBindMatchTimeoutCB( void );
    170          uint8 *ZDO_ConvertOTAClusters( uint8 cnt, uint8 *inBuf, uint16 *outList );
    171          static void zdoSendStateChangeMsg(uint8 state, uint8 taskId);
    172          
    173          /*********************************************************************
    174           * @fn          ZDO_Init
    175           *
    176           * @brief       ZDObject and ZDProfile initialization.
    177           *
    178           * @param       none
    179           *
    180           * @return      none
    181           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    182          void ZDO_Init( void )
   \                     ZDO_Init:
    183          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    184            // Initialize ZD items
    185            #if defined ( REFLECTOR )
    186            ZDO_EDBind = NULL;
   \   000004   90....       MOV       DPTR,#ZDO_EDBind
   \   000007   E4           CLR       A
   \   000008   F0           MOVX      @DPTR,A
   \   000009   A3           INC       DPTR
   \   00000A   F0           MOVX      @DPTR,A
    187            #endif
    188          
    189            // Initialize default ZDO_UseExtendedPANID to the APS one.
    190            osal_cpyExtAddr( ZDO_UseExtendedPANID, AIB_apsUseExtendedPANID );
   \   00000B                ; Setup parameters for call to function sAddrExtCpy
   \   00000B   7C..         MOV       R4,#AIB_apsUseExtendedPANID & 0xff
   \   00000D   7D..         MOV       R5,#(AIB_apsUseExtendedPANID >> 8) & 0xff
   \   00000F   7A..         MOV       R2,#ZDO_UseExtendedPANID & 0xff
   \   000011   7B..         MOV       R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   000013   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
    191          
    192            // Setup the device - type of device to create.
    193            ZDODeviceSetup();
   \   000016   90....       MOV       DPTR,#zgDeviceLogicalType
   \   000019   E0           MOVX      A,@DPTR
   \   00001A   7004         JNZ       ??ZDO_Init_0
   \   00001C   7900         MOV       R1,#0x0
   \   00001E   8002         SJMP      ??ZDO_Init_1
   \                     ??ZDO_Init_0:
   \   000020   7901         MOV       R1,#0x1
   \                     ??ZDO_Init_1:
   \   000022                ; Setup parameters for call to function APS_ReflectorInit
   \   000022   12....       LCALL     `??APS_ReflectorInit::?relay`; Banked call to: APS_ReflectorInit
   \   000025                ; Setup parameters for call to function NLME_DeviceJoiningInit
   \   000025   12....       LCALL     `??NLME_DeviceJoiningInit::?relay`; Banked call to: NLME_DeviceJoiningInit
    194          }
   \   000028   02....       LJMP      ?Subroutine0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   D083         POP       DPH
   \   000002   D082         POP       DPL
   \   000004   02....       LJMP      ?BRET
    195          
    196          #if defined ( MANAGED_SCAN )
    197          /*********************************************************************
    198           * @fn      ZDOManagedScan_Next()
    199           *
    200           * @brief   Setup a managed scan.
    201           *
    202           * @param   none
    203           *
    204           * @return  none
    205           */
    206          static void ZDOManagedScan_Next( void )
    207          {
    208            // Is it the first time
    209            if ( managedScanNextChannel == 0 && managedScanTimesPerChannel == 0 )
    210            {
    211              // Setup the defaults
    212              managedScanNextChannel  = 1;
    213          
    214              while( managedScanNextChannel && (zgDefaultChannelList & managedScanNextChannel) == 0 )
    215                managedScanNextChannel <<= 1;
    216          
    217              managedScanChannelMask = managedScanNextChannel;
    218              managedScanTimesPerChannel = MANAGEDSCAN_TIMES_PRE_CHANNEL;
    219            }
    220            else
    221            {
    222              // Do we need to go to the next channel
    223              if ( managedScanTimesPerChannel == 0 )
    224              {
    225                // Find next active channel
    226                managedScanChannelMask  = managedScanNextChannel;
    227                managedScanTimesPerChannel = MANAGEDSCAN_TIMES_PRE_CHANNEL;
    228              }
    229              else
    230              {
    231                managedScanTimesPerChannel--;
    232          
    233                if ( managedScanTimesPerChannel == 0 )
    234                {
    235                  managedScanNextChannel  <<= 1;
    236                  while( managedScanNextChannel && (zgDefaultChannelList & managedScanNextChannel) == 0 )
    237                    managedScanNextChannel <<= 1;
    238          
    239                  if ( managedScanNextChannel == 0 )
    240                    zdoDiscCounter  = NUM_DISC_ATTEMPTS + 1; // Stop
    241                }
    242              }
    243            }
    244          }
    245          #endif // MANAGED_SCAN
    246          
    247          /*********************************************************************
    248           * @fn      ZDODeviceSetup()
    249           *
    250           * @brief   Call set functions depending on the type of device compiled.
    251           *
    252           * @param   none
    253           *
    254           * @return  none
    255           */
    256          static void ZDODeviceSetup( void )
    257          {
    258            if ( ZG_BUILD_COORDINATOR_TYPE )
    259            {
    260              NLME_CoordinatorInit();
    261            }
    262          
    263          #if defined ( REFLECTOR )
    264            APS_ReflectorInit( (ZG_DEVICE_COORDINATOR_TYPE) ? APS_REFLECTOR_PUBLIC :  APS_REFLECTOR_PRIVATE );
    265          #endif
    266          
    267            if ( ZG_BUILD_JOINING_TYPE )
    268            {
    269              NLME_DeviceJoiningInit();
    270            }
    271          }
    272          
    273          /*********************************************************************
    274           * @fn          ZDO_StartDevice
    275           *
    276           * @brief       This function starts a device in a network.
    277           *
    278           * @param       logicalType     - Device type to start
    279           *              startMode       - indicates mode of device startup
    280           *              beaconOrder     - indicates time betwen beacons
    281           *              superframeOrder - indicates length of active superframe
    282           *
    283           * @return      none
    284           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    285          void ZDO_StartDevice( byte logicalType, devStartModes_t startMode, byte beaconOrder, byte superframeOrder )
   \                     ZDO_StartDevice:
    286          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 11
   \   000005   74F5         MOV       A,#-0xb
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FF           MOV       R7,A
   \   00000C   EA           MOV       A,R2
   \   00000D   FE           MOV       R6,A
    287            ZStatus_t ret;
    288          #if defined ( ZIGBEE_FREQ_AGILITY )
    289            static uint8 discRetries = 0;
    290          #endif
    291          #if defined ( ZIGBEE_COMMISSIONING )
    292            static uint8 scanCnt = 0;
    293          #endif
    294          
    295            ret = ZUnsupportedMode;
    296          
    297            if ( ZG_BUILD_COORDINATOR_TYPE && logicalType == NODETYPE_COORDINATOR )
    298            {
    299              if ( startMode == MODE_HARD )
    300              {
    301                devState = DEV_COORD_STARTING;
    302                ret = NLME_NetworkFormationRequest( zgConfigPANID, zgApsUseExtendedPANID, zgDefaultChannelList,
    303                                                    zgDefaultStartingScanDuration, beaconOrder,
    304                                                    superframeOrder, false );
    305              }
    306              else if ( startMode == MODE_RESUME )
    307              {
    308                // Just start the coordinator
    309                devState = DEV_COORD_STARTING;
    310                ret = NLME_StartRouterRequest( beaconOrder, beaconOrder, false );
    311              }
    312              else
    313              {
    314          #if defined( LCD_SUPPORTED )
    315                HalLcdWriteScreen( "StartDevice ERR", "MODE unknown" );
    316          #endif
    317              }
    318            }
    319          
    320            if ( ZG_BUILD_JOINING_TYPE && (logicalType == NODETYPE_ROUTER || logicalType == NODETYPE_DEVICE) )
   \   00000E   7401         MOV       A,#0x1
   \   000010   6F           XRL       A,R7
   \   000011   6008         JZ        ??ZDO_StartDevice_0
   \   000013   7402         MOV       A,#0x2
   \   000015   6F           XRL       A,R7
   \   000016   6003         JZ        $+5
   \   000018   02....       LJMP      ??ZDO_StartDevice_1 & 0xFFFF
    321            {
    322              if ( (startMode == MODE_JOIN) || (startMode == MODE_REJOIN) )
   \                     ??ZDO_StartDevice_0:
   \   00001B   EE           MOV       A,R6
   \   00001C   6005         JZ        ??ZDO_StartDevice_2
   \   00001E   7403         MOV       A,#0x3
   \   000020   6E           XRL       A,R6
   \   000021   7037         JNZ       ??ZDO_StartDevice_3
    323              {
    324                devState = DEV_NWK_DISC;
   \                     ??ZDO_StartDevice_2:
   \   000023   90....       MOV       DPTR,#devState
   \   000026   7402         MOV       A,#0x2
   \   000028   12....       LCALL     ?Subroutine39 & 0xFFFF
    325          
    326            #if defined( MANAGED_SCAN )
    327                ZDOManagedScan_Next();
    328                ret = NLME_NetworkDiscoveryRequest( managedScanChannelMask, BEACON_ORDER_15_MSEC );
    329            #else
    330                ret = NLME_NetworkDiscoveryRequest( zgDefaultChannelList, zgDefaultStartingScanDuration );
   \                     ??CrossCallReturnLabel_53:
   \   00002B   12....       LCALL     ?XLOAD_R2345
   \   00002E   12....       LCALL     `??NLME_NetworkDiscoveryRequest::?relay`; Banked call to: NLME_NetworkDiscoveryRequest
   \   000031   E9           MOV       A,R1
   \   000032   F8           MOV       R0,A
    331              #if defined ( ZIGBEE_FREQ_AGILITY )
    332                if ( !( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE ) &&
    333                      ( ret == ZSuccess ) && ( ++discRetries == 4 ) )
    334                {
    335                  // For devices with RxOnWhenIdle equals to FALSE, any network channel
    336                  // change will not be recieved. On these devices or routers that have
    337                  // lost the network, an active scan shall be conducted on the Default
    338                  // Channel list using the extended PANID to find the network. If the
    339                  // extended PANID isn't found using the Default Channel list, an scan
    340                  // should be completed using all channels.
    341                  zgDefaultChannelList = MAX_CHANNELS_24GHZ;
    342                }
    343              #endif // ZIGBEE_FREQ_AGILITY
    344              #if defined ( ZIGBEE_COMMISSIONING )
    345                if (startMode == MODE_REJOIN && scanCnt++ >= 5 )
   \   000033   7403         MOV       A,#0x3
   \   000035   6E           XRL       A,R6
   \   000036   706A         JNZ       ??ZDO_StartDevice_4
   \   000038   90....       MOV       DPTR,#??scanCnt
   \   00003B   E0           MOVX      A,@DPTR
   \   00003C   F9           MOV       R1,A
   \   00003D   7401         MOV       A,#0x1
   \   00003F   29           ADD       A,R1
   \   000040   F0           MOVX      @DPTR,A
   \   000041   E9           MOV       A,R1
   \   000042   C3           CLR       C
   \   000043   9405         SUBB      A,#0x5
   \   000045   405B         JC        ??ZDO_StartDevice_4
    346                {
    347                  // When ApsUseExtendedPanID is commissioned to a non zero value via
    348                  // application specific means, the device shall conduct an active scan
    349                  // on the Default Channel list and join the PAN with the same
    350                  // ExtendedPanID. If the PAN is not found, an scan should be completed
    351                  // on all channels.
    352                  // When devices rejoin the network and the PAN is not found from
    353                  zgDefaultChannelList = MAX_CHANNELS_24GHZ;
   \   000047   90....       MOV       DPTR,#zgDefaultChannelList
   \   00004A   E4           CLR       A
   \   00004B   F0           MOVX      @DPTR,A
   \   00004C   A3           INC       DPTR
   \   00004D   74F8         MOV       A,#-0x8
   \   00004F   F0           MOVX      @DPTR,A
   \   000050   A3           INC       DPTR
   \   000051   74FF         MOV       A,#-0x1
   \   000053   F0           MOVX      @DPTR,A
   \   000054   A3           INC       DPTR
   \   000055   7407         MOV       A,#0x7
   \   000057   F0           MOVX      @DPTR,A
   \   000058   8048         SJMP      ??ZDO_StartDevice_4
    354                }
    355              #endif // ZIGBEE_COMMISSIONING
    356            #endif
    357              }
    358              else if ( startMode == MODE_RESUME )
   \                     ??ZDO_StartDevice_3:
   \   00005A   7401         MOV       A,#0x1
   \   00005C   6E           XRL       A,R6
   \   00005D   7046         JNZ       ??ZDO_StartDevice_1
    359              {
    360                if ( logicalType == NODETYPE_ROUTER )
   \   00005F   7401         MOV       A,#0x1
   \   000061   6F           XRL       A,R7
   \   000062   90....       MOV       DPTR,#devState
   \   000065   702E         JNZ       ??ZDO_StartDevice_5
    361                {
    362                  ZMacScanCnf_t scanCnf;
    363                  devState = DEV_NWK_ORPHAN;
   \   000067   740A         MOV       A,#0xa
   \   000069   F0           MOVX      @DPTR,A
    364          
    365                  /* if router and nvram is available, fake successful orphan scan */
    366                  scanCnf.hdr.Status = ZSUCCESS;
   \   00006A   7401         MOV       A,#0x1
   \   00006C   12....       LCALL     ?XSTACK_DISP0_8
   \   00006F   E4           CLR       A
   \   000070   F0           MOVX      @DPTR,A
    367                  scanCnf.ScanType = ZMAC_ORPHAN_SCAN;
   \   000071   7402         MOV       A,#0x2
   \   000073   12....       LCALL     ?XSTACK_DISP0_8
   \   000076   7403         MOV       A,#0x3
   \   000078   F0           MOVX      @DPTR,A
    368                  scanCnf.UnscannedChannels = 0;
   \   000079   04           INC       A
   \   00007A   12....       LCALL     ?XSTACK_DISP0_8
   \   00007D   E4           CLR       A
   \   00007E   F0           MOVX      @DPTR,A
   \   00007F   A3           INC       DPTR
   \   000080   F0           MOVX      @DPTR,A
   \   000081   A3           INC       DPTR
   \   000082   F0           MOVX      @DPTR,A
   \   000083   A3           INC       DPTR
   \   000084   F0           MOVX      @DPTR,A
    369                  scanCnf.ResultListSize = 0;
   \   000085   7408         MOV       A,#0x8
   \   000087   12....       LCALL     ?XSTACK_DISP0_8
   \   00008A   E4           CLR       A
   \   00008B   F0           MOVX      @DPTR,A
    370                  nwk_ScanJoiningOrphan(&scanCnf);
   \   00008C                ; Setup parameters for call to function nwk_ScanJoiningOrphan
   \   00008C   AA..         MOV       R2,?XSP + 0
   \   00008E   AB..         MOV       R3,?XSP + 1
   \   000090   12....       LCALL     `??nwk_ScanJoiningOrphan::?relay`; Banked call to: nwk_ScanJoiningOrphan
    371          
    372                  ret = ZSuccess;
   \   000093   8020         SJMP      ??ZDO_StartDevice_6
    373                }
    374                else
    375                {
    376                  devState = DEV_NWK_ORPHAN;
   \                     ??ZDO_StartDevice_5:
   \   000095   740A         MOV       A,#0xa
   \   000097   12....       LCALL     ?Subroutine39 & 0xFFFF
    377                  ret = NLME_OrphanJoinRequest( zgDefaultChannelList,
    378                                                zgDefaultStartingScanDuration );
    379                }
    380              }
    381              else
    382              {
    383          #if defined( LCD_SUPPORTED )
    384                HalLcdWriteScreen( "StartDevice ERR", "MODE unknown" );
    385          #endif
    386              }
    387            }
   \                     ??CrossCallReturnLabel_54:
   \   00009A   12....       LCALL     ?XLOAD_R2345
   \   00009D   12....       LCALL     `??NLME_OrphanJoinRequest::?relay`; Banked call to: NLME_OrphanJoinRequest
   \   0000A0   E9           MOV       A,R1
   \   0000A1   F8           MOV       R0,A
    388          
    389            if ( ret != ZSuccess )
   \                     ??ZDO_StartDevice_4:
   \   0000A2   E8           MOV       A,R0
   \   0000A3   6010         JZ        ??ZDO_StartDevice_6
    390              osal_start_timerEx(ZDAppTaskID, ZDO_NETWORK_INIT, NWK_RETRY_DELAY );
   \                     ??ZDO_StartDevice_1:
   \   0000A5                ; Setup parameters for call to function osal_start_timerEx
   \   0000A5   7CE8         MOV       R4,#-0x18
   \   0000A7   7D03         MOV       R5,#0x3
   \   0000A9   7A01         MOV       R2,#0x1
   \   0000AB   7B00         MOV       R3,#0x0
   \   0000AD   90....       MOV       DPTR,#ZDAppTaskID
   \   0000B0   E0           MOVX      A,@DPTR
   \   0000B1   F9           MOV       R1,A
   \   0000B2   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
    391          }
   \                     ??ZDO_StartDevice_6:
   \   0000B5   740B         MOV       A,#0xb
   \   0000B7   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000BA                REQUIRE ?Subroutine1
   \   0000BA                ; // Fall through to label ?Subroutine1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F01         MOV       R7,#0x1
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                ; Setup parameters for call to function NLME_NetworkDiscoveryRequest
   \   000001                ; Setup parameters for call to function NLME_OrphanJoinRequest
   \   000001   90....       MOV       DPTR,#zgDefaultStartingScanDuration
   \   000004   E0           MOVX      A,@DPTR
   \   000005   F9           MOV       R1,A
   \   000006   90....       MOV       DPTR,#zgDefaultChannelList
   \   000009   22           RET

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??scanCnt:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    392          
    393          /**************************************************************************************************
    394           * @fn          zdoSendStateChangeMsg
    395           *
    396           * @brief       Helper function for ZDO_UpdateNwkStatus.
    397           *
    398           * input parameters
    399           *
    400           * @param       taskId - The OSAL task identifier to which to send the ZDO_STATE_CHANGE_EVT.
    401           * @param       state - The current device state.
    402           *
    403           * output parameters
    404           *
    405           * None.
    406           *
    407           * @return      None.
    408           **************************************************************************************************
    409           */
    410          static void zdoSendStateChangeMsg(uint8 state, uint8 taskId)
    411          {
    412            osal_event_hdr_t *pMsg = (osal_event_hdr_t *)osal_msg_find(taskId, ZDO_STATE_CHANGE);
    413          
    414            if (NULL == pMsg)
    415            {
    416              if (NULL == (pMsg = (osal_event_hdr_t *)osal_msg_allocate(sizeof(osal_event_hdr_t))))
    417              {
    418                // Upon failure to notify any EndPoint of the state change, re-set the ZDO event to
    419                // try again later when more Heap may be available.
    420                osal_set_event(ZDAppTaskID, ZDO_STATE_CHANGE_EVT);
    421              }
    422              else
    423              {
    424                pMsg->event = ZDO_STATE_CHANGE;
    425                pMsg->status = state;
    426          
    427                (void)osal_msg_send(taskId, (uint8 *)pMsg);
    428              }
    429            }
    430            else
    431            {
    432              // Modify in place the status of an existing ZDO_STATE_CHANGE message to the EndPoint.
    433              pMsg->status = state;
    434            }
    435          }
    436          
    437          /**************************************************************************************************
    438           * @fn          ZDO_UpdateNwkStatus
    439           *
    440           * @brief       This function sends a ZDO_STATE_CHANGE message to the task of every EndPoint
    441           *              registered with AF (except, of course, the ZDO_EP). Even if a single task has more
    442           *              than one registered EndPoint, it will only receive one notification per state
    443           *              change. Although the device may go through a sequence of state changes, the
    444           *              Application task may only receive notification of the final, steady-state state
    445           *              because it has the lowest priority and never even runs to receive the intermediate
    446           *              state change notifications.
    447           *
    448           * input parameters
    449           *
    450           * @param       state - The current device state.
    451           *
    452           * output parameters
    453           *
    454           * None.
    455           *
    456           * @return      None.
    457           **************************************************************************************************
    458           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    459          void ZDO_UpdateNwkStatus(devStates_t state)
   \                     ZDO_UpdateNwkStatus:
    460          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V1,R1
    461            epList_t *pItem = epList;
   \   000007   90....       MOV       DPTR,#epList
   \   00000A   800D         SJMP      ??ZDO_UpdateNwkStatus_0
    462          
    463            while (pItem != NULL)
    464            {
    465              if (pItem->epDesc->endPoint != ZDO_EP)
    466              {
    467                zdoSendStateChangeMsg(state, *(pItem->epDesc->task_id));
   \                     ??ZDO_UpdateNwkStatus_1:
   \   00000C   A3           INC       DPTR
   \   00000D   E5..         MOV       A,?V1
   \   00000F   F0           MOVX      @DPTR,A
    468              }
    469          
    470              pItem = pItem->nextDesc;
   \                     ??ZDO_UpdateNwkStatus_2:
   \   000010   8E82         MOV       DPL,R6
   \   000012   8F83         MOV       DPH,R7
   \   000014   A3           INC       DPTR
   \   000015   A3           INC       DPTR
   \   000016   A3           INC       DPTR
   \   000017   A3           INC       DPTR
   \   000018   A3           INC       DPTR
   \                     ??ZDO_UpdateNwkStatus_0:
   \   000019   12....       LCALL     ??Subroutine228_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_423:
   \   00001C   4F           ORL       A,R7
   \   00001D   6050         JZ        ??ZDO_UpdateNwkStatus_3
   \   00001F   8E82         MOV       DPL,R6
   \   000021   8F83         MOV       DPH,R7
   \   000023   12....       LCALL     ??Subroutine226_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_399:
   \   000026   60E8         JZ        ??ZDO_UpdateNwkStatus_2
   \   000028   8E82         MOV       DPL,R6
   \   00002A   8F83         MOV       DPH,R7
   \   00002C   12....       LCALL     ??Subroutine216_0 & 0xFFFF
    471            }
   \                     ??CrossCallReturnLabel_346:
   \   00002F   12....       LCALL     ??Subroutine226_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_400:
   \   000032   F5..         MOV       ?V0,A
   \   000034                ; Setup parameters for call to function osal_msg_find
   \   000034   7AD1         MOV       R2,#-0x2f
   \   000036   F9           MOV       R1,A
   \   000037   12....       LCALL     `??osal_msg_find::?relay`; Banked call to: osal_msg_find
   \   00003A   8A82         MOV       DPL,R2
   \   00003C   8B83         MOV       DPH,R3
   \   00003E   E582         MOV       A,DPL
   \   000040   4583         ORL       A,DPH
   \   000042   70C8         JNZ       ??ZDO_UpdateNwkStatus_1
   \   000044                ; Setup parameters for call to function osal_msg_allocate
   \   000044   7A02         MOV       R2,#0x2
   \   000046   7B00         MOV       R3,#0x0
   \   000048   12....       LCALL     `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   00004B   EA           MOV       A,R2
   \   00004C   4B           ORL       A,R3
   \   00004D   700E         JNZ       ??ZDO_UpdateNwkStatus_4
   \   00004F                ; Setup parameters for call to function osal_set_event
   \   00004F   7A10         MOV       R2,#0x10
   \   000051   7B00         MOV       R3,#0x0
   \   000053   90....       MOV       DPTR,#ZDAppTaskID
   \   000056   E0           MOVX      A,@DPTR
   \   000057   F9           MOV       R1,A
   \   000058   12....       LCALL     `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   00005B   80B3         SJMP      ??ZDO_UpdateNwkStatus_2
   \                     ??ZDO_UpdateNwkStatus_4:
   \   00005D   8A82         MOV       DPL,R2
   \   00005F   8B83         MOV       DPH,R3
   \   000061   74D1         MOV       A,#-0x2f
   \   000063   F0           MOVX      @DPTR,A
   \   000064   A3           INC       DPTR
   \   000065   E5..         MOV       A,?V1
   \   000067   F0           MOVX      @DPTR,A
   \   000068                ; Setup parameters for call to function osal_msg_send
   \   000068   A9..         MOV       R1,?V0
   \   00006A   12....       LCALL     `??osal_msg_send::?relay`; Banked call to: osal_msg_send
   \   00006D   80A1         SJMP      ??ZDO_UpdateNwkStatus_2
    472          #if defined MT_ZDO_CB_FUNC
    473            zdoSendStateChangeMsg(state, MT_TaskID);
    474          #endif
    475          
    476            ZDAppNwkAddr.addr.shortAddr = NLME_GetShortAddr();
   \                     ??ZDO_UpdateNwkStatus_3:
   \   00006F                ; Setup parameters for call to function NLME_GetShortAddr
   \   00006F   12....       LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   000072   90....       MOV       DPTR,#ZDAppNwkAddr
   \   000075   12....       LCALL     ??Subroutine224_0 & 0xFFFF
    477            (void)NLME_GetExtAddr();  // Load the saveExtAddr pointer.
   \                     ??CrossCallReturnLabel_384:
   \   000078                ; Setup parameters for call to function NLME_GetExtAddr
   \   000078   12....       LCALL     `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
    478          }
   \   00007B   80..         SJMP      ??Subroutine210_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine210_0:
   \   000000   7F04         MOV       R7,#0x4
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine216_0:
   \   000000   12....       LCALL     ?Subroutine183 & 0xFFFF
   \                     ??CrossCallReturnLabel_353:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine200:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   12....       LCALL     ?Subroutine208 & 0xFFFF
   \                     ??CrossCallReturnLabel_415:
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine208:
   \   000000   A3           INC       DPTR
   \   000001   E0           MOVX      A,@DPTR
   \   000002   F583         MOV       DPH,A
   \   000004   8882         MOV       DPL,R0
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine183:
   \   000000   12....       LCALL     ?Subroutine208 & 0xFFFF
   \                     ??CrossCallReturnLabel_414:
   \   000003   A3           INC       DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine224_0:
   \   000000   EA           MOV       A,R2
   \   000001                REQUIRE ??Subroutine225_0
   \   000001                ; // Fall through to label ??Subroutine225_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine225_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   A3           INC       DPTR
   \   000002   EB           MOV       A,R3
   \   000003   F0           MOVX      @DPTR,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine226_0:
   \   000000   12....       LCALL     ?Subroutine163 & 0xFFFF
   \                     ??CrossCallReturnLabel_408:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine163:
   \   000000   12....       LCALL     ?Subroutine200 & 0xFFFF
   \                     ??CrossCallReturnLabel_411:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine228_0:
   \   000000   12....       LCALL     ??Subroutine229_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_428:
   \   000003                ; Setup parameters for call to function AddrMgrExtAddrValid
   \   000003                ; Setup parameters for call to function sAddrExtCpy
   \   000003   EE           MOV       A,R6
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine229_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FE           MOV       R6,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FF           MOV       R7,A
   \   000005   22           RET
    479          
    480          #if defined ( REFLECTOR )
    481          /*********************************************************************
    482           * @fn          ZDO_RemoveEndDeviceBind
    483           *
    484           * @brief       Remove the end device bind
    485           *
    486           * @param  none
    487           *
    488           * @return      none
    489           */
    490          static void ZDO_RemoveEndDeviceBind( void )
    491          {
    492            if ( ZDO_EDBind != NULL )
    493            {
    494              // Free the RAM
    495              if ( ZDO_EDBind->inClusters != NULL )
    496                osal_mem_free( ZDO_EDBind->inClusters );
    497              if ( ZDO_EDBind->outClusters != NULL )
    498                osal_mem_free( ZDO_EDBind->outClusters );
    499              osal_mem_free( ZDO_EDBind );
    500              ZDO_EDBind = NULL;
    501            }
    502          }
    503          #endif // REFLECTOR
    504          
    505          #if defined ( REFLECTOR )
    506          /*********************************************************************
    507           * @fn          ZDO_RemoveEndDeviceBind
    508           *
    509           * @brief       Remove the end device bind
    510           *
    511           * @param  none
    512           *
    513           * @return      none
    514           */
    515          static void ZDO_SendEDBindRsp( byte TransSeq, zAddrType_t *dstAddr, byte Status, byte secUse )
    516          {
    517            ZDP_EndDeviceBindRsp( TransSeq, dstAddr, Status, secUse );
    518          
    519          #if defined( LCD_SUPPORTED )
    520            HalLcdWriteString( "End Device Bind", HAL_LCD_LINE_1 );
    521            if ( Status == ZDP_SUCCESS )
    522              HalLcdWriteString( "Success Sent", HAL_LCD_LINE_2 );
    523            else
    524              HalLcdWriteString( "Timeout", HAL_LCD_LINE_2 );
    525          #endif
    526          
    527          }
    528          #endif // REFLECTOR
    529          
    530          /*********************************************************************
    531           * @fn          ZDO_CompareClusterLists
    532           *
    533           * @brief       Compare one list to another list
    534           *
    535           * @param       numList1 - number of items in list 1
    536           * @param       list1 - first list of cluster IDs
    537           * @param       numList2 - number of items in list 2
    538           * @param       list2 - second list of cluster IDs
    539           * @param       pMatches - buffer to put matches
    540           *
    541           * @return      number of matches
    542           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    543          static byte ZDO_CompareClusterLists( byte numList1, uint16 *list1,
   \                     ZDO_CompareClusterLists:
    544                                    byte numList2, uint16 *list2, uint16 *pMatches )
    545          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V0,R1
   \   000007   8A..         MOV       ?V6,R2
   \   000009   8B..         MOV       ?V7,R3
   \   00000B   8C..         MOV       ?V4,R4
    546            byte x, y;
    547            uint16 z;
    548            byte numMatches = 0;
   \   00000D   7A00         MOV       R2,#0x0
    549          
    550            // Check the first in against the seconds out
    551            for ( x = 0; x < numList1; x++ )
   \   00000F   7B00         MOV       R3,#0x0
   \   000011   7410         MOV       A,#0x10
   \   000013   12....       LCALL     ?XSTACK_DISP0_8
   \   000016   12....       LCALL     ?Subroutine182 & 0xFFFF
   \                     ??CrossCallReturnLabel_295:
   \   000019   7412         MOV       A,#0x12
   \   00001B   12....       LCALL     ?XSTACK_DISP0_8
   \   00001E   12....       LCALL     ??Subroutine229_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_424:
   \   000021   804E         SJMP      ??ZDO_CompareClusterLists_0
    552            {
    553              for ( y = 0; y < numList2; y++ )
    554              {
    555                z = list2[y];
   \                     ??ZDO_CompareClusterLists_1:
   \   000023   A8..         MOV       R0,?V1
   \   000025   E8           MOV       A,R0
   \   000026   28           ADD       A,R0
   \   000027   F8           MOV       R0,A
   \   000028   E4           CLR       A
   \   000029   33           RLC       A
   \   00002A   F9           MOV       R1,A
   \   00002B   EC           MOV       A,R4
   \   00002C   28           ADD       A,R0
   \   00002D   F582         MOV       DPL,A
   \   00002F   ED           MOV       A,R5
   \   000030   39           ADDC      A,R1
   \   000031   F583         MOV       DPH,A
   \   000033   E0           MOVX      A,@DPTR
   \   000034   F5..         MOV       ?V2,A
   \   000036   A3           INC       DPTR
   \   000037   E0           MOVX      A,@DPTR
   \   000038   F5..         MOV       ?V3,A
    556                if ( list1[x] == z )
   \   00003A   EB           MOV       A,R3
   \   00003B   12....       LCALL     ?Subroutine116 & 0xFFFF
   \                     ??CrossCallReturnLabel_180:
   \   00003E   E5..         MOV       A,?V6
   \   000040   28           ADD       A,R0
   \   000041   F582         MOV       DPL,A
   \   000043   E5..         MOV       A,?V7
   \   000045   39           ADDC      A,R1
   \   000046   F583         MOV       DPH,A
   \   000048   E0           MOVX      A,@DPTR
   \   000049   65..         XRL       A,?V2
   \   00004B   7004         JNZ       ??ZDO_CompareClusterLists_2
   \   00004D   A3           INC       DPTR
   \   00004E   E0           MOVX      A,@DPTR
   \   00004F   65..         XRL       A,?V3
   \                     ??ZDO_CompareClusterLists_2:
   \   000051   7014         JNZ       ??ZDO_CompareClusterLists_3
    557                  pMatches[numMatches++] = z;
   \   000053   EA           MOV       A,R2
   \   000054   12....       LCALL     ?Subroutine116 & 0xFFFF
    558              }
   \                     ??CrossCallReturnLabel_181:
   \   000057   EE           MOV       A,R6
   \   000058   28           ADD       A,R0
   \   000059   F582         MOV       DPL,A
   \   00005B   EF           MOV       A,R7
   \   00005C   39           ADDC      A,R1
   \   00005D   F583         MOV       DPH,A
   \   00005F   E5..         MOV       A,?V2
   \   000061   F0           MOVX      @DPTR,A
   \   000062   A3           INC       DPTR
   \   000063   E5..         MOV       A,?V3
   \   000065   F0           MOVX      @DPTR,A
   \   000066   0A           INC       R2
   \                     ??ZDO_CompareClusterLists_3:
   \   000067   05..         INC       ?V1
   \                     ??ZDO_CompareClusterLists_4:
   \   000069   E5..         MOV       A,?V1
   \   00006B   C3           CLR       C
   \   00006C   95..         SUBB      A,?V4
   \   00006E   40B3         JC        ??ZDO_CompareClusterLists_1
   \   000070   0B           INC       R3
   \                     ??ZDO_CompareClusterLists_0:
   \   000071   EB           MOV       A,R3
   \   000072   C3           CLR       C
   \   000073   95..         SUBB      A,?V0
   \   000075   5005         JNC       ??ZDO_CompareClusterLists_5
   \   000077   75..00       MOV       ?V1,#0x0
   \   00007A   80ED         SJMP      ??ZDO_CompareClusterLists_4
    559            }
    560          
    561            return ( numMatches );
   \                     ??ZDO_CompareClusterLists_5:
   \   00007C   EA           MOV       A,R2
   \   00007D   F9           MOV       R1,A
   \   00007E   02....       LJMP      ??Subroutine217_0 & 0xFFFF
    562          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine116:
   \   000000   25E0         ADD       A,0xE0 /* A   */
   \   000002   F8           MOV       R0,A
   \   000003   E4           CLR       A
   \   000004   33           RLC       A
   \   000005   F9           MOV       R1,A
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine182:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FC           MOV       R4,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FD           MOV       R5,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine217_0:
   \   000000   7F08         MOV       R7,#0x8
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    563          
    564          /*********************************************************************
    565           * Utility functions
    566           */
    567          
    568          /*********************************************************************
    569           * @fn          ZDO_CompareByteLists
    570           *
    571           * @brief       Compares two lists for matches.
    572           *
    573           * @param       ACnt  - number of entries in list A
    574           * @param       AList  - List A
    575           * @param       BCnt  - number of entries in list B
    576           * @param       BList  - List B
    577           *
    578           * @return      true if a match is found
    579           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    580          byte ZDO_AnyClusterMatches( byte ACnt, uint16 *AList, byte BCnt, uint16 *BList )
   \                     ZDO_AnyClusterMatches:
    581          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
   \   000007   8C..         MOV       ?V2,R4
    582            byte x, y;
    583          
    584            for ( x = 0; x < ACnt; x++ )
   \   000009   7F00         MOV       R7,#0x0
   \   00000B   740C         MOV       A,#0xc
   \   00000D   12....       LCALL     ?XSTACK_DISP0_8
   \   000010   12....       LCALL     ??Subroutine251_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_537:
   \   000013   8001         SJMP      ??ZDO_AnyClusterMatches_0
   \                     ??ZDO_AnyClusterMatches_1:
   \   000015   0F           INC       R7
   \                     ??ZDO_AnyClusterMatches_0:
   \   000016   EF           MOV       A,R7
   \   000017   C3           CLR       C
   \   000018   9E           SUBB      A,R6
   \   000019   503A         JNC       ??ZDO_AnyClusterMatches_2
    585            {
    586              for ( y = 0; y < BCnt; y++ )
   \   00001B   75..00       MOV       ?V3,#0x0
   \   00001E   8002         SJMP      ??ZDO_AnyClusterMatches_3
   \                     ??ZDO_AnyClusterMatches_4:
   \   000020   05..         INC       ?V3
   \                     ??ZDO_AnyClusterMatches_3:
   \   000022   E5..         MOV       A,?V3
   \   000024   C3           CLR       C
   \   000025   95..         SUBB      A,?V2
   \   000027   50EC         JNC       ??ZDO_AnyClusterMatches_1
    587              {
    588                if ( AList[x] == BList[y] )
   \   000029   EF           MOV       A,R7
   \   00002A   12....       LCALL     ??Subroutine245_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_528:
   \   00002D   EA           MOV       A,R2
   \   00002E   2C           ADD       A,R4
   \   00002F   F582         MOV       DPL,A
   \   000031   EB           MOV       A,R3
   \   000032   3D           ADDC      A,R5
   \   000033   12....       LCALL     ?Subroutine178 & 0xFFFF
   \                     ??CrossCallReturnLabel_341:
   \   000036   AC..         MOV       R4,?V3
   \   000038   EC           MOV       A,R4
   \   000039   2C           ADD       A,R4
   \   00003A   FC           MOV       R4,A
   \   00003B   E4           CLR       A
   \   00003C   33           RLC       A
   \   00003D   FD           MOV       R5,A
   \   00003E   E8           MOV       A,R0
   \   00003F   2C           ADD       A,R4
   \   000040   F582         MOV       DPL,A
   \   000042   E9           MOV       A,R1
   \   000043   3D           ADDC      A,R5
   \   000044   F583         MOV       DPH,A
   \   000046   E0           MOVX      A,@DPTR
   \   000047   65..         XRL       A,?V0
   \   000049   7004         JNZ       ??ZDO_AnyClusterMatches_5
   \   00004B   A3           INC       DPTR
   \   00004C   E0           MOVX      A,@DPTR
   \   00004D   65..         XRL       A,?V1
   \                     ??ZDO_AnyClusterMatches_5:
   \   00004F   70CF         JNZ       ??ZDO_AnyClusterMatches_4
    589                {
    590                  return true;
   \   000051   7901         MOV       R1,#0x1
   \   000053   8002         SJMP      ??ZDO_AnyClusterMatches_6
    591                }
    592              }
    593            }
    594          
    595            return false;
   \                     ??ZDO_AnyClusterMatches_2:
   \   000055   7900         MOV       R1,#0x0
   \                     ??ZDO_AnyClusterMatches_6:
   \   000057   02....       LJMP      ??Subroutine210_0 & 0xFFFF
    596          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine178:
   \   000000   F583         MOV       DPH,A
   \   000002                REQUIRE ??Subroutine211_0
   \   000002                ; // Fall through to label ??Subroutine211_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine211_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V0,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   F5..         MOV       ?V1,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine245_0:
   \   000000   25E0         ADD       A,0xE0 /* A   */
   \   000002   FC           MOV       R4,A
   \   000003   E4           CLR       A
   \   000004   33           RLC       A
   \   000005   FD           MOV       R5,A
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine251_0:
   \   000000   12....       LCALL     ?Subroutine181 & 0xFFFF
   \                     ??CrossCallReturnLabel_555:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine181:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   22           RET
    597          
    598          /*********************************************************************
    599           * Callback functions from ZDProfile
    600           */
    601          
    602          /*********************************************************************
    603           * @fn          ZDO_ProcessNodeDescReq
    604           *
    605           * @brief       This function processes and responds to the
    606           *              Node_Desc_req message.
    607           *
    608           * @param       inMsg - incoming message
    609           *
    610           * @return      none
    611           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    612          void ZDO_ProcessNodeDescReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessNodeDescReq:
    613          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL     ?Subroutine51 & 0xFFFF
    614            uint16 aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
    615            NodeDescriptorFormat_t *desc = NULL;
    616          
    617            if ( aoi == ZDAppNwkAddr.addr.shortAddr )
   \                     ??CrossCallReturnLabel_74:
   \   000008   7003         JNZ       ??ZDO_ProcessNodeDescReq_0
   \   00000A   A3           INC       DPTR
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   6D           XRL       A,R5
   \                     ??ZDO_ProcessNodeDescReq_0:
   \   00000D   7017         JNZ       ??ZDO_ProcessNodeDescReq_1
    618            {
    619              desc = &ZDO_Config_Node_Descriptor;
    620            }
    621          
    622            if ( desc != NULL )
    623            {
    624              ZDP_NodeDescMsg( inMsg, aoi, desc );
   \   00000F                ; Setup parameters for call to function ZDP_NodeDescMsg
   \   00000F   75....       MOV       ?V0,#ZDO_Config_Node_Descriptor & 0xff
   \   000012   75....       MOV       ?V1,#(ZDO_Config_Node_Descriptor >> 8) & 0xff
   \   000015   78..         MOV       R0,#?V0
   \   000017   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00001A   EE           MOV       A,R6
   \   00001B   FA           MOV       R2,A
   \   00001C   12....       LCALL     `??ZDP_NodeDescMsg::?relay`; Banked call to: ZDP_NodeDescMsg
   \   00001F   7402         MOV       A,#0x2
   \   000021   12....       LCALL     ?DEALLOC_XSTACK8
   \   000024   801F         SJMP      ??ZDO_ProcessNodeDescReq_2
    625            }
    626            else
    627            {
    628              ZDP_GenericRsp( inMsg->TransSeq, &(inMsg->srcAddr),
    629                        ZDP_INVALID_REQTYPE, aoi, Node_Desc_rsp, inMsg->SecurityUse );
   \                     ??ZDO_ProcessNodeDescReq_1:
   \   000026                ; Setup parameters for call to function ZDP_GenericRsp
   \   000026   75..02       MOV       ?V0,#0x2
   \   000029   75..80       MOV       ?V1,#-0x80
   \   00002C   78..         MOV       R0,#?V0
   \   00002E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000031   8C..         MOV       ?V0,R4
   \   000033   8D..         MOV       ?V1,R5
   \   000035   78..         MOV       R0,#?V0
   \   000037   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003A   12....       LCALL     ?Subroutine56 & 0xFFFF
    630            }
   \                     ??CrossCallReturnLabel_85:
   \   00003D   12....       LCALL     `??ZDP_GenericRsp::?relay`; Banked call to: ZDP_GenericRsp
   \   000040   7404         MOV       A,#0x4
   \   000042   12....       LCALL     ?DEALLOC_XSTACK8
    631          }
   \                     ??ZDO_ProcessNodeDescReq_2:
   \   000045   80..         SJMP      ??Subroutine214_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine56:
   \   000000   12....       LCALL     ?Subroutine186 & 0xFFFF
   \                     ??CrossCallReturnLabel_301:
   \   000003   7C80         MOV       R4,#-0x80
   \   000005   12....       LCALL     ?Subroutine184 & 0xFFFF
   \                     ??CrossCallReturnLabel_299:
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine51:
   \   000000   EA           MOV       A,R2
   \   000001   FE           MOV       R6,A
   \   000002   EB           MOV       A,R3
   \   000003   FF           MOV       R7,A
   \   000004   12....       LCALL     ?Subroutine189 & 0xFFFF
   \                     ??CrossCallReturnLabel_435:
   \   000007   3F           ADDC      A,R7
   \   000008   12....       LCALL     ?Subroutine164 & 0xFFFF
   \                     ??CrossCallReturnLabel_274:
   \   00000B   FC           MOV       R4,A
   \   00000C   E4           CLR       A
   \   00000D   39           ADDC      A,R1
   \   00000E   FD           MOV       R5,A
   \   00000F   90....       MOV       DPTR,#ZDAppNwkAddr
   \   000012   E0           MOVX      A,@DPTR
   \   000013   6C           XRL       A,R4
   \   000014   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine189:
   \   000000   EE           MOV       A,R6
   \   000001                REQUIRE ??Subroutine212_0
   \   000001                ; // Fall through to label ??Subroutine212_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine212_0:
   \   000000   12....       LCALL     ?Subroutine206 & 0xFFFF
   \                     ??CrossCallReturnLabel_692:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine206:
   \   000000   2413         ADD       A,#0x13
   \   000002   F582         MOV       DPL,A
   \   000004   E4           CLR       A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine214_0:
   \   000000   7F02         MOV       R7,#0x2
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine186:
   \   000000   EE           MOV       A,R6
   \   000001   240E         ADD       A,#0xe
   \   000003   F582         MOV       DPL,A
   \   000005   E4           CLR       A
   \   000006   3F           ADDC      A,R7
   \   000007   F583         MOV       DPH,A
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   FD           MOV       R5,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine184:
   \   000000   EE           MOV       A,R6
   \   000001   2402         ADD       A,#0x2
   \   000003   FA           MOV       R2,A
   \   000004   E4           CLR       A
   \   000005   3F           ADDC      A,R7
   \   000006   FB           MOV       R3,A
   \   000007   EE           MOV       A,R6
   \   000008   240F         ADD       A,#0xf
   \   00000A   F582         MOV       DPL,A
   \   00000C   E4           CLR       A
   \   00000D   3F           ADDC      A,R7
   \   00000E   F583         MOV       DPH,A
   \   000010   E0           MOVX      A,@DPTR
   \   000011   F9           MOV       R1,A
   \   000012   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine164:
   \   000000   12....       LCALL     ?Subroutine204 & 0xFFFF
   \                     ??CrossCallReturnLabel_337:
   \   000003   FA           MOV       R2,A
   \   000004   A3           INC       DPTR
   \   000005   E0           MOVX      A,@DPTR
   \   000006   F8           MOV       R0,A
   \   000007   E4           CLR       A
   \   000008   C8           XCH       A,R0
   \   000009   F9           MOV       R1,A
   \   00000A   EA           MOV       A,R2
   \   00000B   28           ADD       A,R0
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine204:
   \   000000   F583         MOV       DPH,A
   \   000002   E0           MOVX      A,@DPTR
   \   000003   F8           MOV       R0,A
   \   000004   A3           INC       DPTR
   \   000005   E0           MOVX      A,@DPTR
   \   000006   F9           MOV       R1,A
   \   000007   8882         MOV       DPL,R0
   \   000009   8983         MOV       DPH,R1
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   22           RET
    632          
    633          /*********************************************************************
    634           * @fn          ZDO_ProcessPowerDescReq
    635           *
    636           * @brief       This function processes and responds to the
    637           *              Node_Power_req message.
    638           *
    639           * @param       inMsg  - incoming request
    640           *
    641           * @return      none
    642           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    643          void ZDO_ProcessPowerDescReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessPowerDescReq:
    644          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL     ?Subroutine51 & 0xFFFF
    645            uint16 aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
    646            NodePowerDescriptorFormat_t *desc = NULL;
    647          
    648            if ( aoi == ZDAppNwkAddr.addr.shortAddr )
   \                     ??CrossCallReturnLabel_75:
   \   000008   7003         JNZ       ??ZDO_ProcessPowerDescReq_0
   \   00000A   A3           INC       DPTR
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   6D           XRL       A,R5
   \                     ??ZDO_ProcessPowerDescReq_0:
   \   00000D   7017         JNZ       ??ZDO_ProcessPowerDescReq_1
    649            {
    650              desc = &ZDO_Config_Power_Descriptor;
    651            }
    652          
    653            if ( desc != NULL )
    654            {
    655              ZDP_PowerDescMsg( inMsg, aoi, desc );
   \   00000F                ; Setup parameters for call to function ZDP_PowerDescMsg
   \   00000F   75....       MOV       ?V0,#ZDO_Config_Power_Descriptor & 0xff
   \   000012   75....       MOV       ?V1,#(ZDO_Config_Power_Descriptor >> 8) & 0xff
   \   000015   78..         MOV       R0,#?V0
   \   000017   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00001A   EE           MOV       A,R6
   \   00001B   FA           MOV       R2,A
   \   00001C   12....       LCALL     `??ZDP_PowerDescMsg::?relay`; Banked call to: ZDP_PowerDescMsg
   \   00001F   7402         MOV       A,#0x2
   \   000021   12....       LCALL     ?DEALLOC_XSTACK8
   \   000024   801F         SJMP      ??ZDO_ProcessPowerDescReq_2
    656            }
    657            else
    658            {
    659              ZDP_GenericRsp( inMsg->TransSeq, &(inMsg->srcAddr),
    660                        ZDP_INVALID_REQTYPE, aoi, Power_Desc_rsp, inMsg->SecurityUse );
   \                     ??ZDO_ProcessPowerDescReq_1:
   \   000026                ; Setup parameters for call to function ZDP_GenericRsp
   \   000026   75..03       MOV       ?V0,#0x3
   \   000029   75..80       MOV       ?V1,#-0x80
   \   00002C   78..         MOV       R0,#?V0
   \   00002E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000031   8C..         MOV       ?V0,R4
   \   000033   8D..         MOV       ?V1,R5
   \   000035   78..         MOV       R0,#?V0
   \   000037   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003A   12....       LCALL     ?Subroutine56 & 0xFFFF
    661            }
   \                     ??CrossCallReturnLabel_86:
   \   00003D   12....       LCALL     `??ZDP_GenericRsp::?relay`; Banked call to: ZDP_GenericRsp
   \   000040   7404         MOV       A,#0x4
   \   000042   12....       LCALL     ?DEALLOC_XSTACK8
    662          }
   \                     ??ZDO_ProcessPowerDescReq_2:
   \   000045   80..         SJMP      ??Subroutine214_0
    663          
    664          /*********************************************************************
    665           * @fn          ZDO_ProcessSimpleDescReq
    666           *
    667           * @brief       This function processes and responds to the
    668           *              Simple_Desc_req message.
    669           *
    670           * @param       inMsg - incoming message (request)
    671           *
    672           * @return      none
    673           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   7402         MOV       A,#0x2
   \   000002                REQUIRE ??Subroutine213_0
   \   000002                ; // Fall through to label ??Subroutine213_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine213_0:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine214_0
   \   000003                ; // Fall through to label ??Subroutine214_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    674          void ZDO_ProcessSimpleDescReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessSimpleDescReq:
    675          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
    676            SimpleDescriptionFormat_t *sDesc = NULL;
   \   00000E   85..82       MOV       DPL,?XSP + 0
   \   000011   85..83       MOV       DPH,?XSP + 1
   \   000014   E4           CLR       A
   \   000015   F0           MOVX      @DPTR,A
   \   000016   A3           INC       DPTR
   \   000017   F0           MOVX      @DPTR,A
    677            uint16 aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
   \   000018   12....       LCALL     ??Subroutine227_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_419:
   \   00001B   12....       LCALL     ?Subroutine81 & 0xFFFF
   \                     ??CrossCallReturnLabel_133:
   \   00001E   FB           MOV       R3,A
   \   00001F   EC           MOV       A,R4
   \   000020   FA           MOV       R2,A
    678            byte endPoint = inMsg->asdu[2];
   \   000021   8882         MOV       DPL,R0
   \   000023   8983         MOV       DPH,R1
   \   000025   A3           INC       DPTR
   \   000026   A3           INC       DPTR
   \   000027   E0           MOVX      A,@DPTR
   \   000028   F9           MOV       R1,A
    679            byte free = false;
   \   000029   75..00       MOV       ?V1,#0x0
    680            byte stat = ZDP_SUCCESS;
   \   00002C   75..00       MOV       ?V0,#0x0
    681          
    682            if ( (endPoint == ZDO_EP) || (endPoint > MAX_ENDPOINTS) )
   \   00002F   6005         JZ        ??ZDO_ProcessSimpleDescReq_0
   \   000031   C3           CLR       C
   \   000032   94F1         SUBB      A,#-0xf
   \   000034   4005         JC        ??ZDO_ProcessSimpleDescReq_1
    683            {
    684              stat = ZDP_INVALID_EP;
   \                     ??ZDO_ProcessSimpleDescReq_0:
   \   000036   75..82       MOV       ?V0,#-0x7e
   \   000039   802A         SJMP      ??ZDO_ProcessSimpleDescReq_2
    685            }
    686            else if ( aoi == ZDAppNwkAddr.addr.shortAddr )
   \                     ??ZDO_ProcessSimpleDescReq_1:
   \   00003B   90....       MOV       DPTR,#ZDAppNwkAddr
   \   00003E   E0           MOVX      A,@DPTR
   \   00003F   6A           XRL       A,R2
   \   000040   7003         JNZ       ??ZDO_ProcessSimpleDescReq_3
   \   000042   A3           INC       DPTR
   \   000043   E0           MOVX      A,@DPTR
   \   000044   6B           XRL       A,R3
   \                     ??ZDO_ProcessSimpleDescReq_3:
   \   000045   701B         JNZ       ??ZDO_ProcessSimpleDescReq_4
    687            {
    688              free = afFindSimpleDesc( &sDesc, endPoint );
   \   000047                ; Setup parameters for call to function afFindSimpleDesc
   \   000047   AA..         MOV       R2,?XSP + 0
   \   000049   AB..         MOV       R3,?XSP + 1
   \   00004B   12....       LCALL     `??afFindSimpleDesc::?relay`; Banked call to: afFindSimpleDesc
   \   00004E   E9           MOV       A,R1
   \   00004F   FA           MOV       R2,A
    689              if ( sDesc == NULL )
   \   000050   85..82       MOV       DPL,?XSP + 0
   \   000053   85..83       MOV       DPH,?XSP + 1
   \   000056   12....       LCALL     ??Subroutine239_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_481:
   \   000059   7003         JNZ       ??ZDO_ProcessSimpleDescReq_5
    690              {
    691                stat = ZDP_NOT_ACTIVE;
   \   00005B   75..83       MOV       ?V0,#-0x7d
   \                     ??ZDO_ProcessSimpleDescReq_5:
   \   00005E   8A..         MOV       ?V1,R2
   \   000060   8003         SJMP      ??ZDO_ProcessSimpleDescReq_2
    692              }
    693            }
    694            else
    695            {
    696              if ( ZSTACK_ROUTER_BUILD )
    697              {
    698                stat = ZDP_DEVICE_NOT_FOUND;
    699              }
    700              else if ( ZSTACK_END_DEVICE_BUILD )
    701              {
    702                stat = ZDP_INVALID_REQTYPE;
   \                     ??ZDO_ProcessSimpleDescReq_4:
   \   000062   75..80       MOV       ?V0,#-0x80
    703              }
    704            }
    705          
    706            ZDP_SimpleDescMsg( inMsg, stat, sDesc );
   \                     ??ZDO_ProcessSimpleDescReq_2:
   \   000065                ; Setup parameters for call to function ZDP_SimpleDescMsg
   \   000065   85..82       MOV       DPL,?XSP + 0
   \   000068   85..83       MOV       DPH,?XSP + 1
   \   00006B   12....       LCALL     ?Subroutine182 & 0xFFFF
   \                     ??CrossCallReturnLabel_296:
   \   00006E   A9..         MOV       R1,?V0
   \   000070   EE           MOV       A,R6
   \   000071   FA           MOV       R2,A
   \   000072   EF           MOV       A,R7
   \   000073   FB           MOV       R3,A
   \   000074   12....       LCALL     `??ZDP_SimpleDescMsg::?relay`; Banked call to: ZDP_SimpleDescMsg
    707          
    708            if ( free && sDesc )
   \   000077   E5..         MOV       A,?V1
   \   000079   6017         JZ        ??ZDO_ProcessSimpleDescReq_6
   \   00007B   85..82       MOV       DPL,?XSP + 0
   \   00007E   85..83       MOV       DPH,?XSP + 1
   \   000081   12....       LCALL     ??Subroutine239_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_482:
   \   000084   600C         JZ        ??ZDO_ProcessSimpleDescReq_6
    709            {
    710              osal_mem_free( sDesc );
   \   000086                ; Setup parameters for call to function osal_mem_free
   \   000086   85..82       MOV       DPL,?XSP + 0
   \   000089   85..83       MOV       DPH,?XSP + 1
   \   00008C   12....       LCALL     ??Subroutine236_0 & 0xFFFF
    711            }
   \                     ??CrossCallReturnLabel_450:
   \   00008F   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    712          }
   \                     ??ZDO_ProcessSimpleDescReq_6:
   \   000092   02....       LJMP      ?Subroutine4 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine227_0:
   \   000000   12....       LCALL     ?Subroutine189 & 0xFFFF
   \                     ??CrossCallReturnLabel_436:
   \   000003   3F           ADDC      A,R7
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine81:
   \   000000   12....       LCALL     ?Subroutine180 & 0xFFFF
   \                     ??CrossCallReturnLabel_293:
   \   000003   FC           MOV       R4,A
   \   000004   A3           INC       DPTR
   \   000005   E0           MOVX      A,@DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine236_0:
   \   000000   12....       LCALL     ??Subroutine243_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_516:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine239_0:
   \   000000   12....       LCALL     ?Subroutine181 & 0xFFFF
   \                     ??CrossCallReturnLabel_554:
   \   000003   E8           MOV       A,R0
   \   000004   49           ORL       A,R1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine243_0:
   \   000000   12....       LCALL     ??Subroutine259_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_619:
   \   000003   FB           MOV       R3,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine180:
   \   000000   12....       LCALL     ?Subroutine204 & 0xFFFF
   \                     ??CrossCallReturnLabel_336:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine259_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET
    713          
    714          /*********************************************************************
    715           * @fn          ZDO_ProcessActiveEPReq
    716           *
    717           * @brief       This function processes and responds to the
    718           *              Active_EP_req message.
    719           *
    720           * @param       inMsg  - incoming message (request)
    721           *
    722           * @return      none
    723           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    724          void ZDO_ProcessActiveEPReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessActiveEPReq:
    725          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V4,R2
   \   000007   8B..         MOV       ?V5,R3
    726            byte cnt = 0;
   \   000009   75..00       MOV       ?V0,#0x0
    727            uint16 aoi;
    728            byte stat = ZDP_SUCCESS;
   \   00000C   75..00       MOV       ?V1,#0x0
    729          
    730            aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
   \   00000F   12....       LCALL     ??Subroutine230_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_431:
   \   000012   35..         ADDC      A,?V5
   \   000014   12....       LCALL     ?Subroutine59 & 0xFFFF
   \                     ??CrossCallReturnLabel_92:
   \   000017   FE           MOV       R6,A
   \   000018   E4           CLR       A
   \   000019   39           ADDC      A,R1
   \   00001A   FF           MOV       R7,A
    731          
    732            if ( aoi == NLME_GetShortAddr() )
   \   00001B                ; Setup parameters for call to function NLME_GetShortAddr
   \   00001B   12....       LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   00001E   EA           MOV       A,R2
   \   00001F   6E           XRL       A,R6
   \   000020   7002         JNZ       ??ZDO_ProcessActiveEPReq_0
   \   000022   EB           MOV       A,R3
   \   000023   6F           XRL       A,R7
   \                     ??ZDO_ProcessActiveEPReq_0:
   \   000024   7012         JNZ       ??ZDO_ProcessActiveEPReq_1
    733            {
    734              cnt = afNumEndPoints() - 1;  // -1 for ZDO endpoint descriptor
   \   000026                ; Setup parameters for call to function afNumEndPoints
   \   000026   12....       LCALL     `??afNumEndPoints::?relay`; Banked call to: afNumEndPoints
   \   000029   E9           MOV       A,R1
   \   00002A   14           DEC       A
   \   00002B   F5..         MOV       ?V0,A
    735              afEndPoints( (uint8 *)ZDOBuildBuf, true );
   \   00002D                ; Setup parameters for call to function afEndPoints
   \   00002D   7901         MOV       R1,#0x1
   \   00002F   7A..         MOV       R2,#ZDOBuildBuf & 0xff
   \   000031   7B..         MOV       R3,#(ZDOBuildBuf >> 8) & 0xff
   \   000033   12....       LCALL     `??afEndPoints::?relay`; Banked call to: afEndPoints
   \   000036   8003         SJMP      ??ZDO_ProcessActiveEPReq_2
    736            }
    737            else
    738            {
    739              stat = ZDP_INVALID_REQTYPE;
   \                     ??ZDO_ProcessActiveEPReq_1:
   \   000038   75..80       MOV       ?V1,#-0x80
    740            }
    741          
    742            ZDP_ActiveEPRsp( inMsg->TransSeq, &(inMsg->srcAddr), stat,
    743                            aoi, cnt, (uint8 *)ZDOBuildBuf, inMsg->SecurityUse );
   \                     ??ZDO_ProcessActiveEPReq_2:
   \   00003B                ; Setup parameters for call to function ZDP_EPRsp
   \   00003B   12....       LCALL     ?Subroutine133 & 0xFFFF
   \                     ??CrossCallReturnLabel_613:
   \   00003E   35..         ADDC      A,?V5
   \   000040   12....       LCALL     ??Subroutine218_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_354:
   \   000043   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000046   75....       MOV       ?V2,#ZDOBuildBuf & 0xff
   \   000049   75....       MOV       ?V3,#(ZDOBuildBuf >> 8) & 0xff
   \   00004C   78..         MOV       R0,#?V2
   \   00004E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000051   78..         MOV       R0,#?V0
   \   000053   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000056   8E..         MOV       ?V2,R6
   \   000058   8F..         MOV       ?V3,R7
   \   00005A   78..         MOV       R0,#?V2
   \   00005C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00005F   E5..         MOV       A,?V1
   \   000061   F5..         MOV       ?V0,A
   \   000063   78..         MOV       R0,#?V0
   \   000065   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000068   12....       LCALL     ?Subroutine130 & 0xFFFF
   \                     ??CrossCallReturnLabel_200:
   \   00006B   12....       LCALL     ?Subroutine190 & 0xFFFF
   \                     ??CrossCallReturnLabel_309:
   \   00006E   F9           MOV       R1,A
   \   00006F   7A05         MOV       R2,#0x5
   \   000071   7B80         MOV       R3,#-0x80
   \   000073   12....       LCALL     `??ZDP_EPRsp::?relay`; Banked call to: ZDP_EPRsp
   \   000076   7407         MOV       A,#0x7
   \   000078   02....       LJMP      ?Subroutine5 & 0xFFFF
    744          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine218_0:
   \   000000   F583         MOV       DPH,A
   \   000002   E0           MOVX      A,@DPTR
   \   000003   F5..         MOV       ?V2,A
   \   000005   78..         MOV       R0,#?V2
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine59:
   \   000000   12....       LCALL     ?Subroutine164 & 0xFFFF
   \                     ??CrossCallReturnLabel_275:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine130:
   \   000000   E5..         MOV       A,?V4
   \   000002   2402         ADD       A,#0x2
   \   000004   FC           MOV       R4,A
   \   000005   E4           CLR       A
   \   000006   35..         ADDC      A,?V5
   \   000008   FD           MOV       R5,A
   \   000009   E5..         MOV       A,?V4
   \   00000B   240F         ADD       A,#0xf
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine230_0:
   \   000000   EA           MOV       A,R2
   \   000001   12....       LCALL     ??Subroutine212_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_437:
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine190:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003   35..         ADDC      A,?V5
   \   000005   F583         MOV       DPH,A
   \   000007   E0           MOVX      A,@DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine133:
   \   000000   E5..         MOV       A,?V4
   \   000002                REQUIRE ??Subroutine258_0
   \   000002                ; // Fall through to label ??Subroutine258_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine258_0:
   \   000000   240E         ADD       A,#0xe
   \   000002   F582         MOV       DPL,A
   \   000004   E4           CLR       A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine274_0
   \   000003                ; // Fall through to label ??Subroutine274_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine274_0:
   \   000000   7F06         MOV       R7,#0x6
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    745          
    746          /*********************************************************************
    747           * @fn          ZDO_ConvertOTAClusters
    748           *
    749           * @brief       This function will convert the over-the-air cluster list
    750           *              format to an internal format.
    751           *
    752           * @param       inMsg  - incoming message (request)
    753           *
    754           * @return      pointer to incremented inBuf
    755           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    756          uint8 *ZDO_ConvertOTAClusters( uint8 cnt, uint8 *inBuf, uint16 *outList )
   \                     ZDO_ConvertOTAClusters:
    757          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FF           MOV       R7,A
    758            uint8 x;
    759          
    760            for ( x = 0; x < cnt; x++ )
   \   000007   7E00         MOV       R6,#0x0
   \   000009   802F         SJMP      ??ZDO_ConvertOTAClusters_0
    761            {
    762              // convert ota format to internal
    763              outList[x] = BUILD_UINT16( inBuf[0], inBuf[1] );
   \                     ??ZDO_ConvertOTAClusters_1:
   \   00000B   8A82         MOV       DPL,R2
   \   00000D   8B83         MOV       DPH,R3
   \   00000F   E0           MOVX      A,@DPTR
   \   000010   F5..         MOV       ?V0,A
   \   000012   A3           INC       DPTR
   \   000013   E0           MOVX      A,@DPTR
   \   000014   F8           MOV       R0,A
   \   000015   E4           CLR       A
   \   000016   C8           XCH       A,R0
   \   000017   F9           MOV       R1,A
   \   000018   E5..         MOV       A,?V0
   \   00001A   28           ADD       A,R0
   \   00001B   E4           CLR       A
   \   00001C   39           ADDC      A,R1
   \   00001D   F5..         MOV       ?V1,A
   \   00001F   EE           MOV       A,R6
   \   000020   12....       LCALL     ?Subroutine116 & 0xFFFF
   \                     ??CrossCallReturnLabel_182:
   \   000023   EC           MOV       A,R4
   \   000024   28           ADD       A,R0
   \   000025   F582         MOV       DPL,A
   \   000027   ED           MOV       A,R5
   \   000028   39           ADDC      A,R1
   \   000029   F583         MOV       DPH,A
   \   00002B   E5..         MOV       A,?V0
   \   00002D   F0           MOVX      @DPTR,A
   \   00002E   A3           INC       DPTR
   \   00002F   E5..         MOV       A,?V1
   \   000031   F0           MOVX      @DPTR,A
    764              inBuf += sizeof( uint16 );
   \   000032   EA           MOV       A,R2
   \   000033   2402         ADD       A,#0x2
   \   000035   FA           MOV       R2,A
   \   000036   5001         JNC       ??ZDO_ConvertOTAClusters_2
   \   000038   0B           INC       R3
    765            }
   \                     ??ZDO_ConvertOTAClusters_2:
   \   000039   0E           INC       R6
   \                     ??ZDO_ConvertOTAClusters_0:
   \   00003A   EE           MOV       A,R6
   \   00003B   C3           CLR       C
   \   00003C   9F           SUBB      A,R7
   \   00003D   40CC         JC        ??ZDO_ConvertOTAClusters_1
    766            return ( inBuf );
   \   00003F   02....       LJMP      ??Subroutine214_0 & 0xFFFF
    767          }
    768          
    769          /*********************************************************************
    770           * @fn          ZDO_ProcessMatchDescReq
    771           *
    772           * @brief       This function processes and responds to the
    773           *              Match_Desc_req message.
    774           *
    775           * @param       inMsg  - incoming message (request)
    776           *
    777           * @return      none
    778           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    779          void ZDO_ProcessMatchDescReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMatchDescReq:
    780          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 11
   \   000005   74F5         MOV       A,#-0xb
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   7405         MOV       A,#0x5
   \   00000C   12....       LCALL     ?XSTACK_DISP0_8
   \   00000F   12....       LCALL     ??Subroutine224_0 & 0xFFFF
    781            uint8 epCnt = 0;
   \                     ??CrossCallReturnLabel_385:
   \   000012   7404         MOV       A,#0x4
   \   000014   12....       LCALL     ?XSTACK_DISP0_8
   \   000017   E4           CLR       A
   \   000018   F0           MOVX      @DPTR,A
    782            uint8 numInClusters;
    783            uint16 *inClusters = NULL;
   \   000019   7409         MOV       A,#0x9
   \   00001B   12....       LCALL     ?XSTACK_DISP0_8
   \   00001E   E4           CLR       A
   \   00001F   F0           MOVX      @DPTR,A
   \   000020   A3           INC       DPTR
   \   000021   F0           MOVX      @DPTR,A
    784            uint8 numOutClusters;
    785            uint16 *outClusters = NULL;
   \   000022   7407         MOV       A,#0x7
   \   000024   12....       LCALL     ?XSTACK_DISP0_8
   \   000027   E4           CLR       A
   \   000028   F0           MOVX      @DPTR,A
   \   000029   A3           INC       DPTR
   \   00002A   F0           MOVX      @DPTR,A
    786            epList_t *epDesc;
    787            SimpleDescriptionFormat_t *sDesc = NULL;
    788            uint8 allocated;
    789            uint8 *msg;
    790            uint16 aoi;
    791            uint16 profileID;
    792          
    793            // Parse the incoming message
    794            msg = inMsg->asdu;
   \   00002B   7405         MOV       A,#0x5
   \   00002D   12....       LCALL     ?XSTACK_DISP0_8
   \   000030   12....       LCALL     ?Subroutine78 & 0xFFFF
   \                     ??CrossCallReturnLabel_128:
   \   000033   F5..         MOV       ?V2,A
   \   000035   A3           INC       DPTR
   \   000036   E0           MOVX      A,@DPTR
   \   000037   F5..         MOV       ?V3,A
    795            aoi = BUILD_UINT16( msg[0], msg[1] );
   \   000039   85..82       MOV       DPL,?V2
   \   00003C   F583         MOV       DPH,A
   \   00003E   12....       LCALL     ?Subroutine109 & 0xFFFF
   \                     ??CrossCallReturnLabel_344:
   \   000041   28           ADD       A,R0
   \   000042   F5..         MOV       ?V0,A
   \   000044   E4           CLR       A
   \   000045   39           ADDC      A,R1
   \   000046   F5..         MOV       ?V1,A
    796            profileID = BUILD_UINT16( msg[2], msg[3] );
   \   000048   85..82       MOV       DPL,?V2
   \   00004B   85..83       MOV       DPH,?V3
   \   00004E   A3           INC       DPTR
   \   00004F   A3           INC       DPTR
   \   000050   E0           MOVX      A,@DPTR
   \   000051   FA           MOV       R2,A
   \   000052   85..82       MOV       DPL,?V2
   \   000055   85..83       MOV       DPH,?V3
   \   000058   A3           INC       DPTR
   \   000059   A3           INC       DPTR
   \   00005A   A3           INC       DPTR
   \   00005B   E0           MOVX      A,@DPTR
   \   00005C   F9           MOV       R1,A
   \   00005D   EA           MOV       A,R2
   \   00005E   FE           MOV       R6,A
   \   00005F   E4           CLR       A
   \   000060   39           ADDC      A,R1
   \   000061   FF           MOV       R7,A
    797            msg += 4;
    798          
    799            if ( ADDR_BCAST_NOT_ME == NLME_IsAddressBroadcast(aoi) )
   \   000062                ; Setup parameters for call to function NLME_IsAddressBroadcast
   \   000062   AA..         MOV       R2,?V0
   \   000064   AB..         MOV       R3,?V1
   \   000066   12....       LCALL     `??NLME_IsAddressBroadcast::?relay`; Banked call to: NLME_IsAddressBroadcast
   \   000069   E9           MOV       A,R1
   \   00006A   6401         XRL       A,#0x1
   \   00006C   6018         JZ        ??ZDO_ProcessMatchDescReq_0
    800            {
    801              ZDP_MatchDescRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZDP_INVALID_REQTYPE,
    802                                    ZDAppNwkAddr.addr.shortAddr, 0, NULL, inMsg->SecurityUse );
    803              return;
    804            }
    805            else if ( (ADDR_NOT_BCAST == NLME_IsAddressBroadcast(aoi)) && (aoi != ZDAppNwkAddr.addr.shortAddr) )
   \   00006E                ; Setup parameters for call to function NLME_IsAddressBroadcast
   \   00006E   AA..         MOV       R2,?V0
   \   000070   AB..         MOV       R3,?V1
   \   000072   12....       LCALL     `??NLME_IsAddressBroadcast::?relay`; Banked call to: NLME_IsAddressBroadcast
   \   000075   E9           MOV       A,R1
   \   000076   704F         JNZ       ??ZDO_ProcessMatchDescReq_1
   \   000078   90....       MOV       DPTR,#ZDAppNwkAddr
   \   00007B   E0           MOVX      A,@DPTR
   \   00007C   65..         XRL       A,?V0
   \   00007E   7004         JNZ       ??ZDO_ProcessMatchDescReq_2
   \   000080   A3           INC       DPTR
   \   000081   E0           MOVX      A,@DPTR
   \   000082   65..         XRL       A,?V1
   \                     ??ZDO_ProcessMatchDescReq_2:
   \   000084   6041         JZ        ??ZDO_ProcessMatchDescReq_1
    806            {
    807              ZDP_MatchDescRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZDP_INVALID_REQTYPE,
    808                                       ZDAppNwkAddr.addr.shortAddr, 0, NULL, inMsg->SecurityUse );
   \                     ??ZDO_ProcessMatchDescReq_0:
   \   000086                ; Setup parameters for call to function ZDP_EPRsp
   \   000086   7405         MOV       A,#0x5
   \   000088   12....       LCALL     ?XSTACK_DISP0_8
   \   00008B   12....       LCALL     ?Subroutine64 & 0xFFFF
   \                     ??CrossCallReturnLabel_102:
   \   00008E   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000091   E4           CLR       A
   \   000092   F5..         MOV       ?V0,A
   \   000094   F5..         MOV       ?V1,A
   \   000096   78..         MOV       R0,#?V0
   \   000098   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00009B   78..         MOV       R0,#?V0
   \   00009D   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000A0   90....       MOV       DPTR,#ZDAppNwkAddr
   \   0000A3   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   0000A6   75..80       MOV       ?V0,#-0x80
   \   0000A9   78..         MOV       R0,#?V0
   \   0000AB   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000AE   740C         MOV       A,#0xc
   \   0000B0   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B3   12....       LCALL     ?Subroutine96 & 0xFFFF
   \                     ??CrossCallReturnLabel_158:
   \   0000B6   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B9   12....       LCALL     ?Subroutine60 & 0xFFFF
   \                     ??CrossCallReturnLabel_94:
   \   0000BC   12....       LCALL     `??ZDP_EPRsp::?relay`; Banked call to: ZDP_EPRsp
   \   0000BF   7407         MOV       A,#0x7
   \   0000C1   12....       LCALL     ?DEALLOC_XSTACK8
    809              return;
   \   0000C4   02....       LJMP      ??ZDO_ProcessMatchDescReq_3 & 0xFFFF
    810            }
    811          
    812            if ((numInClusters = *msg++) &&
    813                (inClusters = (uint16*)osal_mem_alloc( numInClusters * sizeof( uint16 ) )))
   \                     ??ZDO_ProcessMatchDescReq_1:
   \   0000C7   85..82       MOV       DPL,?V2
   \   0000CA   85..83       MOV       DPH,?V3
   \   0000CD   A3           INC       DPTR
   \   0000CE   A3           INC       DPTR
   \   0000CF   A3           INC       DPTR
   \   0000D0   A3           INC       DPTR
   \   0000D1   E0           MOVX      A,@DPTR
   \   0000D2   F5..         MOV       ?V7,A
   \   0000D4   E5..         MOV       A,?V2
   \   0000D6   2405         ADD       A,#0x5
   \   0000D8   F5..         MOV       ?V2,A
   \   0000DA   5002         JNC       ??ZDO_ProcessMatchDescReq_4
   \   0000DC   05..         INC       ?V3
   \                     ??ZDO_ProcessMatchDescReq_4:
   \   0000DE   E5..         MOV       A,?V7
   \   0000E0   602B         JZ        ??ZDO_ProcessMatchDescReq_5
   \   0000E2                ; Setup parameters for call to function osal_mem_alloc
   \   0000E2   12....       LCALL     ??Subroutine270_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_669:
   \   0000E5   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   0000E8   7409         MOV       A,#0x9
   \   0000EA   12....       LCALL     ?XSTACK_DISP0_8
   \   0000ED   12....       LCALL     ??Subroutine224_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_386:
   \   0000F0   7409         MOV       A,#0x9
   \   0000F2   12....       LCALL     ?XSTACK_DISP0_8
   \   0000F5   12....       LCALL     ??Subroutine239_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_483:
   \   0000F8   6013         JZ        ??ZDO_ProcessMatchDescReq_5
    814            {
    815              msg = ZDO_ConvertOTAClusters( numInClusters, msg, inClusters );
   \   0000FA                ; Setup parameters for call to function ZDO_ConvertOTAClusters
   \   0000FA   7409         MOV       A,#0x9
   \   0000FC   12....       LCALL     ?XSTACK_DISP0_8
   \   0000FF   12....       LCALL     ?Subroutine103 & 0xFFFF
    816            }
   \                     ??CrossCallReturnLabel_168:
   \   000102   A9..         MOV       R1,?V7
   \   000104   12....       LCALL     `??ZDO_ConvertOTAClusters::?relay`; Banked call to: ZDO_ConvertOTAClusters
   \   000107   8A..         MOV       ?V2,R2
   \   000109   8B..         MOV       ?V3,R3
   \   00010B   8003         SJMP      ??ZDO_ProcessMatchDescReq_6
    817            else
    818            {
    819              numInClusters = 0;
   \                     ??ZDO_ProcessMatchDescReq_5:
   \   00010D   75..00       MOV       ?V7,#0x0
    820            }
    821          
    822            if ((numOutClusters = *msg++) &&
    823                (outClusters = (uint16 *)osal_mem_alloc( numOutClusters * sizeof( uint16 ) )))
   \                     ??ZDO_ProcessMatchDescReq_6:
   \   000110   85..82       MOV       DPL,?V2
   \   000113   85..83       MOV       DPH,?V3
   \   000116   E0           MOVX      A,@DPTR
   \   000117   F5..         MOV       ?V6,A
   \   000119   A3           INC       DPTR
   \   00011A   8582..       MOV       ?V2,DPL
   \   00011D   8583..       MOV       ?V3,DPH
   \   000120   6027         JZ        ??ZDO_ProcessMatchDescReq_7
   \   000122                ; Setup parameters for call to function osal_mem_alloc
   \   000122   12....       LCALL     ??Subroutine270_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_670:
   \   000125   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000128   7407         MOV       A,#0x7
   \   00012A   12....       LCALL     ?XSTACK_DISP0_8
   \   00012D   12....       LCALL     ??Subroutine224_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_387:
   \   000130   7407         MOV       A,#0x7
   \   000132   12....       LCALL     ?XSTACK_DISP0_8
   \   000135   12....       LCALL     ??Subroutine239_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_484:
   \   000138   600F         JZ        ??ZDO_ProcessMatchDescReq_7
    824            {
    825              msg = ZDO_ConvertOTAClusters( numOutClusters, msg, outClusters );
   \   00013A                ; Setup parameters for call to function ZDO_ConvertOTAClusters
   \   00013A   7407         MOV       A,#0x7
   \   00013C   12....       LCALL     ?XSTACK_DISP0_8
   \   00013F   12....       LCALL     ?Subroutine103 & 0xFFFF
    826            }
   \                     ??CrossCallReturnLabel_169:
   \   000142   A9..         MOV       R1,?V6
   \   000144   12....       LCALL     `??ZDO_ConvertOTAClusters::?relay`; Banked call to: ZDO_ConvertOTAClusters
   \   000147   8003         SJMP      ??ZDO_ProcessMatchDescReq_8
    827            else
    828            {
    829              numOutClusters = 0;
   \                     ??ZDO_ProcessMatchDescReq_7:
   \   000149   75..00       MOV       ?V6,#0x0
    830            }
    831          
    832            // First count the number of endpoints that match.
    833            epDesc = epList;
   \                     ??ZDO_ProcessMatchDescReq_8:
   \   00014C   90....       MOV       DPTR,#epList
   \   00014F   8064         SJMP      ??CrossCallReturnLabel_134
    834            while ( epDesc )
    835            {
    836              // Don't search endpoint 0 and check if response is allowed
    837              if ( epDesc->epDesc->endPoint != ZDO_EP && (epDesc->flags&eEP_AllowMatch) )
    838              {
    839                if ( epDesc->pfnDescCB )
    840                {
    841                  sDesc = (SimpleDescriptionFormat_t *)epDesc->pfnDescCB( AF_DESCRIPTOR_SIMPLE, epDesc->epDesc->endPoint );
    842                  allocated = TRUE;
    843                }
    844                else
    845                {
    846                  sDesc = epDesc->epDesc->simpleDesc;
    847                  allocated = FALSE;
    848                }
    849          
    850                if ( sDesc && sDesc->AppProfId == profileID )
    851                {
    852                  uint8 *uint8Buf = (uint8 *)ZDOBuildBuf;
    853          
    854                  // Are there matching input clusters?
    855                  if ((ZDO_AnyClusterMatches( numInClusters, inClusters,
    856                             sDesc->AppNumInClusters, sDesc->pAppInClusterList )) ||
    857                      // Are there matching output clusters?
    858                      (ZDO_AnyClusterMatches( numOutClusters, outClusters,
    859                             sDesc->AppNumOutClusters, sDesc->pAppOutClusterList )))
    860                  {
    861                    // Notify the endpoint of the match.
    862                    uint8 bufLen = sizeof( ZDO_MatchDescRspSent_t ) + (numOutClusters + numInClusters) * sizeof(uint16);
    863                    ZDO_MatchDescRspSent_t *pRspSent = (ZDO_MatchDescRspSent_t *) osal_msg_allocate( bufLen );
    864          
    865                    if (pRspSent)
    866                    {
    867                      pRspSent->hdr.event = ZDO_MATCH_DESC_RSP_SENT;
    868                      pRspSent->nwkAddr = inMsg->srcAddr.addr.shortAddr;
    869                      pRspSent->numInClusters = numInClusters;
    870                      pRspSent->numOutClusters = numOutClusters;
    871          
    872                      if (numInClusters)
    873                      {
    874                        pRspSent->pInClusters = (uint16*) (pRspSent + 1);
    875                        osal_memcpy(pRspSent->pInClusters, inClusters, numInClusters * sizeof(uint16));
    876                      }
    877                      else
    878                      {
    879                        pRspSent->pInClusters = NULL;
    880                      }
    881          
    882                      if (numOutClusters)
    883                      {
    884                        pRspSent->pOutClusters = (uint16*)(pRspSent + 1) + numInClusters;
    885                        osal_memcpy(pRspSent->pOutClusters, outClusters, numOutClusters * sizeof(uint16));
    886                      }
    887                      else
    888                      {
    889                        pRspSent->pOutClusters = NULL;
   \                     ??ZDO_ProcessMatchDescReq_9:
   \   000151   85..82       MOV       DPL,?V4
   \   000154   85..83       MOV       DPH,?V5
   \   000157   A3           INC       DPTR
   \   000158   A3           INC       DPTR
   \   000159   A3           INC       DPTR
   \   00015A   A3           INC       DPTR
   \   00015B   A3           INC       DPTR
   \   00015C   A3           INC       DPTR
   \   00015D   A3           INC       DPTR
   \   00015E   A3           INC       DPTR
   \   00015F   E4           CLR       A
   \   000160   F0           MOVX      @DPTR,A
   \   000161   A3           INC       DPTR
   \   000162   F0           MOVX      @DPTR,A
    890                      }
    891          
    892                      osal_msg_send( *epDesc->epDesc->task_id, (uint8 *)pRspSent );
   \                     ??ZDO_ProcessMatchDescReq_10:
   \   000163                ; Setup parameters for call to function osal_msg_send
   \   000163   AA..         MOV       R2,?V4
   \   000165   AB..         MOV       R3,?V5
   \   000167   85..82       MOV       DPL,?XSP + 0
   \   00016A   85..83       MOV       DPH,?XSP + 1
   \   00016D   12....       LCALL     ?Subroutine71 & 0xFFFF
   \                     ??CrossCallReturnLabel_114:
   \   000170   12....       LCALL     ??Subroutine226_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_401:
   \   000173   F9           MOV       R1,A
   \   000174   12....       LCALL     `??osal_msg_send::?relay`; Banked call to: osal_msg_send
    893                    }
    894          
    895                    uint8Buf[epCnt++] = sDesc->EndPoint;
   \                     ??ZDO_ProcessMatchDescReq_11:
   \   000177   7402         MOV       A,#0x2
   \   000179   12....       LCALL     ?XSTACK_DISP0_8
   \   00017C   12....       LCALL     ??Subroutine226_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_402:
   \   00017F   C0E0         PUSH      A
   \   000181   7404         MOV       A,#0x4
   \   000183   12....       LCALL     ?XSTACK_DISP0_8
   \   000186   E0           MOVX      A,@DPTR
   \   000187   F8           MOV       R0,A
   \   000188   74..         MOV       A,#ZDOBuildBuf & 0xff
   \   00018A   28           ADD       A,R0
   \   00018B   F582         MOV       DPL,A
   \   00018D   E4           CLR       A
   \   00018E   34..         ADDC      A,#(ZDOBuildBuf >> 8) & 0xff
   \   000190   F583         MOV       DPH,A
   \   000192   D0E0         POP       A
   \   000194   F0           MOVX      @DPTR,A
   \   000195   7404         MOV       A,#0x4
   \   000197   12....       LCALL     ?XSTACK_DISP0_8
   \   00019A   E0           MOVX      A,@DPTR
   \   00019B   04           INC       A
   \   00019C   F0           MOVX      @DPTR,A
    896                  }
    897                }
    898          
    899                if ( allocated )
   \                     ??ZDO_ProcessMatchDescReq_12:
   \   00019D   A2..         MOV       C,?VB.0
   \   00019F   500B         JNC       ??ZDO_ProcessMatchDescReq_13
    900                {
    901                  osal_mem_free( sDesc );
   \   0001A1                ; Setup parameters for call to function osal_mem_free
   \   0001A1   7402         MOV       A,#0x2
   \   0001A3   12....       LCALL     ?XSTACK_DISP0_8
   \   0001A6   12....       LCALL     ??Subroutine236_0 & 0xFFFF
    902                }
   \                     ??CrossCallReturnLabel_451:
   \   0001A9   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    903              }
    904              epDesc = epDesc->nextDesc;
   \                     ??ZDO_ProcessMatchDescReq_13:
   \   0001AC   85..82       MOV       DPL,?XSP + 0
   \   0001AF   85..83       MOV       DPH,?XSP + 1
   \   0001B2   12....       LCALL     ?Subroutine83 & 0xFFFF
   \                     ??CrossCallReturnLabel_134:
   \   0001B5   12....       LCALL     ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   0001B8   F9           MOV       R1,A
   \   0001B9   E8           MOV       A,R0
   \   0001BA   49           ORL       A,R1
   \   0001BB   7003         JNZ       $+5
   \   0001BD   02....       LJMP      ??ZDO_ProcessMatchDescReq_14 & 0xFFFF
   \   0001C0   85..82       MOV       DPL,?XSP + 0
   \   0001C3   85..83       MOV       DPH,?XSP + 1
   \   0001C6   12....       LCALL     ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_130:
   \   0001C9   60E1         JZ        ??ZDO_ProcessMatchDescReq_13
   \   0001CB   12....       LCALL     ?Subroutine100 & 0xFFFF
   \                     ??CrossCallReturnLabel_166:
   \   0001CE   E0           MOVX      A,@DPTR
   \   0001CF   A2E0         MOV       C,0xE0 /* A   */.0
   \   0001D1   50D9         JNC       ??ZDO_ProcessMatchDescReq_13
   \   0001D3   12....       LCALL     ?Subroutine101 & 0xFFFF
   \                     ??CrossCallReturnLabel_349:
   \   0001D6   A3           INC       DPTR
   \   0001D7   A3           INC       DPTR
   \   0001D8   12....       LCALL     ??Subroutine239_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_485:
   \   0001DB   85..82       MOV       DPL,?XSP + 0
   \   0001DE   85..83       MOV       DPH,?XSP + 1
   \   0001E1   601E         JZ        ??ZDO_ProcessMatchDescReq_15
   \   0001E3                ; Setup parameters for indirect call
   \   0001E3   E0           MOVX      A,@DPTR
   \   0001E4   F8           MOV       R0,A
   \   0001E5   12....       LCALL     ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_131:
   \   0001E8   FA           MOV       R2,A
   \   0001E9   7901         MOV       R1,#0x1
   \   0001EB   12....       LCALL     ?Subroutine100 & 0xFFFF
   \                     ??CrossCallReturnLabel_167:
   \   0001EE   A3           INC       DPTR
   \   0001EF   12....       LCALL     ?Subroutine200 & 0xFFFF
   \                     ??CrossCallReturnLabel_409:
   \   0001F2   12....       LCALL     ?CALL_IND
   \   0001F5   7402         MOV       A,#0x2
   \   0001F7   12....       LCALL     ?XSTACK_DISP0_8
   \   0001FA   12....       LCALL     ??Subroutine224_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_388:
   \   0001FD   D2..         SETB      ?VB.0
   \   0001FF   8010         SJMP      ??ZDO_ProcessMatchDescReq_16
   \                     ??ZDO_ProcessMatchDescReq_15:
   \   000201   12....       LCALL     ?Subroutine71 & 0xFFFF
   \                     ??CrossCallReturnLabel_115:
   \   000204   12....       LCALL     ??Subroutine249_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_545:
   \   000207   7402         MOV       A,#0x2
   \   000209   12....       LCALL     ?XSTACK_DISP0_8
   \   00020C   12....       LCALL     ??Subroutine222_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_373:
   \   00020F   C2..         CLR       ?VB.0
   \                     ??ZDO_ProcessMatchDescReq_16:
   \   000211   7402         MOV       A,#0x2
   \   000213   12....       LCALL     ?XSTACK_DISP0_8
   \   000216   12....       LCALL     ??Subroutine239_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_486:
   \   000219   6082         JZ        ??ZDO_ProcessMatchDescReq_12
   \   00021B   7402         MOV       A,#0x2
   \   00021D   12....       LCALL     ?XSTACK_DISP0_8
   \   000220   12....       LCALL     ??Subroutine216_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_347:
   \   000223   E0           MOVX      A,@DPTR
   \   000224   6E           XRL       A,R6
   \   000225   7003         JNZ       ??ZDO_ProcessMatchDescReq_17
   \   000227   A3           INC       DPTR
   \   000228   E0           MOVX      A,@DPTR
   \   000229   6F           XRL       A,R7
   \                     ??ZDO_ProcessMatchDescReq_17:
   \   00022A   6003         JZ        $+5
   \   00022C   02....       LJMP      ??ZDO_ProcessMatchDescReq_12 & 0xFFFF
   \   00022F                ; Setup parameters for call to function ZDO_AnyClusterMatches
   \   00022F   7402         MOV       A,#0x2
   \   000231   12....       LCALL     ?XSTACK_DISP0_8
   \   000234   A3           INC       DPTR
   \   000235   E0           MOVX      A,@DPTR
   \   000236   C8           XCH       A,R0
   \   000237   12....       LCALL     ?Subroutine140 & 0xFFFF
   \                     ??CrossCallReturnLabel_230:
   \   00023A   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   00023D   7404         MOV       A,#0x4
   \   00023F   12....       LCALL     ?XSTACK_DISP0_8
   \   000242   12....       LCALL     ??Subroutine257_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_570:
   \   000245   2406         ADD       A,#0x6
   \   000247   12....       LCALL     ?Subroutine134 & 0xFFFF
   \                     ??CrossCallReturnLabel_206:
   \   00024A   FC           MOV       R4,A
   \   00024B   740B         MOV       A,#0xb
   \   00024D   12....       LCALL     ?XSTACK_DISP0_8
   \   000250   12....       LCALL     ??Subroutine236_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_452:
   \   000253   A9..         MOV       R1,?V7
   \   000255   12....       LCALL     `??ZDO_AnyClusterMatches::?relay`; Banked call to: ZDO_AnyClusterMatches
   \   000258   7402         MOV       A,#0x2
   \   00025A   12....       LCALL     ?DEALLOC_XSTACK8
   \   00025D   E9           MOV       A,R1
   \   00025E   7035         JNZ       ??ZDO_ProcessMatchDescReq_18
   \   000260                ; Setup parameters for call to function ZDO_AnyClusterMatches
   \   000260   7402         MOV       A,#0x2
   \   000262   12....       LCALL     ?XSTACK_DISP0_8
   \   000265   12....       LCALL     ??Subroutine257_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_571:
   \   000268   240A         ADD       A,#0xa
   \   00026A   F582         MOV       DPL,A
   \   00026C   E4           CLR       A
   \   00026D   38           ADDC      A,R0
   \   00026E   F583         MOV       DPH,A
   \   000270   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000273   7404         MOV       A,#0x4
   \   000275   12....       LCALL     ?XSTACK_DISP0_8
   \   000278   12....       LCALL     ?Subroutine84 & 0xFFFF
   \                     ??CrossCallReturnLabel_136:
   \   00027B   E0           MOVX      A,@DPTR
   \   00027C   FC           MOV       R4,A
   \   00027D   7409         MOV       A,#0x9
   \   00027F   12....       LCALL     ?XSTACK_DISP0_8
   \   000282   12....       LCALL     ??Subroutine236_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_453:
   \   000285   A9..         MOV       R1,?V6
   \   000287   12....       LCALL     `??ZDO_AnyClusterMatches::?relay`; Banked call to: ZDO_AnyClusterMatches
   \   00028A   7402         MOV       A,#0x2
   \   00028C   12....       LCALL     ?DEALLOC_XSTACK8
   \   00028F   E9           MOV       A,R1
   \   000290   7003         JNZ       $+5
   \   000292   02....       LJMP      ??ZDO_ProcessMatchDescReq_12 & 0xFFFF
   \                     ??ZDO_ProcessMatchDescReq_18:
   \   000295                ; Setup parameters for call to function osal_msg_allocate
   \   000295   E5..         MOV       A,?V6
   \   000297   25..         ADD       A,?V7
   \   000299   C3           CLR       C
   \   00029A   33           RLC       A
   \   00029B   240A         ADD       A,#0xa
   \   00029D   FA           MOV       R2,A
   \   00029E   7B00         MOV       R3,#0x0
   \   0002A0   12....       LCALL     `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   0002A3   8A..         MOV       ?V4,R2
   \   0002A5   8B..         MOV       ?V5,R3
   \   0002A7   EA           MOV       A,R2
   \   0002A8   45..         ORL       A,?V5
   \   0002AA   7003         JNZ       $+5
   \   0002AC   02....       LJMP      ??ZDO_ProcessMatchDescReq_11 & 0xFFFF
   \   0002AF   8A82         MOV       DPL,R2
   \   0002B1   8B83         MOV       DPH,R3
   \   0002B3   74D2         MOV       A,#-0x2e
   \   0002B5   F0           MOVX      @DPTR,A
   \   0002B6   7405         MOV       A,#0x5
   \   0002B8   12....       LCALL     ?XSTACK_DISP0_8
   \   0002BB   12....       LCALL     ?Subroutine75 & 0xFFFF
   \                     ??CrossCallReturnLabel_122:
   \   0002BE   8A82         MOV       DPL,R2
   \   0002C0   8B83         MOV       DPH,R3
   \   0002C2   A3           INC       DPTR
   \   0002C3   A3           INC       DPTR
   \   0002C4   12....       LCALL     ??Subroutine222_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_374:
   \   0002C7   8A82         MOV       DPL,R2
   \   0002C9   8B83         MOV       DPH,R3
   \   0002CB   A3           INC       DPTR
   \   0002CC   A3           INC       DPTR
   \   0002CD   A3           INC       DPTR
   \   0002CE   A3           INC       DPTR
   \   0002CF   E5..         MOV       A,?V7
   \   0002D1   12....       LCALL     ??Subroutine267_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_651:
   \   0002D4   A3           INC       DPTR
   \   0002D5   A3           INC       DPTR
   \   0002D6   A3           INC       DPTR
   \   0002D7   A3           INC       DPTR
   \   0002D8   E5..         MOV       A,?V6
   \   0002DA   F0           MOVX      @DPTR,A
   \   0002DB   E5..         MOV       A,?V7
   \   0002DD   602E         JZ        ??ZDO_ProcessMatchDescReq_19
   \   0002DF   EA           MOV       A,R2
   \   0002E0   240A         ADD       A,#0xa
   \   0002E2   FA           MOV       R2,A
   \   0002E3   E4           CLR       A
   \   0002E4   35..         ADDC      A,?V5
   \   0002E6   FB           MOV       R3,A
   \   0002E7   85..82       MOV       DPL,?V4
   \   0002EA   85..83       MOV       DPH,?V5
   \   0002ED   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_397:
   \   0002F0                ; Setup parameters for call to function osal_memcpy
   \   0002F0   7409         MOV       A,#0x9
   \   0002F2   12....       LCALL     ?XSTACK_DISP0_8
   \   0002F5   12....       LCALL     ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_87:
   \   0002F8   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0002FB   AC..         MOV       R4,?V7
   \   0002FD   EC           MOV       A,R4
   \   0002FE   2C           ADD       A,R4
   \   0002FF   FC           MOV       R4,A
   \   000300   E4           CLR       A
   \   000301   33           RLC       A
   \   000302   FD           MOV       R5,A
   \   000303   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000306   7403         MOV       A,#0x3
   \   000308   12....       LCALL     ?DEALLOC_XSTACK8
   \   00030B   800D         SJMP      ??ZDO_ProcessMatchDescReq_20
   \                     ??ZDO_ProcessMatchDescReq_19:
   \   00030D   8A82         MOV       DPL,R2
   \   00030F   8B83         MOV       DPH,R3
   \   000311   A3           INC       DPTR
   \   000312   A3           INC       DPTR
   \   000313   A3           INC       DPTR
   \   000314   A3           INC       DPTR
   \   000315   A3           INC       DPTR
   \   000316   E4           CLR       A
   \   000317   F0           MOVX      @DPTR,A
   \   000318   A3           INC       DPTR
   \   000319   F0           MOVX      @DPTR,A
   \                     ??ZDO_ProcessMatchDescReq_20:
   \   00031A   E5..         MOV       A,?V6
   \   00031C   7003         JNZ       $+5
   \   00031E   02....       LJMP      ??ZDO_ProcessMatchDescReq_9 & 0xFFFF
   \   000321   A8..         MOV       R0,?V7
   \   000323   E8           MOV       A,R0
   \   000324   28           ADD       A,R0
   \   000325   F8           MOV       R0,A
   \   000326   E4           CLR       A
   \   000327   33           RLC       A
   \   000328   F9           MOV       R1,A
   \   000329   E5..         MOV       A,?V4
   \   00032B   28           ADD       A,R0
   \   00032C   F8           MOV       R0,A
   \   00032D   E5..         MOV       A,?V5
   \   00032F   39           ADDC      A,R1
   \   000330   F9           MOV       R1,A
   \   000331   E8           MOV       A,R0
   \   000332   240A         ADD       A,#0xa
   \   000334   FA           MOV       R2,A
   \   000335   E4           CLR       A
   \   000336   39           ADDC      A,R1
   \   000337   FB           MOV       R3,A
   \   000338   85..82       MOV       DPL,?V4
   \   00033B   85..83       MOV       DPH,?V5
   \   00033E   A3           INC       DPTR
   \   00033F   A3           INC       DPTR
   \   000340   A3           INC       DPTR
   \   000341   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_398:
   \   000344                ; Setup parameters for call to function osal_memcpy
   \   000344   7407         MOV       A,#0x7
   \   000346   12....       LCALL     ?XSTACK_DISP0_8
   \   000349   12....       LCALL     ?Subroutine57 & 0xFFFF
    905            }
   \                     ??CrossCallReturnLabel_88:
   \   00034C   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00034F   AC..         MOV       R4,?V6
   \   000351   EC           MOV       A,R4
   \   000352   2C           ADD       A,R4
   \   000353   FC           MOV       R4,A
   \   000354   E4           CLR       A
   \   000355   33           RLC       A
   \   000356   FD           MOV       R5,A
   \   000357   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00035A   7403         MOV       A,#0x3
   \   00035C   12....       LCALL     ?DEALLOC_XSTACK8
   \   00035F   02....       LJMP      ??ZDO_ProcessMatchDescReq_10 & 0xFFFF
    906          
    907            // Send the message only if at least one match found.
    908            if ( epCnt )
   \                     ??ZDO_ProcessMatchDescReq_14:
   \   000362   7404         MOV       A,#0x4
   \   000364   12....       LCALL     ?XSTACK_DISP0_8
   \   000367   E0           MOVX      A,@DPTR
   \   000368   6045         JZ        ??ZDO_ProcessMatchDescReq_21
    909            {
    910              if ( ZSuccess == ZDP_MatchDescRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZDP_SUCCESS,
    911                        ZDAppNwkAddr.addr.shortAddr, epCnt, (uint8 *)ZDOBuildBuf, inMsg->SecurityUse ) )
   \   00036A                ; Setup parameters for call to function ZDP_EPRsp
   \   00036A   7405         MOV       A,#0x5
   \   00036C   12....       LCALL     ?XSTACK_DISP0_8
   \   00036F   12....       LCALL     ?Subroutine64 & 0xFFFF
    912              {
    913          #if defined( LCD_SUPPORTED )
    914                HalLcdWriteScreen( "Match Desc Req", "Rsp Sent" );
    915          #endif
    916              }
    917            }
   \                     ??CrossCallReturnLabel_103:
   \   000372   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000375   75....       MOV       ?V0,#ZDOBuildBuf & 0xff
   \   000378   75....       MOV       ?V1,#(ZDOBuildBuf >> 8) & 0xff
   \   00037B   78..         MOV       R0,#?V0
   \   00037D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000380   7407         MOV       A,#0x7
   \   000382   12....       LCALL     ?XSTACK_DISP0_8
   \   000385   12....       LCALL     ??Subroutine231_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_438:
   \   000388   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00038B   90....       MOV       DPTR,#ZDAppNwkAddr
   \   00038E   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000391   75..00       MOV       ?V0,#0x0
   \   000394   78..         MOV       R0,#?V0
   \   000396   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000399   740C         MOV       A,#0xc
   \   00039B   12....       LCALL     ?XSTACK_DISP0_8
   \   00039E   12....       LCALL     ?Subroutine96 & 0xFFFF
   \                     ??CrossCallReturnLabel_159:
   \   0003A1   12....       LCALL     ?XSTACK_DISP0_8
   \   0003A4   12....       LCALL     ?Subroutine60 & 0xFFFF
   \                     ??CrossCallReturnLabel_95:
   \   0003A7   12....       LCALL     `??ZDP_EPRsp::?relay`; Banked call to: ZDP_EPRsp
   \   0003AA   7407         MOV       A,#0x7
   \   0003AC   12....       LCALL     ?DEALLOC_XSTACK8
    918            else
    919            {
    920          #if defined( LCD_SUPPORTED )
    921              HalLcdWriteScreen( "Match Desc Req", "Non Matched" );
    922          #endif
    923            }
    924          
    925            if ( inClusters != NULL )
   \                     ??ZDO_ProcessMatchDescReq_21:
   \   0003AF   7409         MOV       A,#0x9
   \   0003B1   12....       LCALL     ?XSTACK_DISP0_8
   \   0003B4   12....       LCALL     ??Subroutine239_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_487:
   \   0003B7   600B         JZ        ??ZDO_ProcessMatchDescReq_22
    926            {
    927              osal_mem_free( inClusters );
   \   0003B9                ; Setup parameters for call to function osal_mem_free
   \   0003B9   7409         MOV       A,#0x9
   \   0003BB   12....       LCALL     ?XSTACK_DISP0_8
   \   0003BE   12....       LCALL     ??Subroutine236_0 & 0xFFFF
    928            }
   \                     ??CrossCallReturnLabel_454:
   \   0003C1   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    929            
    930            if ( outClusters != NULL )
   \                     ??ZDO_ProcessMatchDescReq_22:
   \   0003C4   7407         MOV       A,#0x7
   \   0003C6   12....       LCALL     ?XSTACK_DISP0_8
   \   0003C9   12....       LCALL     ??Subroutine239_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_488:
   \   0003CC   600B         JZ        ??ZDO_ProcessMatchDescReq_3
    931            {
    932              osal_mem_free( outClusters );
   \   0003CE                ; Setup parameters for call to function osal_mem_free
   \   0003CE   7407         MOV       A,#0x7
   \   0003D0   12....       LCALL     ?XSTACK_DISP0_8
   \   0003D3   12....       LCALL     ??Subroutine236_0 & 0xFFFF
    933            }
   \                     ??CrossCallReturnLabel_455:
   \   0003D6   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    934          }
   \                     ??ZDO_ProcessMatchDescReq_3:
   \   0003D9   740B         MOV       A,#0xb
   \   0003DB   02....       LJMP      ?Subroutine7 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine109:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002                REQUIRE ??Subroutine215_0
   \   000002                ; // Fall through to label ??Subroutine215_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine215_0:
   \   000000   A3           INC       DPTR
   \   000001   E0           MOVX      A,@DPTR
   \   000002   F8           MOV       R0,A
   \   000003   E4           CLR       A
   \   000004   C8           XCH       A,R0
   \   000005   F9           MOV       R1,A
   \   000006   EA           MOV       A,R2
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine103:
   \   000000   12....       LCALL     ?Subroutine182 & 0xFFFF
   \                     ??CrossCallReturnLabel_298:
   \   000003   AA..         MOV       R2,?V2
   \   000005   AB..         MOV       R3,?V3
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine101:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine216_0
   \   000006                ; // Fall through to label ??Subroutine216_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine100:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006   12....       LCALL     ?Subroutine167 & 0xFFFF
   \                     ??CrossCallReturnLabel_280:
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine167:
   \   000000   12....       LCALL     ?Subroutine200 & 0xFFFF
   \                     ??CrossCallReturnLabel_410:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine96:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   2402         ADD       A,#0x2
   \   000003   FC           MOV       R4,A
   \   000004   A3           INC       DPTR
   \   000005   E0           MOVX      A,@DPTR
   \   000006   3400         ADDC      A,#0x0
   \   000008   FD           MOV       R5,A
   \   000009   740C         MOV       A,#0xc
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine79:
   \   000000   12....       LCALL     ?Subroutine208 & 0xFFFF
   \                     ??CrossCallReturnLabel_413:
   \   000003   12....       LCALL     ?Subroutine163 & 0xFFFF
   \                     ??CrossCallReturnLabel_407:
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine71:
   \   000000   12....       LCALL     ?Subroutine163 & 0xFFFF
   \                     ??CrossCallReturnLabel_406:
   \   000003   F8           MOV       R0,A
   \   000004   12....       LCALL     ?Subroutine183 & 0xFFFF
   \                     ??CrossCallReturnLabel_352:
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine64:
   \   000000   12....       LCALL     ??Subroutine248_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_591:
   \   000003   240E         ADD       A,#0xe
   \   000005   F582         MOV       DPL,A
   \   000007   E4           CLR       A
   \   000008   38           ADDC      A,R0
   \   000009   F583         MOV       DPH,A
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   F5..         MOV       ?V0,A
   \   00000E   78..         MOV       R0,#?V0
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine60:
   \   000000   12....       LCALL     ?Subroutine168 & 0xFFFF
   \                     ??CrossCallReturnLabel_281:
   \   000003   7A06         MOV       R2,#0x6
   \   000005   7B80         MOV       R3,#-0x80
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine78:
   \   000000   12....       LCALL     ?Subroutine172 & 0xFFFF
   \                     ??CrossCallReturnLabel_288:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine222_0:
   \   000000   E8           MOV       A,R0
   \   000001                REQUIRE ??Subroutine223_0
   \   000001                ; // Fall through to label ??Subroutine223_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine223_0:
   \   000000   12....       LCALL     ??Subroutine268_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_658:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005                REQUIRE ??Subroutine224_0
   \   000005                ; // Fall through to label ??Subroutine224_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003   02....       LJMP      ??Subroutine217_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine168:
   \   000000   12....       LCALL     ?Subroutine201 & 0xFFFF
   \                     ??CrossCallReturnLabel_603:
   \   000003   240F         ADD       A,#0xf
   \   000005   F582         MOV       DPL,A
   \   000007   E4           CLR       A
   \   000008   38           ADDC      A,R0
   \   000009   F583         MOV       DPH,A
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   F9           MOV       R1,A
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine172:
   \   000000   12....       LCALL     ?Subroutine201 & 0xFFFF
   \                     ??CrossCallReturnLabel_606:
   \   000003   12....       LCALL     ?Subroutine206 & 0xFFFF
   \                     ??CrossCallReturnLabel_690:
   \   000006   38           ADDC      A,R0
   \   000007   F583         MOV       DPH,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine231_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V0,A
   \   000003   78..         MOV       R0,#?V0
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine134:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003   38           ADDC      A,R0
   \   000004   F583         MOV       DPH,A
   \   000006   E0           MOVX      A,@DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine248_0:
   \   000000   12....       LCALL     ?Subroutine201 & 0xFFFF
   \                     ??CrossCallReturnLabel_608:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine201:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   C8           XCH       A,R0
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine249_0:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine250_0
   \   000001                ; // Fall through to label ??Subroutine250_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine250_0:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine251_0
   \   000001                ; // Fall through to label ??Subroutine251_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine75:
   \   000000   12....       LCALL     ?Subroutine167 & 0xFFFF
   \                     ??CrossCallReturnLabel_278:
   \   000003   12....       LCALL     ?Subroutine181 & 0xFFFF
   \                     ??CrossCallReturnLabel_553:
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine196:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   85..82       MOV       DPL,?XSP + 0
   \   000004   85..83       MOV       DPH,?XSP + 1
   \   000007   E0           MOVX      A,@DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine158:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8A82         MOV       DPL,R2
   \   000003   8B83         MOV       DPH,R3
   \   000005   A3           INC       DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine257_0:
   \   000000   12....       LCALL     ??Subroutine248_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_602:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine267_0:
   \   000000   12....       LCALL     ?Subroutine158 & 0xFFFF
   \                     ??CrossCallReturnLabel_656:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine268_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   A3           INC       DPTR
   \   000002   E9           MOV       A,R1
   \   000003   F0           MOVX      @DPTR,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine270_0:
   \   000000   25E0         ADD       A,0xE0 /* A   */
   \   000002   FA           MOV       R2,A
   \   000003   E4           CLR       A
   \   000004   33           RLC       A
   \   000005   FB           MOV       R3,A
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine140:
   \   000000   2407         ADD       A,#0x7
   \   000002   F582         MOV       DPL,A
   \   000004   E4           CLR       A
   \   000005   38           ADDC      A,R0
   \   000006   F583         MOV       DPH,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine84:
   \   000000   12....       LCALL     ??Subroutine248_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_592:
   \   000003   2409         ADD       A,#0x9
   \   000005   F582         MOV       DPL,A
   \   000007   E4           CLR       A
   \   000008   38           ADDC      A,R0
   \   000009   F583         MOV       DPH,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine83:
   \   000000   12....       LCALL     ?Subroutine167 & 0xFFFF
   \                     ??CrossCallReturnLabel_279:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine57:
   \   000000   12....       LCALL     ??Subroutine211_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_340:
   \   000003   75..00       MOV       ?V2,#0x0
   \   000006   78..         MOV       R0,#?V0
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   12....       LCALL     ?Subroutine152 & 0xFFFF
   \                     ??CrossCallReturnLabel_256:
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine152:
   \   000000   F9           MOV       R1,A
   \   000001   85..82       MOV       DPL,?XSP + 0
   \   000004   85..83       MOV       DPH,?XSP + 1
   \   000007   E8           MOV       A,R0
   \   000008   F0           MOVX      @DPTR,A
   \   000009   A3           INC       DPTR
   \   00000A   E9           MOV       A,R1
   \   00000B   12....       LCALL     ?Subroutine196 & 0xFFFF
   \                     ??CrossCallReturnLabel_323:
   \   00000E   F8           MOV       R0,A
   \   00000F   A3           INC       DPTR
   \   000010   E0           MOVX      A,@DPTR
   \   000011   22           RET
    935          
    936          
    937          /*********************************************************************
    938           * @fn      ZDO_ProcessBindUnbindReq()
    939           *
    940           * @brief   Called to process a Bind or Unbind Request message.
    941           *
    942           * @param   inMsg  - incoming message (request)
    943           * @param   pReq - place to put parsed information
    944           *
    945           * @return  none
    946           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine210_0
   \   000003                ; // Fall through to label ??Subroutine210_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    947          void ZDO_ProcessBindUnbindReq( zdoIncomingMsg_t *inMsg, ZDO_BindUnbindReq_t *pReq )
   \                     ZDO_ProcessBindUnbindReq:
    948          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV       A,#-0xc
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V0,R2
   \   00000C   8B..         MOV       ?V1,R3
   \   00000E   EC           MOV       A,R4
   \   00000F   FE           MOV       R6,A
   \   000010   ED           MOV       A,R5
   \   000011   FF           MOV       R7,A
    949            zAddrType_t SourceAddr;       // Binding Source addres
    950            byte bindStat;
    951          
    952            SourceAddr.addrMode = Addr64Bit;
   \   000012   740B         MOV       A,#0xb
   \   000014   12....       LCALL     ?XSTACK_DISP0_8
   \   000017   7403         MOV       A,#0x3
   \   000019   F0           MOVX      @DPTR,A
    953            osal_cpyExtAddr( SourceAddr.addr.extAddr, pReq->srcAddress );
   \   00001A                ; Setup parameters for call to function sAddrExtCpy
   \   00001A   12....       LCALL     ?XSTACK_DISP101_8
   \   00001D   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
    954          
    955          
    956            // If the local device is not the primary binding cache
    957            // check the src address of the bind request.
    958            // If it is not the local device's extended address
    959            // discard the request.
    960            if ( !osal_ExtAddrEqual( SourceAddr.addr.extAddr, NLME_GetExtAddr()) ||
    961                  (pReq->dstAddress.addrMode != Addr64Bit &&
    962                   pReq->dstAddress.addrMode != AddrGroup) )
   \   000020                ; Setup parameters for call to function NLME_GetExtAddr
   \   000020   12....       LCALL     `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
   \   000023   8A..         MOV       ?V2,R2
   \   000025   8B..         MOV       ?V3,R3
   \   000027   AC..         MOV       R4,?V2
   \   000029   AD..         MOV       R5,?V3
   \   00002B                ; Setup parameters for call to function sAddrExtCmp
   \   00002B   7403         MOV       A,#0x3
   \   00002D   12....       LCALL     ?XSTACK_DISP101_8
   \   000030   12....       LCALL     `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   000033   E9           MOV       A,R1
   \   000034   600A         JZ        ??ZDO_ProcessBindUnbindReq_0
   \   000036   12....       LCALL     ?Subroutine118 & 0xFFFF
   \                     ??CrossCallReturnLabel_183:
   \   000039   6010         JZ        ??ZDO_ProcessBindUnbindReq_1
   \   00003B   E0           MOVX      A,@DPTR
   \   00003C   6401         XRL       A,#0x1
   \   00003E   600B         JZ        ??ZDO_ProcessBindUnbindReq_1
    963            {
    964              bindStat = ZDP_NOT_SUPPORTED;
   \                     ??ZDO_ProcessBindUnbindReq_0:
   \   000040   85..82       MOV       DPL,?XSP + 0
   \   000043   85..83       MOV       DPH,?XSP + 1
   \   000046   7484         MOV       A,#-0x7c
   \   000048   02....       LJMP      ??ZDO_ProcessBindUnbindReq_2 & 0xFFFF
    965            }
    966            else
    967            {
    968              // Check source & destination endpoints
    969              if ( (pReq->srcEndpoint == 0 || pReq->srcEndpoint > MAX_ENDPOINTS)
    970                  || (( pReq->dstAddress.addrMode == Addr64Bit ) &&
    971                      (pReq->dstEndpoint == 0 || pReq->dstEndpoint > MAX_ENDPOINTS)) )
   \                     ??ZDO_ProcessBindUnbindReq_1:
   \   00004B   8E82         MOV       DPL,R6
   \   00004D   8F83         MOV       DPH,R7
   \   00004F   A3           INC       DPTR
   \   000050   A3           INC       DPTR
   \   000051   A3           INC       DPTR
   \   000052   A3           INC       DPTR
   \   000053   A3           INC       DPTR
   \   000054   A3           INC       DPTR
   \   000055   A3           INC       DPTR
   \   000056   A3           INC       DPTR
   \   000057   E0           MOVX      A,@DPTR
   \   000058   6016         JZ        ??ZDO_ProcessBindUnbindReq_3
   \   00005A   C3           CLR       C
   \   00005B   94F1         SUBB      A,#-0xf
   \   00005D   5011         JNC       ??ZDO_ProcessBindUnbindReq_3
   \   00005F   12....       LCALL     ?Subroutine118 & 0xFFFF
   \                     ??CrossCallReturnLabel_184:
   \   000062   7017         JNZ       ??ZDO_ProcessBindUnbindReq_4
   \   000064   EE           MOV       A,R6
   \   000065   12....       LCALL     ?Subroutine141 & 0xFFFF
   \                     ??CrossCallReturnLabel_232:
   \   000068   E0           MOVX      A,@DPTR
   \   000069   6005         JZ        ??ZDO_ProcessBindUnbindReq_3
   \   00006B   C3           CLR       C
   \   00006C   94F1         SUBB      A,#-0xf
   \   00006E   400B         JC        ??ZDO_ProcessBindUnbindReq_4
    972              {
    973                bindStat = ZDP_INVALID_EP;
   \                     ??ZDO_ProcessBindUnbindReq_3:
   \   000070   85..82       MOV       DPL,?XSP + 0
   \   000073   85..83       MOV       DPH,?XSP + 1
   \   000076   7482         MOV       A,#-0x7e
   \   000078   02....       LJMP      ??ZDO_ProcessBindUnbindReq_2 & 0xFFFF
    974              }
    975              else
    976              {
    977                if ( inMsg->clusterID == Bind_req )
   \                     ??ZDO_ProcessBindUnbindReq_4:
   \   00007B   12....       LCALL     ?Subroutine137 & 0xFFFF
   \                     ??CrossCallReturnLabel_225:
   \   00007E   6421         XRL       A,#0x21
   \   000080   7002         JNZ       ??ZDO_ProcessBindUnbindReq_5
   \   000082   A3           INC       DPTR
   \   000083   E0           MOVX      A,@DPTR
   \                     ??ZDO_ProcessBindUnbindReq_5:
   \   000084   7065         JNZ       ??ZDO_ProcessBindUnbindReq_6
    978                {
    979                  // Assume the table is full
    980                  bindStat = ZDP_TABLE_FULL;
   \   000086   85..82       MOV       DPL,?XSP + 0
   \   000089   85..83       MOV       DPH,?XSP + 1
   \   00008C   748C         MOV       A,#-0x74
   \   00008E   F0           MOVX      @DPTR,A
    981          
    982                  if ( bindNumOfEntries() < gNWK_MAX_BINDING_ENTRIES )
   \   00008F                ; Setup parameters for call to function bindNumOfEntries
   \   00008F   12....       LCALL     `??bindNumOfEntries::?relay`; Banked call to: bindNumOfEntries
   \   000092   90....       MOV       DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   000095   E4           CLR       A
   \   000096   93           MOVC      A,@A+DPTR
   \   000097   F8           MOV       R0,A
   \   000098   7401         MOV       A,#0x1
   \   00009A   93           MOVC      A,@A+DPTR
   \   00009B   F9           MOV       R1,A
   \   00009C   C3           CLR       C
   \   00009D   EA           MOV       A,R2
   \   00009E   98           SUBB      A,R0
   \   00009F   EB           MOV       A,R3
   \   0000A0   99           SUBB      A,R1
   \   0000A1   506C         JNC       ??ZDO_ProcessBindUnbindReq_7
    983                  {
    984                    if ( APSME_BindRequest( pReq->srcEndpoint, pReq->clusterID,
    985                                   &(pReq->dstAddress), pReq->dstEndpoint ) == ZSuccess )
   \   0000A3                ; Setup parameters for call to function APSME_BindRequest
   \   0000A3   12....       LCALL     ?Subroutine104 & 0xFFFF
   \                     ??CrossCallReturnLabel_356:
   \   0000A6   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000A9   12....       LCALL     ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_96:
   \   0000AC   12....       LCALL     `??APSME_BindRequest::?relay`; Banked call to: APSME_BindRequest
   \   0000AF   7401         MOV       A,#0x1
   \   0000B1   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000B4   E9           MOV       A,R1
   \   0000B5   7058         JNZ       ??ZDO_ProcessBindUnbindReq_7
    986                    {
    987                      uint16 nwkAddr;
    988          
    989                      // valid entry
    990                      bindStat = ZDP_SUCCESS;
   \   0000B7   85..82       MOV       DPL,?XSP + 0
   \   0000BA   85..83       MOV       DPH,?XSP + 1
   \   0000BD   E4           CLR       A
   \   0000BE   F0           MOVX      @DPTR,A
    991          
    992                      // Notify to save info into NV
    993                      ZDApp_NVUpdate();
   \   0000BF                ; Setup parameters for call to function ZDApp_NVUpdate
   \   0000BF   12....       LCALL     `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
    994          
    995                      // Check for the destination address
    996                      if ( pReq->dstAddress.addrMode == Addr64Bit )
   \   0000C2   12....       LCALL     ?Subroutine118 & 0xFFFF
   \                     ??CrossCallReturnLabel_185:
   \   0000C5   7048         JNZ       ??ZDO_ProcessBindUnbindReq_7
    997                      {
    998                        if ( APSME_LookupNwkAddr( pReq->dstAddress.addr.extAddr, &nwkAddr ) == FALSE )
   \   0000C7                ; Setup parameters for call to function APSME_LookupNwkAddr
   \   0000C7   7401         MOV       A,#0x1
   \   0000C9   12....       LCALL     ?XSTACK_DISP102_8
   \   0000CC   EE           MOV       A,R6
   \   0000CD   240B         ADD       A,#0xb
   \   0000CF   FA           MOV       R2,A
   \   0000D0   E4           CLR       A
   \   0000D1   3F           ADDC      A,R7
   \   0000D2   FB           MOV       R3,A
   \   0000D3   12....       LCALL     `??APSME_LookupNwkAddr::?relay`; Banked call to: APSME_LookupNwkAddr
   \   0000D6   E9           MOV       A,R1
   \   0000D7   7036         JNZ       ??ZDO_ProcessBindUnbindReq_7
    999                        {
   1000                          ZDP_NwkAddrReq( pReq->dstAddress.addr.extAddr, ZDP_ADDR_REQTYPE_SINGLE, 0, 0 );
   \   0000D9                ; Setup parameters for call to function ZDP_NwkAddrReq
   \   0000D9   7D00         MOV       R5,#0x0
   \   0000DB   7C00         MOV       R4,#0x0
   \   0000DD   7900         MOV       R1,#0x0
   \   0000DF   EE           MOV       A,R6
   \   0000E0   240B         ADD       A,#0xb
   \   0000E2   FA           MOV       R2,A
   \   0000E3   E4           CLR       A
   \   0000E4   3F           ADDC      A,R7
   \   0000E5   FB           MOV       R3,A
   \   0000E6   12....       LCALL     `??ZDP_NwkAddrReq::?relay`; Banked call to: ZDP_NwkAddrReq
   \   0000E9   8024         SJMP      ??ZDO_ProcessBindUnbindReq_7
   1001                        }
   1002                      }
   1003                    }
   1004                  }
   1005                }
   1006                else // Unbind_req
   1007                {
   1008                  if ( APSME_UnBindRequest( pReq->srcEndpoint, pReq->clusterID,
   1009                                 &(pReq->dstAddress), pReq->dstEndpoint ) == ZSuccess )
   \                     ??ZDO_ProcessBindUnbindReq_6:
   \   0000EB                ; Setup parameters for call to function APSME_UnBindRequest
   \   0000EB   12....       LCALL     ?Subroutine104 & 0xFFFF
   \                     ??CrossCallReturnLabel_357:
   \   0000EE   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000F1   12....       LCALL     ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_97:
   \   0000F4   12....       LCALL     `??APSME_UnBindRequest::?relay`; Banked call to: APSME_UnBindRequest
   \   0000F7   7401         MOV       A,#0x1
   \   0000F9   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000FC   E9           MOV       A,R1
   \   0000FD   85..82       MOV       DPL,?XSP + 0
   \   000100   85..83       MOV       DPH,?XSP + 1
   \   000103   7007         JNZ       ??ZDO_ProcessBindUnbindReq_8
   1010                  {
   1011                    bindStat = ZDP_SUCCESS;
   \   000105   E4           CLR       A
   \   000106   F0           MOVX      @DPTR,A
   1012          
   1013                    // Notify to save info into NV
   1014                    ZDApp_NVUpdate();
   \   000107                ; Setup parameters for call to function ZDApp_NVUpdate
   \   000107   12....       LCALL     `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
   \   00010A   8003         SJMP      ??ZDO_ProcessBindUnbindReq_7
   1015                  }
   1016                  else
   1017                    bindStat = ZDP_NO_ENTRY;
   \                     ??ZDO_ProcessBindUnbindReq_8:
   \   00010C   7488         MOV       A,#-0x78
   \                     ??ZDO_ProcessBindUnbindReq_2:
   \   00010E   F0           MOVX      @DPTR,A
   1018                }
   1019              }
   1020            }
   1021          
   1022            // Send back a response message
   1023            ZDP_SendData( &(inMsg->TransSeq), &(inMsg->srcAddr),
   1024                         (inMsg->clusterID | ZDO_RESPONSE_BIT), 1, &bindStat,
   1025                         inMsg->SecurityUse );
   \                     ??ZDO_ProcessBindUnbindReq_7:
   \   00010F                ; Setup parameters for call to function ZDP_SendData
   \   00010F   E5..         MOV       A,?V0
   \   000111   12....       LCALL     ??Subroutine258_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_609:
   \   000114   35..         ADDC      A,?V1
   \   000116   12....       LCALL     ??Subroutine218_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_355:
   \   000119   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00011C   7401         MOV       A,#0x1
   \   00011E   12....       LCALL     ?XSTACK_DISP100_8
   \   000121   88..         MOV       ?V2,R0
   \   000123   89..         MOV       ?V3,R1
   \   000125   78..         MOV       R0,#?V2
   \   000127   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00012A   12....       LCALL     ?Subroutine137 & 0xFFFF
   \                     ??CrossCallReturnLabel_226:
   \   00012D   F5..         MOV       ?V2,A
   \   00012F   A3           INC       DPTR
   \   000130   E0           MOVX      A,@DPTR
   \   000131   4480         ORL       A,#0x80
   \   000133   F5..         MOV       ?V3,A
   \   000135   78..         MOV       R0,#?V2
   \   000137   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00013A   12....       LCALL     ?Subroutine128 & 0xFFFF
   \                     ??CrossCallReturnLabel_195:
   \   00013D   12....       LCALL     `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   000140   7405         MOV       A,#0x5
   \   000142   12....       LCALL     ?DEALLOC_XSTACK8
   1026          }
   \   000145   740C         MOV       A,#0xc
   \   000147   02....       LJMP      ?Subroutine2 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine137:
   \   000000   12....       LCALL     ?Subroutine191 & 0xFFFF
   \                     ??CrossCallReturnLabel_632:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine118:
   \   000000   12....       LCALL     ?Subroutine188 & 0xFFFF
   \                     ??CrossCallReturnLabel_307:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   6403         XRL       A,#0x3
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine104:
   \   000000   EE           MOV       A,R6
   \   000001   2414         ADD       A,#0x14
   \   000003   F582         MOV       DPL,A
   \   000005   E4           CLR       A
   \   000006   3F           ADDC      A,R7
   \   000007                REQUIRE ??Subroutine218_0
   \   000007                ; // Fall through to label ??Subroutine218_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine61:
   \   000000   EE           MOV       A,R6
   \   000001   240B         ADD       A,#0xb
   \   000003   FC           MOV       R4,A
   \   000004   E4           CLR       A
   \   000005   3F           ADDC      A,R7
   \   000006   FD           MOV       R5,A
   \   000007   8E82         MOV       DPL,R6
   \   000009   8F83         MOV       DPH,R7
   \   00000B   A3           INC       DPTR
   \   00000C   A3           INC       DPTR
   \   00000D   A3           INC       DPTR
   \   00000E   A3           INC       DPTR
   \   00000F   A3           INC       DPTR
   \   000010   A3           INC       DPTR
   \   000011   A3           INC       DPTR
   \   000012   A3           INC       DPTR
   \   000013   A3           INC       DPTR
   \   000014   12....       LCALL     ??Subroutine243_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_515:
   \   000017   8E82         MOV       DPL,R6
   \   000019   8F83         MOV       DPH,R7
   \   00001B   A3           INC       DPTR
   \   00001C   A3           INC       DPTR
   \   00001D   A3           INC       DPTR
   \   00001E   A3           INC       DPTR
   \   00001F   A3           INC       DPTR
   \   000020   A3           INC       DPTR
   \   000021   A3           INC       DPTR
   \   000022   A3           INC       DPTR
   \   000023   E0           MOVX      A,@DPTR
   \   000024   F9           MOV       R1,A
   \   000025   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine141:
   \   000000   2414         ADD       A,#0x14
   \   000002   F582         MOV       DPL,A
   \   000004   E4           CLR       A
   \   000005   3F           ADDC      A,R7
   \   000006   F583         MOV       DPH,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine128:
   \   000000   7901         MOV       R1,#0x1
   \   000002   E5..         MOV       A,?V0
   \   000004   2402         ADD       A,#0x2
   \   000006   FC           MOV       R4,A
   \   000007   E4           CLR       A
   \   000008   35..         ADDC      A,?V1
   \   00000A   FD           MOV       R5,A
   \   00000B   E5..         MOV       A,?V0
   \   00000D   240F         ADD       A,#0xf
   \   00000F   FA           MOV       R2,A
   \   000010   E4           CLR       A
   \   000011   35..         ADDC      A,?V1
   \   000013   FB           MOV       R3,A
   \   000014   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine188:
   \   000000   EE           MOV       A,R6
   \   000001   12....       LCALL     ?Subroutine206 & 0xFFFF
   \                     ??CrossCallReturnLabel_691:
   \   000004   3F           ADDC      A,R7
   \   000005   F583         MOV       DPH,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine191:
   \   000000   E5..         MOV       A,?V0
   \   000002   240C         ADD       A,#0xc
   \   000004                REQUIRE ??Subroutine260_0
   \   000004                ; // Fall through to label ??Subroutine260_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine260_0:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003                REQUIRE ??Subroutine261_0
   \   000003                ; // Fall through to label ??Subroutine261_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine261_0:
   \   000000   35..         ADDC      A,?V1
   \   000002   F583         MOV       DPH,A
   \   000004   22           RET
   1027          
   1028          /*********************************************************************
   1029           * @fn      ZDO_UpdateAddrManager
   1030           *
   1031           * @brief   Update the Address Manager.
   1032           *
   1033           * @param   nwkAddr - network address
   1034           * @param   extAddr - extended address
   1035           *
   1036           * @return  none
   1037           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1038          void ZDO_UpdateAddrManager( uint16 nwkAddr, uint8 *extAddr )
   \                     ZDO_UpdateAddrManager:
   1039          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 13
   \   000004   74F3         MOV       A,#-0xd
   \   000006   12....       LCALL     ?ALLOC_XSTACK8
   1040            AddrMgrEntry_t addrEntry;
   1041          
   1042            // Update the address manager
   1043            addrEntry.user = ADDRMGR_USER_DEFAULT;
   \   000009   85..82       MOV       DPL,?XSP + 0
   \   00000C   85..83       MOV       DPH,?XSP + 1
   \   00000F   E4           CLR       A
   \   000010   F0           MOVX      @DPTR,A
   1044            addrEntry.nwkAddr = nwkAddr;
   \   000011   04           INC       A
   \   000012   12....       LCALL     ?XSTACK_DISP0_8
   \   000015   12....       LCALL     ??Subroutine224_0 & 0xFFFF
   1045            AddrMgrExtAddrSet( addrEntry.extAddr, extAddr );
   \                     ??CrossCallReturnLabel_389:
   \   000018                ; Setup parameters for call to function AddrMgrExtAddrSet
   \   000018   7403         MOV       A,#0x3
   \   00001A   12....       LCALL     ?XSTACK_DISP0_8
   \   00001D   AA82         MOV       R2,DPL
   \   00001F   AB83         MOV       R3,DPH
   \   000021   12....       LCALL     `??AddrMgrExtAddrSet::?relay`; Banked call to: AddrMgrExtAddrSet
   1046            AddrMgrEntryUpdate( &addrEntry );
   \   000024                ; Setup parameters for call to function AddrMgrEntryUpdate
   \   000024   AA..         MOV       R2,?XSP + 0
   \   000026   AB..         MOV       R3,?XSP + 1
   \   000028   12....       LCALL     `??AddrMgrEntryUpdate::?relay`; Banked call to: AddrMgrEntryUpdate
   1047          }
   \   00002B   740D         MOV       A,#0xd
   \   00002D   12....       LCALL     ?DEALLOC_XSTACK8
   \   000030   02....       LJMP      ?Subroutine0 & 0xFFFF
   1048          
   1049          /*********************************************************************
   1050           * @fn      ZDO_ProcessServerDiscReq
   1051           *
   1052           * @brief   Process the Server_Discovery_req message.
   1053           *
   1054           * @param   inMsg  - incoming message (request)
   1055           *
   1056           * @return  none
   1057           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1058          void ZDO_ProcessServerDiscReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessServerDiscReq:
   1059          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   1060            uint16 serverMask = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
   1061            uint16 matchMask = serverMask & ZDO_Config_Node_Descriptor.ServerMask;
   \   000009   12....       LCALL     ?Subroutine120 & 0xFFFF
   \                     ??CrossCallReturnLabel_186:
   \   00000C   12....       LCALL     ??Subroutine251_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_538:
   \   00000F   8882         MOV       DPL,R0
   \   000011   8983         MOV       DPH,R1
   \   000013   12....       LCALL     ??Subroutine252_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_556:
   \   000016   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor + 8
   \   000019   E0           MOVX      A,@DPTR
   \   00001A   58           ANL       A,R0
   \   00001B   F5..         MOV       ?V0,A
   \   00001D   A3           INC       DPTR
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   59           ANL       A,R1
   \   000020   F5..         MOV       ?V1,A
   1062          
   1063            if ( matchMask )
   \   000022   E5..         MOV       A,?V0
   \   000024   45..         ORL       A,?V1
   \   000026   601B         JZ        ??ZDO_ProcessServerDiscReq_0
   1064            {
   1065              ZDP_ServerDiscRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZSUCCESS,
   1066                          ZDAppNwkAddr.addr.shortAddr, matchMask, inMsg->SecurityUse );
   \   000028                ; Setup parameters for call to function ZDP_ServerDiscRsp
   \   000028   78..         MOV       R0,#?V0
   \   00002A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002D   90....       MOV       DPTR,#ZDAppNwkAddr
   \   000030   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000033   12....       LCALL     ?Subroutine131 & 0xFFFF
   1067            }
   \                     ??CrossCallReturnLabel_202:
   \   000036   7C00         MOV       R4,#0x0
   \   000038   12....       LCALL     ?Subroutine123 & 0xFFFF
   \                     ??CrossCallReturnLabel_188:
   \   00003B   12....       LCALL     `??ZDP_ServerDiscRsp::?relay`; Banked call to: ZDP_ServerDiscRsp
   \   00003E   7404         MOV       A,#0x4
   \   000040   12....       LCALL     ?DEALLOC_XSTACK8
   1068          }
   \                     ??ZDO_ProcessServerDiscReq_0:
   \   000043   02....       LJMP      ??Subroutine214_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine131:
   \   000000   12....       LCALL     ?Subroutine186 & 0xFFFF
   \                     ??CrossCallReturnLabel_302:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine123:
   \   000000   12....       LCALL     ?Subroutine184 & 0xFFFF
   \                     ??CrossCallReturnLabel_300:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine252_0:
   \   000000   12....       LCALL     ??Subroutine259_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_620:
   \   000003   F9           MOV       R1,A
   \   000004   EA           MOV       A,R2
   \   000005   F8           MOV       R0,A
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine120:
   \   000000   12....       LCALL     ?Subroutine188 & 0xFFFF
   \                     ??CrossCallReturnLabel_308:
   \   000003   22           RET
   1069          
   1070          /*********************************************************************
   1071           * Call Back Functions from APS  - API
   1072           */
   1073          
   1074          /*********************************************************************
   1075           * @fn          ZDO_EndDeviceTimeoutCB
   1076           *
   1077           * @brief       This function handles the binding timer for the End
   1078           *              Device Bind command.
   1079           *
   1080           * @param       none
   1081           *
   1082           * @return      none
   1083           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1084          void ZDO_EndDeviceTimeoutCB( void )
   \                     ZDO_EndDeviceTimeoutCB:
   1085          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   1086          #if defined ( REFLECTOR )
   1087            byte stat;
   1088            if ( ZDO_EDBind )
   \   00000A   90....       MOV       DPTR,#ZDO_EDBind
   \   00000D   12....       LCALL     ??Subroutine239_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_489:
   \   000010   7003         JNZ       $+5
   \   000012   02....       LJMP      ??ZDO_EndDeviceTimeoutCB_0 & 0xFFFF
   1089            {
   1090              stat = ZDO_EDBind->status;
   1091          
   1092              // Send the response message to the first sent
   1093              ZDO_SendEDBindRsp( ZDO_EDBind->SrcTransSeq, &(ZDO_EDBind->SrcAddr),
   1094                                  stat, ZDO_EDBind->SecurityUse );
   \   000015   E0           MOVX      A,@DPTR
   \   000016   C8           XCH       A,R0
   \   000017   2415         ADD       A,#0x15
   \   000019   12....       LCALL     ?Subroutine134 & 0xFFFF
   \                     ??CrossCallReturnLabel_207:
   \   00001C   F8           MOV       R0,A
   \   00001D   90....       MOV       DPTR,#ZDO_EDBind
   \   000020   E0           MOVX      A,@DPTR
   \   000021   F9           MOV       R1,A
   \   000022   A3           INC       DPTR
   \   000023   E0           MOVX      A,@DPTR
   \   000024   C9           XCH       A,R1
   \   000025   2416         ADD       A,#0x16
   \   000027   F582         MOV       DPL,A
   \   000029   E4           CLR       A
   \   00002A   39           ADDC      A,R1
   \   00002B   F583         MOV       DPH,A
   \   00002D   E0           MOVX      A,@DPTR
   \   00002E   C0E0         PUSH      A
   \   000030   7401         MOV       A,#0x1
   \   000032   12....       LCALL     ?XSTACK_DISP0_8
   \   000035   D0E0         POP       A
   \   000037   F0           MOVX      @DPTR,A
   \   000038   90....       MOV       DPTR,#ZDO_EDBind
   \   00003B   E0           MOVX      A,@DPTR
   \   00003C   F9           MOV       R1,A
   \   00003D   A3           INC       DPTR
   \   00003E   E0           MOVX      A,@DPTR
   \   00003F   F583         MOV       DPH,A
   \   000041   8982         MOV       DPL,R1
   \   000043   E0           MOVX      A,@DPTR
   \   000044   85..82       MOV       DPL,?XSP + 0
   \   000047   85..83       MOV       DPH,?XSP + 1
   \   00004A   F0           MOVX      @DPTR,A
   \   00004B                ; Setup parameters for call to function ZDP_SendData
   \   00004B   E8           MOV       A,R0
   \   00004C   F5..         MOV       ?V0,A
   \   00004E   78..         MOV       R0,#?V0
   \   000050   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000053   7402         MOV       A,#0x2
   \   000055   12....       LCALL     ?XSTACK_DISP100_8
   \   000058   88..         MOV       ?V0,R0
   \   00005A   89..         MOV       ?V1,R1
   \   00005C   78..         MOV       R0,#?V0
   \   00005E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000061   75..20       MOV       ?V0,#0x20
   \   000064   75..80       MOV       ?V1,#-0x80
   \   000067   78..         MOV       R0,#?V0
   \   000069   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00006C   7901         MOV       R1,#0x1
   \   00006E   90....       MOV       DPTR,#ZDO_EDBind
   \   000071   E0           MOVX      A,@DPTR
   \   000072   29           ADD       A,R1
   \   000073   FC           MOV       R4,A
   \   000074   A3           INC       DPTR
   \   000075   E0           MOVX      A,@DPTR
   \   000076   3400         ADDC      A,#0x0
   \   000078   FD           MOV       R5,A
   \   000079   7405         MOV       A,#0x5
   \   00007B   12....       LCALL     ?XSTACK_DISP101_8
   \   00007E   12....       LCALL     `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   000081   7405         MOV       A,#0x5
   \   000083   12....       LCALL     ?DEALLOC_XSTACK8
   1095          
   1096              ZDO_RemoveEndDeviceBind();
   \   000086   90....       MOV       DPTR,#ZDO_EDBind
   \   000089   12....       LCALL     ??Subroutine239_0 & 0xFFFF
   1097            }
   \                     ??CrossCallReturnLabel_490:
   \   00008C   6045         JZ        ??ZDO_EndDeviceTimeoutCB_0
   \   00008E   E0           MOVX      A,@DPTR
   \   00008F   C8           XCH       A,R0
   \   000090   2410         ADD       A,#0x10
   \   000092   12....       LCALL     ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_501:
   \   000095   6012         JZ        ??ZDO_EndDeviceTimeoutCB_1
   \   000097                ; Setup parameters for call to function osal_mem_free
   \   000097   90....       MOV       DPTR,#ZDO_EDBind
   \   00009A   12....       LCALL     ??Subroutine257_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_572:
   \   00009D   2410         ADD       A,#0x10
   \   00009F   F582         MOV       DPL,A
   \   0000A1   E4           CLR       A
   \   0000A2   38           ADDC      A,R0
   \   0000A3   12....       LCALL     ??Subroutine235_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_472:
   \   0000A6   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \                     ??ZDO_EndDeviceTimeoutCB_1:
   \   0000A9   90....       MOV       DPTR,#ZDO_EDBind
   \   0000AC   12....       LCALL     ??Subroutine257_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_573:
   \   0000AF   2413         ADD       A,#0x13
   \   0000B1   12....       LCALL     ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_502:
   \   0000B4   600D         JZ        ??ZDO_EndDeviceTimeoutCB_2
   \   0000B6                ; Setup parameters for call to function osal_mem_free
   \   0000B6   90....       MOV       DPTR,#ZDO_EDBind
   \   0000B9   12....       LCALL     ?Subroutine78 & 0xFFFF
   \                     ??CrossCallReturnLabel_129:
   \   0000BC   FA           MOV       R2,A
   \   0000BD   A3           INC       DPTR
   \   0000BE   E0           MOVX      A,@DPTR
   \   0000BF   FB           MOV       R3,A
   \   0000C0   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \                     ??ZDO_EndDeviceTimeoutCB_2:
   \   0000C3                ; Setup parameters for call to function osal_mem_free
   \   0000C3   90....       MOV       DPTR,#ZDO_EDBind
   \   0000C6   12....       LCALL     ??Subroutine236_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_456:
   \   0000C9   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0000CC   90....       MOV       DPTR,#ZDO_EDBind
   \   0000CF   E4           CLR       A
   \   0000D0   F0           MOVX      @DPTR,A
   \   0000D1   A3           INC       DPTR
   \   0000D2   F0           MOVX      @DPTR,A
   1098          #endif  // REFLECTOR
   1099          }
   \                     ??ZDO_EndDeviceTimeoutCB_0:
   \   0000D3   02....       LJMP      ?Subroutine4 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine235_0:
   \   000000   F583         MOV       DPH,A
   \   000002                REQUIRE ??Subroutine236_0
   \   000002                ; // Fall through to label ??Subroutine236_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine48:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003   38           ADDC      A,R0
   \   000004                REQUIRE ??Subroutine238_0
   \   000004                ; // Fall through to label ??Subroutine238_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine238_0:
   \   000000   F583         MOV       DPH,A
   \   000002                REQUIRE ??Subroutine239_0
   \   000002                ; // Fall through to label ??Subroutine239_0
   1100          
   1101          /*********************************************************************
   1102           * Optional Management Messages
   1103           */
   1104          
   1105          /*********************************************************************
   1106           * @fn          ZDO_ProcessMgmtLqiReq
   1107           *
   1108           * @brief       This function handles parsing the incoming Management
   1109           *              LQI request and generate the response.
   1110           *
   1111           *   Note:      This function will limit the number of items returned
   1112           *              to ZDO_MAX_LQI_ITEMS items.
   1113           *
   1114           * @param       inMsg - incoming message (request)
   1115           *
   1116           * @return      none
   1117           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1118          void ZDO_ProcessMgmtLqiReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtLqiReq:
   1119          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 42
   \   000005   74D6         MOV       A,#-0x2a
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   7404         MOV       A,#0x4
   \   00000C   12....       LCALL     ?XSTACK_DISP0_8
   \   00000F   12....       LCALL     ??Subroutine224_0 & 0xFFFF
   1120            byte x;
   1121            byte index;
   1122            byte numItems;
   1123            byte maxItems;
   1124            ZDP_MgmtLqiItem_t* table = NULL;
   \                     ??CrossCallReturnLabel_390:
   \   000012   7402         MOV       A,#0x2
   \   000014   12....       LCALL     ?XSTACK_DISP0_8
   \   000017   E4           CLR       A
   \   000018   F0           MOVX      @DPTR,A
   \   000019   A3           INC       DPTR
   \   00001A   F0           MOVX      @DPTR,A
   1125            ZDP_MgmtLqiItem_t* item;
   1126            neighborEntry_t    entry;
   1127            byte aItems;
   1128            associated_devices_t *aDevice;
   1129            AddrMgrEntry_t  nwkEntry;
   1130            uint8 StartIndex = inMsg->asdu[0];
   \   00001B   7404         MOV       A,#0x4
   \   00001D   12....       LCALL     ?XSTACK_DISP0_8
   \   000020   12....       LCALL     ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_83:
   \   000023   F5..         MOV       ?V7,A
   1131          
   1132            // Get the number of neighbor items
   1133            NLME_GetRequest( nwkNumNeighborTableEntries, 0, &maxItems );
   \   000025                ; Setup parameters for call to function NLME_GetRequest
   \   000025   AC..         MOV       R4,?XSP + 0
   \   000027   AD..         MOV       R5,?XSP + 1
   \   000029   7A00         MOV       R2,#0x0
   \   00002B   7B00         MOV       R3,#0x0
   \   00002D   799C         MOV       R1,#-0x64
   \   00002F   12....       LCALL     `??NLME_GetRequest::?relay`; Banked call to: NLME_GetRequest
   1134          
   1135            // Get the number of associated items
   1136            aItems = (uint8)AssocCount( PARENT, CHILD_FFD_RX_IDLE );
   \   000032                ; Setup parameters for call to function AssocCount
   \   000032   7A04         MOV       R2,#0x4
   \   000034   7900         MOV       R1,#0x0
   \   000036   12....       LCALL     `??AssocCount::?relay`; Banked call to: AssocCount
   \   000039   7401         MOV       A,#0x1
   \   00003B   12....       LCALL     ?XSTACK_DISP0_8
   \   00003E   EA           MOV       A,R2
   \   00003F   12....       LCALL     ?Subroutine27 & 0xFFFF
   1137          
   1138            // Total number of items
   1139            maxItems += aItems;
   \                     ??CrossCallReturnLabel_31:
   \   000042   2A           ADD       A,R2
   \   000043   F0           MOVX      @DPTR,A
   1140          
   1141            // Start with the supplied index
   1142            if ( maxItems > StartIndex )
   \   000044   F8           MOV       R0,A
   \   000045   E5..         MOV       A,?V7
   \   000047   C3           CLR       C
   \   000048   98           SUBB      A,R0
   \   000049   4003         JC        $+5
   \   00004B   02....       LJMP      ??ZDO_ProcessMgmtLqiReq_0 & 0xFFFF
   1143            {
   1144              numItems = maxItems - StartIndex;
   \   00004E   E0           MOVX      A,@DPTR
   \   00004F   C3           CLR       C
   \   000050   95..         SUBB      A,?V7
   \   000052   F5..         MOV       ?V1,A
   1145          
   1146              // limit the size of the list
   1147              if ( numItems > ZDO_MAX_LQI_ITEMS )
   \   000054   C3           CLR       C
   \   000055   9404         SUBB      A,#0x4
   \   000057   4003         JC        ??ZDO_ProcessMgmtLqiReq_1
   1148                numItems = ZDO_MAX_LQI_ITEMS;
   \   000059   75..03       MOV       ?V1,#0x3
   1149          
   1150              // Allocate the memory to build the table
   1151              table = (ZDP_MgmtLqiItem_t*)osal_mem_alloc( (short)
   1152                        ( numItems * sizeof( ZDP_MgmtLqiItem_t ) ) );
   \                     ??ZDO_ProcessMgmtLqiReq_1:
   \   00005C                ; Setup parameters for call to function osal_mem_alloc
   \   00005C   E5..         MOV       A,?V1
   \   00005E   75F01A       MOV       B,#0x1a
   \   000061   A4           MUL       AB
   \   000062   FA           MOV       R2,A
   \   000063   ABF0         MOV       R3,B
   \   000065   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000068   7402         MOV       A,#0x2
   \   00006A   12....       LCALL     ?XSTACK_DISP0_8
   \   00006D   12....       LCALL     ??Subroutine224_0 & 0xFFFF
   1153          
   1154              if ( table != NULL )
   \                     ??CrossCallReturnLabel_391:
   \   000070   7402         MOV       A,#0x2
   \   000072   12....       LCALL     ?XSTACK_DISP0_8
   \   000075   12....       LCALL     ??Subroutine239_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_491:
   \   000078   7003         JNZ       $+5
   \   00007A   02....       LJMP      ??ZDO_ProcessMgmtLqiReq_2 & 0xFFFF
   1155              {
   1156                x = 0;
   \   00007D   75..00       MOV       ?V6,#0x0
   1157                item = table;
   \   000080   7402         MOV       A,#0x2
   \   000082   12....       LCALL     ?XSTACK_DISP0_8
   \   000085   12....       LCALL     ??Subroutine229_0 & 0xFFFF
   1158                index = StartIndex;
   \                     ??CrossCallReturnLabel_425:
   \   000088   85....       MOV       ?V0,?V7
   \   00008B   807E         SJMP      ??ZDO_ProcessMgmtLqiReq_3
   1159          
   1160                // Loop through associated items and build list
   1161                for ( ; x < numItems; x++ )
   1162                {
   1163                  if ( index < aItems )
   1164                  {
   1165                    // get next associated device
   1166                    aDevice = AssocFindDevice( index++ );
   1167          
   1168                    // set basic fields
   1169                    item->panID   = _NIB.nwkPanId;
   1170                    osal_cpyExtAddr( item->extPanID, _NIB.extendedPANID );
   1171                    item->nwkAddr = aDevice->shortAddr;
   1172                    item->permit  = ZDP_MGMT_BOOL_UNKNOWN;
   1173                    item->depth   = 0xFF;
   1174                    item->lqi     = aDevice->linkInfo.rxLqi;
   1175          
   1176                    // set extented address
   1177                    nwkEntry.user    = ADDRMGR_USER_DEFAULT;
   1178                    nwkEntry.nwkAddr = aDevice->shortAddr;
   1179          
   1180                    if ( AddrMgrEntryLookupNwk( &nwkEntry ) == TRUE )
   1181                    {
   1182                      osal_cpyExtAddr( item->extAddr, nwkEntry.extAddr );
   1183                    }
   1184                    else
   1185                    {
   1186                      osal_memset( item->extAddr, 0xFF, Z_EXTADDR_LEN );
   \                     ??ZDO_ProcessMgmtLqiReq_4:
   \   00008D                ; Setup parameters for call to function osal_memset
   \   00008D   12....       LCALL     ?Subroutine139 & 0xFFFF
   1187                    }
   \                     ??CrossCallReturnLabel_359:
   \   000090   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   1188          
   1189                    // use association info to set other fields
   1190                    if ( aDevice->nodeRelation == PARENT )
   \                     ??ZDO_ProcessMgmtLqiReq_5:
   \   000093   85..82       MOV       DPL,?V4
   \   000096   85..83       MOV       DPH,?V5
   \   000099   A3           INC       DPTR
   \   00009A   A3           INC       DPTR
   \   00009B   A3           INC       DPTR
   \   00009C   A3           INC       DPTR
   \   00009D   E0           MOVX      A,@DPTR
   \   00009E   702D         JNZ       ??ZDO_ProcessMgmtLqiReq_6
   1191                    {
   1192                      if (  aDevice->shortAddr == 0 )
   \   0000A0   85..82       MOV       DPL,?V4
   \   0000A3   85..83       MOV       DPH,?V5
   \   0000A6   12....       LCALL     ??Subroutine239_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_492:
   \   0000A9   700C         JNZ       ??ZDO_ProcessMgmtLqiReq_7
   1193                      {
   1194                        item->devType = ZDP_MGMT_DT_COORD;
   \   0000AB   12....       LCALL     ?Subroutine127 & 0xFFFF
   \                     ??CrossCallReturnLabel_526:
   \   0000AE   F0           MOVX      @DPTR,A
   1195                        item->depth = 0;
   \   0000AF   EE           MOV       A,R6
   \   0000B0   2418         ADD       A,#0x18
   \   0000B2   12....       LCALL     ??Subroutine244_0 & 0xFFFF
   1196                      }
   \                     ??CrossCallReturnLabel_522:
   \   0000B5   8010         SJMP      ??ZDO_ProcessMgmtLqiReq_8
   1197                      else
   1198                      {
   1199                        item->devType = ZDP_MGMT_DT_ROUTER;
   \                     ??ZDO_ProcessMgmtLqiReq_7:
   \   0000B7   12....       LCALL     ?Subroutine124 & 0xFFFF
   \                     ??CrossCallReturnLabel_364:
   \   0000BA   F0           MOVX      @DPTR,A
   1200                        item->depth = _NIB.nodeDepth - 1;
   \   0000BB   90....       MOV       DPTR,#_NIB + 52
   \   0000BE   E0           MOVX      A,@DPTR
   \   0000BF   14           DEC       A
   \   0000C0   C0E0         PUSH      A
   \   0000C2   12....       LCALL     ?Subroutine145 & 0xFFFF
   1201                      }
   1202          
   1203                      item->rxOnIdle = ZDP_MGMT_BOOL_UNKNOWN;
   1204                      item->relation = ZDP_MGMT_REL_PARENT;
   1205                    }
   \                     ??CrossCallReturnLabel_243:
   \   0000C5   D0E0         POP       A
   \                     ??ZDO_ProcessMgmtLqiReq_8:
   \   0000C7   12....       LCALL     ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   0000CA   E4           CLR       A
   \   0000CB   8034         SJMP      ??CrossCallReturnLabel_362
   1206                    else
   1207                    {
   1208                      // If not parent, then it's a child
   1209                      item->depth = _NIB.nodeDepth + 1;
   \                     ??ZDO_ProcessMgmtLqiReq_6:
   \   0000CD   90....       MOV       DPTR,#_NIB + 52
   \   0000D0   E0           MOVX      A,@DPTR
   \   0000D1   04           INC       A
   \   0000D2   C0E0         PUSH      A
   \   0000D4   12....       LCALL     ?Subroutine145 & 0xFFFF
   \                     ??CrossCallReturnLabel_244:
   \   0000D7   D0E0         POP       A
   \   0000D9   12....       LCALL     ?Subroutine15 & 0xFFFF
   1210          
   1211                      if ( aDevice->nodeRelation < CHILD_FFD )
   \                     ??CrossCallReturnLabel_12:
   \   0000DC   C3           CLR       C
   \   0000DD   9403         SUBB      A,#0x3
   \   0000DF   EE           MOV       A,R6
   \   0000E0   4003         JC        $+5
   \   0000E2   02....       LJMP      ??ZDO_ProcessMgmtLqiReq_9 & 0xFFFF
   1212                      {
   1213                        item->devType = ZDP_MGMT_DT_ENDDEV;
   \   0000E5   12....       LCALL     ?Subroutine141 & 0xFFFF
   1214          
   1215                        if ( aDevice->nodeRelation == CHILD_RFD )
   1216                        {
   1217                          item->rxOnIdle = FALSE;
   1218                        }
   1219                        else
   1220                        {
   1221                          item->rxOnIdle = TRUE;
   1222                        }
   1223                      }
   \                     ??CrossCallReturnLabel_233:
   \   0000E8   7402         MOV       A,#0x2
   \   0000EA   12....       LCALL     ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   0000ED   6401         XRL       A,#0x1
   \   0000EF   7003         JNZ       $+5
   \   0000F1   02....       LJMP      ??ZDO_ProcessMgmtLqiReq_10 & 0xFFFF
   1224                      else
   1225                      {
   1226                        item->devType = ZDP_MGMT_DT_ROUTER;
   1227          
   1228                        if ( aDevice->nodeRelation == CHILD_FFD )
   1229                        {
   1230                          item->rxOnIdle = FALSE;
   1231                        }
   1232                        else
   1233                        {
   1234                          item->rxOnIdle = TRUE;
   \                     ??ZDO_ProcessMgmtLqiReq_11:
   \   0000F4   EE           MOV       A,R6
   \   0000F5   2415         ADD       A,#0x15
   \   0000F7   12....       LCALL     ??Subroutine221_0 & 0xFFFF
   1235                        }
   \                     ??CrossCallReturnLabel_361:
   \   0000FA   F0           MOVX      @DPTR,A
   1236                      }
   1237          
   1238                      item->relation = ZDP_MGMT_REL_CHILD;
   \   0000FB   EE           MOV       A,R6
   \   0000FC   2416         ADD       A,#0x16
   \   0000FE   12....       LCALL     ??Subroutine221_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_362:
   \   000101   F0           MOVX      @DPTR,A
   1239                    }
   1240          
   1241                    item++;
   \   000102   EE           MOV       A,R6
   \   000103   241A         ADD       A,#0x1a
   \   000105   FE           MOV       R6,A
   \   000106   5001         JNC       ??ZDO_ProcessMgmtLqiReq_12
   \   000108   0F           INC       R7
   \                     ??ZDO_ProcessMgmtLqiReq_12:
   \   000109   05..         INC       ?V6
   \                     ??ZDO_ProcessMgmtLqiReq_3:
   \   00010B   E5..         MOV       A,?V6
   \   00010D   C3           CLR       C
   \   00010E   95..         SUBB      A,?V1
   \   000110   4003         JC        $+5
   \   000112   02....       LJMP      ??ZDO_ProcessMgmtLqiReq_13 & 0xFFFF
   \   000115   7401         MOV       A,#0x1
   \   000117   12....       LCALL     ?XSTACK_DISP0_8
   \   00011A   E0           MOVX      A,@DPTR
   \   00011B   F8           MOV       R0,A
   \   00011C   E5..         MOV       A,?V0
   \   00011E   C3           CLR       C
   \   00011F   98           SUBB      A,R0
   \   000120   4003         JC        $+5
   \   000122   02....       LJMP      ??ZDO_ProcessMgmtLqiReq_14 & 0xFFFF
   \   000125                ; Setup parameters for call to function AssocFindDevice
   \   000125   A9..         MOV       R1,?V0
   \   000127   12....       LCALL     `??AssocFindDevice::?relay`; Banked call to: AssocFindDevice
   \   00012A   8A..         MOV       ?V4,R2
   \   00012C   8B..         MOV       ?V5,R3
   \   00012E   05..         INC       ?V0
   \   000130   90....       MOV       DPTR,#_NIB + 33
   \   000133   12....       LCALL     ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   000136   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   000139   85..82       MOV       DPL,?V4
   \   00013C   85..83       MOV       DPH,?V5
   \   00013F   12....       LCALL     ??Subroutine251_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_539:
   \   000142   12....       LCALL     ?Subroutine144 & 0xFFFF
   \                     ??CrossCallReturnLabel_240:
   \   000145   F583         MOV       DPH,A
   \   000147   E8           MOV       A,R0
   \   000148   F0           MOVX      @DPTR,A
   \   000149   A3           INC       DPTR
   \   00014A   E9           MOV       A,R1
   \   00014B   12....       LCALL     ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   00014E   85..82       MOV       DPL,?V4
   \   000151   85..83       MOV       DPH,?V5
   \   000154   A3           INC       DPTR
   \   000155   A3           INC       DPTR
   \   000156   A3           INC       DPTR
   \   000157   A3           INC       DPTR
   \   000158   A3           INC       DPTR
   \   000159   A3           INC       DPTR
   \   00015A   A3           INC       DPTR
   \   00015B   A3           INC       DPTR
   \   00015C   A3           INC       DPTR
   \   00015D   A3           INC       DPTR
   \   00015E   E0           MOVX      A,@DPTR
   \   00015F   C0E0         PUSH      A
   \   000161   12....       LCALL     ?Subroutine146 & 0xFFFF
   \                     ??CrossCallReturnLabel_245:
   \   000164   D0E0         POP       A
   \   000166   F0           MOVX      @DPTR,A
   \   000167   7406         MOV       A,#0x6
   \   000169   12....       LCALL     ?XSTACK_DISP0_8
   \   00016C   E4           CLR       A
   \   00016D   12....       LCALL     ?Subroutine154 & 0xFFFF
   \                     ??CrossCallReturnLabel_258:
   \   000170   12....       LCALL     ??Subroutine251_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_540:
   \   000173   7407         MOV       A,#0x7
   \   000175   12....       LCALL     ?XSTACK_DISP0_8
   \   000178   12....       LCALL     ??Subroutine222_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_375:
   \   00017B                ; Setup parameters for call to function AddrMgrEntryLookupNwk
   \   00017B   7406         MOV       A,#0x6
   \   00017D   12....       LCALL     ?XSTACK_DISP101_8
   \   000180   12....       LCALL     `??AddrMgrEntryLookupNwk::?relay`; Banked call to: AddrMgrEntryLookupNwk
   \   000183   E9           MOV       A,R1
   \   000184   6401         XRL       A,#0x1
   \   000186   6003         JZ        $+5
   \   000188   02....       LJMP      ??ZDO_ProcessMgmtLqiReq_4 & 0xFFFF
   \   00018B                ; Setup parameters for call to function sAddrExtCpy
   \   00018B   7409         MOV       A,#0x9
   \   00018D   12....       LCALL     ?XSTACK_DISP0_8
   \   000190   AC82         MOV       R4,DPL
   \   000192   AD83         MOV       R5,DPH
   \   000194   12....       LCALL     ??Subroutine219_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_358:
   \   000197   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   00019A   02....       LJMP      ??ZDO_ProcessMgmtLqiReq_5 & 0xFFFF
   \                     ??ZDO_ProcessMgmtLqiReq_9:
   \   00019D   12....       LCALL     ??Subroutine220_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_363:
   \   0001A0   12....       LCALL     ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   0001A3   6403         XRL       A,#0x3
   \   0001A5   6003         JZ        $+5
   \   0001A7   02....       LJMP      ??ZDO_ProcessMgmtLqiReq_11 & 0xFFFF
   \                     ??ZDO_ProcessMgmtLqiReq_10:
   \   0001AA   EE           MOV       A,R6
   \   0001AB   2415         ADD       A,#0x15
   \   0001AD   12....       LCALL     ??Subroutine244_0 & 0xFFFF
   1242                  }
   \                     ??CrossCallReturnLabel_523:
   \   0001B0   02....       LJMP      ??CrossCallReturnLabel_361 & 0xFFFF
   1243                  else
   1244                  {
   1245                    if ( StartIndex <= aItems )
   \                     ??ZDO_ProcessMgmtLqiReq_14:
   \   0001B3   E0           MOVX      A,@DPTR
   \   0001B4   C3           CLR       C
   \   0001B5   95..         SUBB      A,?V7
   \   0001B7   4005         JC        ??ZDO_ProcessMgmtLqiReq_15
   1246                      // Start with 1st neighbor
   1247                      index = 0;
   \   0001B9   75..00       MOV       ?V0,#0x0
   \   0001BC   801C         SJMP      ??ZDO_ProcessMgmtLqiReq_16
   1248                    else
   1249                      // Start with >1st neighbor
   1250                      index = StartIndex - aItems;
   \                     ??ZDO_ProcessMgmtLqiReq_15:
   \   0001BE   E5..         MOV       A,?V7
   \   0001C0   C3           CLR       C
   \   0001C1   98           SUBB      A,R0
   \   0001C2   F5..         MOV       ?V0,A
   \   0001C4   8014         SJMP      ??ZDO_ProcessMgmtLqiReq_16
   1251                    break;
   1252                  }
   1253                }
   1254          
   1255                // Loop through neighbor items and finish list
   1256                for ( ; x < numItems; x++ )
   1257                {
   1258                  // Add next neighbor table item
   1259                  NLME_GetRequest( nwkNeighborTable, index++, &entry );
   1260          
   1261                  // set ZDP_MgmtLqiItem_t fields
   1262                  item->panID    = entry.panId;
   1263                  osal_cpyExtAddr( item->extPanID, _NIB.extendedPANID );
   1264                  osal_memset( item->extAddr, 0xFF, Z_EXTADDR_LEN );
   1265                  item->nwkAddr  = entry.neighborAddress;
   1266                  item->rxOnIdle = ZDP_MGMT_BOOL_UNKNOWN;
   1267                  item->relation = ZDP_MGMT_REL_UNKNOWN;
   1268                  item->permit   = ZDP_MGMT_BOOL_UNKNOWN;
   1269                  item->depth    = 0xFF;
   1270                  item->lqi      = entry.linkInfo.rxLqi;
   1271          
   1272                  if ( item->nwkAddr == 0 )
   1273                  {
   1274                    item->devType = ZDP_MGMT_DT_COORD;
   1275                  }
   1276                  else
   1277                  {
   1278                    item->devType = ZDP_MGMT_DT_ROUTER;
   \                     ??ZDO_ProcessMgmtLqiReq_17:
   \   0001C6   12....       LCALL     ?Subroutine124 & 0xFFFF
   1279                  }
   \                     ??CrossCallReturnLabel_365:
   \   0001C9   F0           MOVX      @DPTR,A
   1280          
   1281                  item++;
   \   0001CA   EE           MOV       A,R6
   \   0001CB   241A         ADD       A,#0x1a
   \   0001CD   FE           MOV       R6,A
   \   0001CE   5001         JNC       ??ZDO_ProcessMgmtLqiReq_18
   \   0001D0   0F           INC       R7
   \                     ??ZDO_ProcessMgmtLqiReq_18:
   \   0001D1   05..         INC       ?V6
   \                     ??ZDO_ProcessMgmtLqiReq_13:
   \   0001D3   E5..         MOV       A,?V6
   \   0001D5   C3           CLR       C
   \   0001D6   95..         SUBB      A,?V1
   \   0001D8   505C         JNC       ??ZDO_ProcessMgmtLqiReq_2
   \                     ??ZDO_ProcessMgmtLqiReq_16:
   \   0001DA                ; Setup parameters for call to function NLME_GetRequest
   \   0001DA   7413         MOV       A,#0x13
   \   0001DC   12....       LCALL     ?XSTACK_DISP102_8
   \   0001DF   AA..         MOV       R2,?V0
   \   0001E1   7B00         MOV       R3,#0x0
   \   0001E3   7987         MOV       R1,#-0x79
   \   0001E5   12....       LCALL     `??NLME_GetRequest::?relay`; Banked call to: NLME_GetRequest
   \   0001E8   05..         INC       ?V0
   \   0001EA   741D         MOV       A,#0x1d
   \   0001EC   12....       LCALL     ?XSTACK_DISP0_8
   \   0001EF   12....       LCALL     ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   0001F2   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   0001F5                ; Setup parameters for call to function osal_memset
   \   0001F5   12....       LCALL     ?Subroutine139 & 0xFFFF
   \                     ??CrossCallReturnLabel_360:
   \   0001F8   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   \   0001FB   EE           MOV       A,R6
   \   0001FC   2412         ADD       A,#0x12
   \   0001FE   F8           MOV       R0,A
   \   0001FF   E4           CLR       A
   \   000200   3F           ADDC      A,R7
   \   000201   F9           MOV       R1,A
   \   000202   7413         MOV       A,#0x13
   \   000204   12....       LCALL     ?XSTACK_DISP0_8
   \   000207   12....       LCALL     ??Subroutine236_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_457:
   \   00020A   8882         MOV       DPL,R0
   \   00020C   8983         MOV       DPH,R1
   \   00020E   EA           MOV       A,R2
   \   00020F   F0           MOVX      @DPTR,A
   \   000210   A3           INC       DPTR
   \   000211   EB           MOV       A,R3
   \   000212   12....       LCALL     ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   000215   7403         MOV       A,#0x3
   \   000217   12....       LCALL     ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   00021A   7422         MOV       A,#0x22
   \   00021C   12....       LCALL     ?XSTACK_DISP0_8
   \   00021F   E0           MOVX      A,@DPTR
   \   000220   C0E0         PUSH      A
   \   000222   12....       LCALL     ?Subroutine146 & 0xFFFF
   \                     ??CrossCallReturnLabel_246:
   \   000225   D0E0         POP       A
   \   000227   12....       LCALL     ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_46:
   \   00022A   E8           MOV       A,R0
   \   00022B   49           ORL       A,R1
   \   00022C   7098         JNZ       ??ZDO_ProcessMgmtLqiReq_17
   \   00022E   12....       LCALL     ?Subroutine127 & 0xFFFF
   1282                }
   1283              }
   1284            }
   \                     ??CrossCallReturnLabel_527:
   \   000231   8096         SJMP      ??CrossCallReturnLabel_365
   1285            else
   1286            {
   1287              numItems = 0;
   \                     ??ZDO_ProcessMgmtLqiReq_0:
   \   000233   75..00       MOV       ?V1,#0x0
   1288            }
   1289          
   1290            // Send response
   1291            ZDP_MgmtLqiRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZSuccess, maxItems,
   1292                            StartIndex, numItems, table, false );
   \                     ??ZDO_ProcessMgmtLqiReq_2:
   \   000236                ; Setup parameters for call to function ZDP_MgmtLqiRsp
   \   000236   75..00       MOV       ?V2,#0x0
   \   000239   78..         MOV       R0,#?V2
   \   00023B   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00023E   7403         MOV       A,#0x3
   \   000240   12....       LCALL     ?XSTACK_DISP0_8
   \   000243   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000246   78..         MOV       R0,#?V1
   \   000248   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00024B   E5..         MOV       A,?V7
   \   00024D   F5..         MOV       ?V1,A
   \   00024F   78..         MOV       R0,#?V1
   \   000251   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000254   7405         MOV       A,#0x5
   \   000256   12....       LCALL     ?XSTACK_DISP0_8
   \   000259   E0           MOVX      A,@DPTR
   \   00025A   FD           MOV       R5,A
   \   00025B   7C00         MOV       R4,#0x0
   \   00025D   7409         MOV       A,#0x9
   \   00025F   12....       LCALL     ?XSTACK_DISP0_8
   \   000262   12....       LCALL     ?Subroutine110 & 0xFFFF
   \                     ??CrossCallReturnLabel_174:
   \   000265   7409         MOV       A,#0x9
   \   000267   12....       LCALL     ?XSTACK_DISP0_8
   \   00026A   12....       LCALL     ?Subroutine76 & 0xFFFF
   \                     ??CrossCallReturnLabel_124:
   \   00026D   12....       LCALL     `??ZDP_MgmtLqiRsp::?relay`; Banked call to: ZDP_MgmtLqiRsp
   \   000270   7405         MOV       A,#0x5
   \   000272   12....       LCALL     ?DEALLOC_XSTACK8
   1293          
   1294            if ( table )
   \   000275   7402         MOV       A,#0x2
   \   000277   12....       LCALL     ?XSTACK_DISP0_8
   \   00027A   12....       LCALL     ??Subroutine239_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_493:
   \   00027D   600B         JZ        ??ZDO_ProcessMgmtLqiReq_19
   1295            {
   1296              osal_mem_free( table );
   \   00027F                ; Setup parameters for call to function osal_mem_free
   \   00027F   7402         MOV       A,#0x2
   \   000281   12....       LCALL     ?XSTACK_DISP0_8
   \   000284   12....       LCALL     ??Subroutine236_0 & 0xFFFF
   1297            }
   \                     ??CrossCallReturnLabel_458:
   \   000287   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   1298          }
   \                     ??ZDO_ProcessMgmtLqiReq_19:
   \   00028A   742A         MOV       A,#0x2a
   \   00028C   02....       LJMP      ?Subroutine7 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine146:
   \   000000   EE           MOV       A,R6
   \   000001   2419         ADD       A,#0x19
   \   000003   F582         MOV       DPL,A
   \   000005   E4           CLR       A
   \   000006   3F           ADDC      A,R7
   \   000007   F583         MOV       DPH,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine145:
   \   000000   12....       LCALL     ?Subroutine193 & 0xFFFF
   \                     ??CrossCallReturnLabel_317:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine193:
   \   000000   EE           MOV       A,R6
   \   000001   2418         ADD       A,#0x18
   \   000003   F582         MOV       DPL,A
   \   000005   E4           CLR       A
   \   000006   3F           ADDC      A,R7
   \   000007   F583         MOV       DPH,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine139:
   \   000000   7C08         MOV       R4,#0x8
   \   000002   7D00         MOV       R5,#0x0
   \   000004   79FF         MOV       R1,#-0x1
   \   000006                REQUIRE ??Subroutine219_0
   \   000006                ; // Fall through to label ??Subroutine219_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine219_0:
   \   000000   EE           MOV       A,R6
   \   000001   240A         ADD       A,#0xa
   \   000003   FA           MOV       R2,A
   \   000004   E4           CLR       A
   \   000005   3F           ADDC      A,R7
   \   000006   FB           MOV       R3,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine124:
   \   000000   EE           MOV       A,R6
   \   000001                REQUIRE ??Subroutine220_0
   \   000001                ; // Fall through to label ??Subroutine220_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine220_0:
   \   000000   2414         ADD       A,#0x14
   \   000002                REQUIRE ??Subroutine221_0
   \   000002                ; // Fall through to label ??Subroutine221_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine221_0:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003   3F           ADDC      A,R7
   \   000004   F583         MOV       DPH,A
   \   000006   7401         MOV       A,#0x1
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   12....       LCALL     ?Subroutine181 & 0xFFFF
   \                     ??CrossCallReturnLabel_551:
   \   000003   8E82         MOV       DPL,R6
   \   000005   8F83         MOV       DPH,R7
   \   000007   12....       LCALL     ?Subroutine159 & 0xFFFF
   \                     ??CrossCallReturnLabel_659:
   \   00000A                ; Setup parameters for call to function sAddrExtCpy
   \   00000A                ; Setup parameters for call to function sAddrExtCpy
   \   00000A   7C..         MOV       R4,#(_NIB + 53) & 0xff
   \   00000C   7D..         MOV       R5,#((_NIB + 53) >> 8) & 0xff
   \   00000E   EE           MOV       A,R6
   \   00000F   2402         ADD       A,#0x2
   \   000011   FA           MOV       R2,A
   \   000012   E4           CLR       A
   \   000013   3F           ADDC      A,R7
   \   000014   FB           MOV       R3,A
   \   000015   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   12....       LCALL     ?Subroutine154 & 0xFFFF
   \                     ??CrossCallReturnLabel_259:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   E0           MOVX      A,@DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine154:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   85..82       MOV       DPL,?V4
   \   000004   85..83       MOV       DPH,?V5
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   12....       LCALL     ?Subroutine192 & 0xFFFF
   \                     ??CrossCallReturnLabel_315:
   \   000004   F583         MOV       DPH,A
   \   000006   7402         MOV       A,#0x2
   \   000008   F0           MOVX      @DPTR,A
   \   000009   EE           MOV       A,R6
   \   00000A   2416         ADD       A,#0x16
   \   00000C   F582         MOV       DPL,A
   \   00000E   E4           CLR       A
   \   00000F   3F           ADDC      A,R7
   \   000010   F583         MOV       DPH,A
   \   000012   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   EE           MOV       A,R6
   \   000002   2417         ADD       A,#0x17
   \   000004   F582         MOV       DPL,A
   \   000006   E4           CLR       A
   \   000007   3F           ADDC      A,R7
   \   000008   F583         MOV       DPH,A
   \   00000A   7402         MOV       A,#0x2
   \   00000C   F0           MOVX      @DPTR,A
   \   00000D   12....       LCALL     ?Subroutine193 & 0xFFFF
   \                     ??CrossCallReturnLabel_316:
   \   000010   74FF         MOV       A,#-0x1
   \   000012   F0           MOVX      @DPTR,A
   \   000013   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine110:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   2402         ADD       A,#0x2
   \   000003   FA           MOV       R2,A
   \   000004   A3           INC       DPTR
   \   000005   E0           MOVX      A,@DPTR
   \   000006   3400         ADDC      A,#0x0
   \   000008   FB           MOV       R3,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine76:
   \   000000   12....       LCALL     ?Subroutine168 & 0xFFFF
   \                     ??CrossCallReturnLabel_282:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine55:
   \   000000   12....       LCALL     ?Subroutine172 & 0xFFFF
   \                     ??CrossCallReturnLabel_287:
   \   000003   12....       LCALL     ?Subroutine163 & 0xFFFF
   \                     ??CrossCallReturnLabel_405:
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine192:
   \   000000   EE           MOV       A,R6
   \   000001   2415         ADD       A,#0x15
   \   000003   F582         MOV       DPL,A
   \   000005   E4           CLR       A
   \   000006   3F           ADDC      A,R7
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine144:
   \   000000   EE           MOV       A,R6
   \   000001   2412         ADD       A,#0x12
   \   000003   F582         MOV       DPL,A
   \   000005   E4           CLR       A
   \   000006   3F           ADDC      A,R7
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine127:
   \   000000   EE           MOV       A,R6
   \   000001   2414         ADD       A,#0x14
   \   000003                REQUIRE ??Subroutine244_0
   \   000003                ; // Fall through to label ??Subroutine244_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine244_0:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003   3F           ADDC      A,R7
   \   000004   F583         MOV       DPH,A
   \   000006   E4           CLR       A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   12....       LCALL     ?Subroutine196 & 0xFFFF
   \                     ??CrossCallReturnLabel_322:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   12....       LCALL     ?Subroutine198 & 0xFFFF
   \                     ??CrossCallReturnLabel_327:
   \   000003   12....       LCALL     ?Subroutine181 & 0xFFFF
   \                     ??CrossCallReturnLabel_552:
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine198:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8882         MOV       DPL,R0
   \   000003   8983         MOV       DPH,R1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine159:
   \   000000   E8           MOV       A,R0
   \   000001                REQUIRE ??Subroutine268_0
   \   000001                ; // Fall through to label ??Subroutine268_0
   1299          
   1300          /*********************************************************************
   1301           * @fn          ZDO_ProcessMgmtNwkDiscReq
   1302           *
   1303           * @brief       This function handles parsing the incoming Management
   1304           *              Network Discover request and starts the request.
   1305           *
   1306           * @param       inMsg - incoming message (request)
   1307           *
   1308           * @return      none
   1309           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1310          void ZDO_ProcessMgmtNwkDiscReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtNwkDiscReq:
   1311          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 7
   \   000005   74F9         MOV       A,#-0x7
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   12....       LCALL     ?Subroutine122 & 0xFFFF
   1312            NLME_ScanFields_t scan;
   1313            uint8             index;
   1314            uint8             *msg;
   1315          
   1316            msg = inMsg->asdu;
   \                     ??CrossCallReturnLabel_429:
   \   00000D   35..         ADDC      A,?V1
   \   00000F   12....       LCALL     ?Subroutine92 & 0xFFFF
   1317            scan.channels = osal_build_uint32( msg, 4 );
   \                     ??CrossCallReturnLabel_154:
   \   000012   12....       LCALL     `??osal_build_uint32::?relay`; Banked call to: osal_build_uint32
   \   000015   EA           MOV       A,R2
   \   000016   F8           MOV       R0,A
   \   000017   EB           MOV       A,R3
   \   000018   F9           MOV       R1,A
   \   000019   EC           MOV       A,R4
   \   00001A   FA           MOV       R2,A
   \   00001B   ED           MOV       A,R5
   \   00001C   FB           MOV       R3,A
   \   00001D   85..82       MOV       DPL,?XSP + 0
   \   000020   85..83       MOV       DPH,?XSP + 1
   \   000023   12....       LCALL     ?XSTORE_R0123
   1318            msg += 4;
   1319            scan.duration = *msg++;
   \   000026   8E82         MOV       DPL,R6
   \   000028   8F83         MOV       DPH,R7
   \   00002A   A3           INC       DPTR
   \   00002B   A3           INC       DPTR
   \   00002C   A3           INC       DPTR
   \   00002D   A3           INC       DPTR
   \   00002E   E0           MOVX      A,@DPTR
   \   00002F   C0E0         PUSH      A
   \   000031   7404         MOV       A,#0x4
   \   000033   12....       LCALL     ?XSTACK_DISP0_8
   \   000036   D0E0         POP       A
   \   000038   12....       LCALL     ?Subroutine17 & 0xFFFF
   1320            index         = *msg;
   \                     ??CrossCallReturnLabel_15:
   \   00003B   F8           MOV       R0,A
   1321            scan.scanType = ZMAC_ACTIVE_SCAN;
   \   00003C   7405         MOV       A,#0x5
   \   00003E   12....       LCALL     ?XSTACK_DISP0_8
   \   000041   7401         MOV       A,#0x1
   \   000043   F0           MOVX      @DPTR,A
   1322            scan.scanApp  = NLME_DISC_SCAN;
   \   000044   7406         MOV       A,#0x6
   \   000046   12....       LCALL     ?XSTACK_DISP0_8
   \   000049   7401         MOV       A,#0x1
   \   00004B   F0           MOVX      @DPTR,A
   1323          
   1324            // Save off the information to be used for the response
   1325            zdappMgmtNwkDiscReqInProgress          = true;
   \   00004C   90....       MOV       DPTR,#zdappMgmtNwkDiscReqInProgress
   \   00004F   F0           MOVX      @DPTR,A
   1326            zdappMgmtNwkDiscRspAddr.addrMode       = Addr16Bit;
   \   000050   90....       MOV       DPTR,#zdappMgmtNwkDiscRspAddr + 8
   \   000053   04           INC       A
   \   000054   F0           MOVX      @DPTR,A
   1327            zdappMgmtNwkDiscRspAddr.addr.shortAddr = inMsg->srcAddr.addr.shortAddr;
   \   000055   85..82       MOV       DPL,?V0
   \   000058   85..83       MOV       DPH,?V1
   \   00005B   A3           INC       DPTR
   \   00005C   A3           INC       DPTR
   \   00005D   12....       LCALL     ??Subroutine236_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_459:
   \   000060   90....       MOV       DPTR,#zdappMgmtNwkDiscRspAddr
   \   000063   12....       LCALL     ??Subroutine224_0 & 0xFFFF
   1328            zdappMgmtNwkDiscStartIndex             = index;
   \                     ??CrossCallReturnLabel_392:
   \   000066   E8           MOV       A,R0
   \   000067   90....       MOV       DPTR,#zdappMgmtNwkDiscStartIndex
   \   00006A   F0           MOVX      @DPTR,A
   1329            zdappMgmtNwkDiscRspTransSeq            = inMsg->TransSeq;
   \   00006B   12....       LCALL     ?Subroutine129 & 0xFFFF
   \                     ??CrossCallReturnLabel_197:
   \   00006E   E0           MOVX      A,@DPTR
   \   00006F   90....       MOV       DPTR,#zdappMgmtNwkDiscRspTransSeq
   \   000072   F0           MOVX      @DPTR,A
   1330          
   1331            if ( NLME_NwkDiscReq2( &scan ) != ZSuccess )
   \   000073                ; Setup parameters for call to function NLME_NwkDiscReq2
   \   000073   AA..         MOV       R2,?XSP + 0
   \   000075   AB..         MOV       R3,?XSP + 1
   \   000077   12....       LCALL     `??NLME_NwkDiscReq2::?relay`; Banked call to: NLME_NwkDiscReq2
   \   00007A   E9           MOV       A,R1
   \   00007B   6003         JZ        ??ZDO_ProcessMgmtNwkDiscReq_0
   1332            {
   1333              NLME_NwkDiscTerm();
   \   00007D                ; Setup parameters for call to function NLME_NwkDiscTerm
   \   00007D   12....       LCALL     `??NLME_NwkDiscTerm::?relay`; Banked call to: NLME_NwkDiscTerm
   1334          
   1335              // zdappMgmtNwkDiscReqInProgress will be reset in the confirm callback
   1336            }
   1337          }
   \                     ??ZDO_ProcessMgmtNwkDiscReq_0:
   \   000080   7407         MOV       A,#0x7
   \   000082   02....       LJMP      ??Subroutine213_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine177:
   \   000000   F583         MOV       DPH,A
   \   000002                REQUIRE ??Subroutine229_0
   \   000002                ; // Fall through to label ??Subroutine229_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine122:
   \   000000   8A..         MOV       ?V0,R2
   \   000002   8B..         MOV       ?V1,R3
   \   000004                REQUIRE ??Subroutine230_0
   \   000004                ; // Fall through to label ??Subroutine230_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   12....       LCALL     ?Subroutine157 & 0xFFFF
   \                     ??CrossCallReturnLabel_265:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine129:
   \   000000   E5..         MOV       A,?V0
   \   000002   12....       LCALL     ?Subroutine187 & 0xFFFF
   \                     ??CrossCallReturnLabel_306:
   \   000005   12....       LCALL     ??Subroutine261_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_622:
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine187:
   \   000000   240F         ADD       A,#0xf
   \   000002   F582         MOV       DPL,A
   \   000004   E4           CLR       A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine199:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                ; Setup parameters for call to function osal_memcpy
   \   000001   8E82         MOV       DPL,R6
   \   000003   8F83         MOV       DPH,R7
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine157:
   \   000000   12....       LCALL     ?Subroutine199 & 0xFFFF
   \                     ??CrossCallReturnLabel_331:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine92:
   \   000000   12....       LCALL     ?Subroutine177 & 0xFFFF
   \                     ??CrossCallReturnLabel_427:
   \   000003                ; Setup parameters for call to function osal_build_uint32
   \   000003                ; Setup parameters for call to function osal_build_uint32
   \   000003   7904         MOV       R1,#0x4
   \   000005   EE           MOV       A,R6
   \   000006   FA           MOV       R2,A
   \   000007   EF           MOV       A,R7
   \   000008   FB           MOV       R3,A
   \   000009   22           RET
   1338          
   1339          #if defined ( ZDO_MGMT_NWKDISC_RESPONSE )
   1340          /*********************************************************************
   1341           * @fn          ZDO_FinishProcessingMgmtNwkDiscReq
   1342           *
   1343           * @brief       This function finishes the processing of the Management
   1344           *              Network Discover Request and generates the response.
   1345           *
   1346           *   Note:      This function will limit the number of items returned
   1347           *              to ZDO_MAX_NWKDISC_ITEMS items.
   1348           *
   1349           * @param       ResultCountSrcAddr - source of the request
   1350           * @param       msg - pointer to incoming message
   1351           * @param       SecurityUse -
   1352           *
   1353           * @return      none
   1354           */
   1355          void ZDO_FinishProcessingMgmtNwkDiscReq( void )
   1356          {
   1357            byte count, i, ResultCount = 0;
   1358            networkDesc_t *newDesc = NULL, *pList, *NetworkList;
   1359          
   1360            NetworkList = nwk_getNwkDescList();
   1361          
   1362            // Count the number of nwk descriptors in the list
   1363            pList = nwk_getNwkDescList();
   1364            while (pList)
   1365            {
   1366              ResultCount++;
   1367              pList = pList->nextDesc;
   1368            }
   1369          
   1370            if ( ZSTACK_ROUTER_BUILD )
   1371            {
   1372              // Look for my PanID.
   1373              pList = nwk_getNwkDescList();
   1374              while ( pList )
   1375              {
   1376                if ( pList->panId == _NIB.nwkPanId )
   1377                {
   1378                  break;
   1379                }
   1380          
   1381          
   1382                if ( !pList->nextDesc )
   1383                {
   1384                  break;
   1385                }
   1386                pList = pList->nextDesc;
   1387              }
   1388          
   1389          
   1390              // If my Pan not present (query to a star network ZC or an isolated ZR?),
   1391              // prepend it.
   1392              if ( !pList || (pList->panId != _NIB.nwkPanId) )
   1393              {
   1394                newDesc = (networkDesc_t *)osal_mem_alloc( sizeof( networkDesc_t ) );
   1395                if ( newDesc )
   1396                {
   1397                  byte pJoin;
   1398          
   1399                  newDesc->panId = _NIB.nwkPanId;
   1400                  newDesc->logicalChannel = _NIB.nwkLogicalChannel;
   1401                  newDesc->version = NLME_GetProtocolVersion();
   1402                  newDesc->stackProfile = zgStackProfile;
   1403                  
   1404                  //Extended PanID
   1405                  osal_cpyExtAddr( newDesc->extendedPANID, _NIB.extendedPANID);
   1406          
   1407                  ZMacGetReq( ZMacAssociationPermit, &pJoin );
   1408                  newDesc->chosenRouter = ((pJoin) ? ZDAppNwkAddr.addr.shortAddr :
   1409                                                     INVALID_NODE_ADDR);
   1410          
   1411                  newDesc->nextDesc = NetworkList;
   1412                  NetworkList = newDesc;
   1413                  ResultCount++;
   1414                }
   1415              }
   1416            }
   1417          
   1418            // Calc the count and apply a max count.
   1419            if ( zdappMgmtNwkDiscStartIndex > ResultCount )
   1420            {
   1421              count = 0;
   1422            }
   1423            else
   1424            {
   1425              count = ResultCount - zdappMgmtNwkDiscStartIndex;
   1426              if ( count > ZDO_MAX_NWKDISC_ITEMS )
   1427              {
   1428                count = ZDO_MAX_NWKDISC_ITEMS;
   1429              }
   1430          
   1431              // Move the list pointer up to the start index.
   1432              for ( i = 0; i < zdappMgmtNwkDiscStartIndex; i++ )
   1433              {
   1434                NetworkList = NetworkList->nextDesc;
   1435              }
   1436            }
   1437          
   1438            ZDP_MgmtNwkDiscRsp( zdappMgmtNwkDiscRspTransSeq,
   1439                               &zdappMgmtNwkDiscRspAddr, ZSuccess, ResultCount,
   1440                                zdappMgmtNwkDiscStartIndex,
   1441                                count,
   1442                                NetworkList,
   1443                                false );
   1444          
   1445            if ( ZSTACK_ROUTER_BUILD )
   1446            {
   1447              if ( newDesc != NULL )
   1448              {
   1449                osal_mem_free( newDesc );
   1450              }
   1451            }
   1452          
   1453            NLME_NwkDiscTerm();
   1454          }
   1455          #endif
   1456          
   1457          /*********************************************************************
   1458           * @fn          ZDO_ProcessMgmtRtgReq
   1459           *
   1460           * @brief       This function finishes the processing of the Management
   1461           *              Routing Request and generates the response.
   1462           *
   1463           *   Note:      This function will limit the number of items returned
   1464           *              to ZDO_MAX_RTG_ITEMS items.
   1465           *
   1466           * @param       inMsg - incoming message (request)
   1467           *
   1468           * @return      none
   1469           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1470          void ZDO_ProcessMgmtRtgReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtRtgReq:
   1471          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V6,R2
   \   00000C   8B..         MOV       ?V7,R3
   1472            byte x;
   1473            byte maxNumItems;
   1474            byte numItems = 0;
   \   00000E   7E00         MOV       R6,#0x0
   1475            uint8 *pBuf = NULL;
   \   000010   8E..         MOV       ?V4,R6
   \   000012   8E..         MOV       ?V5,R6
   1476            rtgItem_t *pList;
   1477            uint8 StartIndex = inMsg->asdu[0];
   \   000014   12....       LCALL     ??Subroutine230_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_432:
   \   000017   35..         ADDC      A,?V7
   \   000019   12....       LCALL     ?Subroutine80 & 0xFFFF
   \                     ??CrossCallReturnLabel_403:
   \   00001C   F5..         MOV       ?V2,A
   1478          
   1479            // Get the number of table items
   1480            NLME_GetRequest( nwkNumRoutingTableEntries, 0, &maxNumItems );
   \   00001E                ; Setup parameters for call to function NLME_GetRequest
   \   00001E   AC..         MOV       R4,?XSP + 0
   \   000020   AD..         MOV       R5,?XSP + 1
   \   000022   7A00         MOV       R2,#0x0
   \   000024   7B00         MOV       R3,#0x0
   \   000026   799D         MOV       R1,#-0x63
   \   000028   12....       LCALL     `??NLME_GetRequest::?relay`; Banked call to: NLME_GetRequest
   1481          
   1482            if ( maxNumItems > StartIndex )
   \   00002B   85..82       MOV       DPL,?XSP + 0
   \   00002E   85..83       MOV       DPH,?XSP + 1
   \   000031   E0           MOVX      A,@DPTR
   \   000032   F8           MOV       R0,A
   \   000033   E5..         MOV       A,?V2
   \   000035   C3           CLR       C
   \   000036   98           SUBB      A,R0
   \   000037   4003         JC        $+5
   \   000039   02....       LJMP      ??ZDO_ProcessMgmtRtgReq_0 & 0xFFFF
   1483            {
   1484              numItems = maxNumItems - StartIndex;    // Start at the passed in index
   \   00003C   E0           MOVX      A,@DPTR
   \   00003D   C3           CLR       C
   \   00003E   95..         SUBB      A,?V2
   \   000040   FE           MOV       R6,A
   1485          
   1486              // limit the size of the list
   1487              if ( numItems > ZDO_MAX_RTG_ITEMS )
   \   000041   C3           CLR       C
   \   000042   940B         SUBB      A,#0xb
   \   000044   4002         JC        ??ZDO_ProcessMgmtRtgReq_1
   1488              {
   1489                numItems = ZDO_MAX_RTG_ITEMS;
   \   000046   7E0A         MOV       R6,#0xa
   1490              }
   1491          
   1492              // Allocate the memory to build the table
   1493              pBuf = osal_mem_alloc( (short)(sizeof( rtgItem_t ) * numItems) );
   \                     ??ZDO_ProcessMgmtRtgReq_1:
   \   000048                ; Setup parameters for call to function osal_mem_alloc
   \   000048   EE           MOV       A,R6
   \   000049   75F007       MOV       B,#0x7
   \   00004C   A4           MUL       AB
   \   00004D   FA           MOV       R2,A
   \   00004E   ABF0         MOV       R3,B
   \   000050   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000053   8A..         MOV       ?V0,R2
   \   000055   8B..         MOV       ?V1,R3
   \   000057   8A..         MOV       ?V4,R2
   \   000059   8B..         MOV       ?V5,R3
   1494          
   1495              if ( pBuf != NULL )
   \   00005B   EA           MOV       A,R2
   \   00005C   45..         ORL       A,?V5
   \   00005E   6076         JZ        ??ZDO_ProcessMgmtRtgReq_2
   1496              {
   1497                // Convert buffer to list
   1498                pList = (rtgItem_t *)pBuf;
   1499          
   1500                // Loop through items and build list
   1501                for ( x = 0; x < numItems; x++ )
   \   000060   7F00         MOV       R7,#0x0
   \   000062   8027         SJMP      ??ZDO_ProcessMgmtRtgReq_3
   1502                {
   1503                  NLME_GetRequest( nwkRoutingTable, (uint16)(x + StartIndex), (void*)pList );
   1504          
   1505                  // Remap the status to the RoutingTableList Record Format defined in the ZigBee spec
   1506                  switch( pList->status )
   1507                  {
   1508                    case RT_ACTIVE:
   1509                      pList->status = ZDO_MGMT_RTG_ENTRY_ACTIVE;
   1510                      break;
   1511          
   1512                    case RT_DISC:
   1513                      pList->status = ZDO_MGMT_RTG_ENTRY_DISCOVERY_UNDERWAY;
   1514                      break;
   1515          
   1516                    case RT_LINK_FAIL:
   1517                      pList->status = ZDO_MGMT_RTG_ENTRY_DISCOVERY_FAILED;
   \                     ??ZDO_ProcessMgmtRtgReq_4:
   \   000064   85..82       MOV       DPL,?V0
   \   000067   85..83       MOV       DPH,?V1
   \   00006A   A3           INC       DPTR
   \   00006B   A3           INC       DPTR
   \   00006C   A3           INC       DPTR
   \   00006D   A3           INC       DPTR
   \   00006E   A3           INC       DPTR
   \   00006F   7402         MOV       A,#0x2
   \   000071   F0           MOVX      @DPTR,A
   1518          
   1519                    case RT_INIT:
   1520                    case RT_REPAIR:
   1521                    default:
   1522                      pList->status = ZDO_MGMT_RTG_ENTRY_INACTIVE;
   \                     ??ZDO_ProcessMgmtRtgReq_5:
   \   000072   85..82       MOV       DPL,?V0
   \   000075   85..83       MOV       DPH,?V1
   \   000078   A3           INC       DPTR
   \   000079   A3           INC       DPTR
   \   00007A   A3           INC       DPTR
   \   00007B   A3           INC       DPTR
   \   00007C   A3           INC       DPTR
   \   00007D   7403         MOV       A,#0x3
   \                     ??ZDO_ProcessMgmtRtgReq_6:
   \   00007F   F0           MOVX      @DPTR,A
   1523                      break;
   1524                  }
   1525          
   1526                  // Increment pointer to next record
   1527                  pList++;
   \   000080   E5..         MOV       A,?V0
   \   000082   2407         ADD       A,#0x7
   \   000084   F5..         MOV       ?V0,A
   \   000086   5002         JNC       ??ZDO_ProcessMgmtRtgReq_7
   \   000088   05..         INC       ?V1
   \                     ??ZDO_ProcessMgmtRtgReq_7:
   \   00008A   0F           INC       R7
   \                     ??ZDO_ProcessMgmtRtgReq_3:
   \   00008B   EF           MOV       A,R7
   \   00008C   C3           CLR       C
   \   00008D   9E           SUBB      A,R6
   \   00008E   5048         JNC       ??ZDO_ProcessMgmtRtgReq_0
   \   000090                ; Setup parameters for call to function NLME_GetRequest
   \   000090   AC..         MOV       R4,?V0
   \   000092   AD..         MOV       R5,?V1
   \   000094   EF           MOV       A,R7
   \   000095   A8..         MOV       R0,?V2
   \   000097   28           ADD       A,R0
   \   000098   FA           MOV       R2,A
   \   000099   E4           CLR       A
   \   00009A   3400         ADDC      A,#0x0
   \   00009C   FB           MOV       R3,A
   \   00009D   798B         MOV       R1,#-0x75
   \   00009F   12....       LCALL     `??NLME_GetRequest::?relay`; Banked call to: NLME_GetRequest
   \   0000A2   85..82       MOV       DPL,?V0
   \   0000A5   85..83       MOV       DPH,?V1
   \   0000A8   A3           INC       DPTR
   \   0000A9   A3           INC       DPTR
   \   0000AA   A3           INC       DPTR
   \   0000AB   A3           INC       DPTR
   \   0000AC   A3           INC       DPTR
   \   0000AD   E0           MOVX      A,@DPTR
   \   0000AE   14           DEC       A
   \   0000AF   6008         JZ        ??ZDO_ProcessMgmtRtgReq_8
   \   0000B1   14           DEC       A
   \   0000B2   6013         JZ        ??ZDO_ProcessMgmtRtgReq_9
   \   0000B4   14           DEC       A
   \   0000B5   60AD         JZ        ??ZDO_ProcessMgmtRtgReq_4
   \   0000B7   80B9         SJMP      ??ZDO_ProcessMgmtRtgReq_5
   \                     ??ZDO_ProcessMgmtRtgReq_8:
   \   0000B9   85..82       MOV       DPL,?V0
   \   0000BC   85..83       MOV       DPH,?V1
   \   0000BF   A3           INC       DPTR
   \   0000C0   A3           INC       DPTR
   \   0000C1   A3           INC       DPTR
   \   0000C2   A3           INC       DPTR
   \   0000C3   A3           INC       DPTR
   \   0000C4   E4           CLR       A
   \   0000C5   80B8         SJMP      ??ZDO_ProcessMgmtRtgReq_6
   \                     ??ZDO_ProcessMgmtRtgReq_9:
   \   0000C7   85..82       MOV       DPL,?V0
   \   0000CA   85..83       MOV       DPH,?V1
   \   0000CD   A3           INC       DPTR
   \   0000CE   A3           INC       DPTR
   \   0000CF   A3           INC       DPTR
   \   0000D0   A3           INC       DPTR
   \   0000D1   A3           INC       DPTR
   \   0000D2   7401         MOV       A,#0x1
   \   0000D4   80A9         SJMP      ??ZDO_ProcessMgmtRtgReq_6
   1528                }
   1529              }
   1530              else
   1531              {
   1532                numItems = 0;
   \                     ??ZDO_ProcessMgmtRtgReq_2:
   \   0000D6   7E00         MOV       R6,#0x0
   1533              }
   1534            }
   1535          
   1536            // Send response
   1537            ZDP_MgmtRtgRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZSuccess, maxNumItems, StartIndex, numItems,
   1538                                  (rtgItem_t *)pBuf, false );
   \                     ??ZDO_ProcessMgmtRtgReq_0:
   \   0000D8                ; Setup parameters for call to function ZDP_MgmtRtgRsp
   \   0000D8   75..00       MOV       ?V0,#0x0
   \   0000DB   78..         MOV       R0,#?V0
   \   0000DD   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000E0   78..         MOV       R0,#?V4
   \   0000E2   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000E5   EE           MOV       A,R6
   \   0000E6   F5..         MOV       ?V0,A
   \   0000E8   78..         MOV       R0,#?V0
   \   0000EA   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000ED   E5..         MOV       A,?V2
   \   0000EF   F5..         MOV       ?V0,A
   \   0000F1   78..         MOV       R0,#?V0
   \   0000F3   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000F6   7405         MOV       A,#0x5
   \   0000F8   12....       LCALL     ?XSTACK_DISP0_8
   \   0000FB   E0           MOVX      A,@DPTR
   \   0000FC   FD           MOV       R5,A
   \   0000FD   7C00         MOV       R4,#0x0
   \   0000FF   E5..         MOV       A,?V6
   \   000101   2402         ADD       A,#0x2
   \   000103   FA           MOV       R2,A
   \   000104   E4           CLR       A
   \   000105   35..         ADDC      A,?V7
   \   000107   FB           MOV       R3,A
   \   000108   E5..         MOV       A,?V6
   \   00010A   12....       LCALL     ?Subroutine187 & 0xFFFF
   \                     ??CrossCallReturnLabel_303:
   \   00010D   35..         ADDC      A,?V7
   \   00010F   F583         MOV       DPH,A
   \   000111   E0           MOVX      A,@DPTR
   \   000112   F9           MOV       R1,A
   \   000113   12....       LCALL     `??ZDP_MgmtRtgRsp::?relay`; Banked call to: ZDP_MgmtRtgRsp
   \   000116   7405         MOV       A,#0x5
   \   000118   12....       LCALL     ?DEALLOC_XSTACK8
   1539          
   1540            if ( pBuf )
   \   00011B   E5..         MOV       A,?V4
   \   00011D   45..         ORL       A,?V5
   \   00011F   6007         JZ        ??ZDO_ProcessMgmtRtgReq_10
   1541            {
   1542              osal_mem_free( pBuf );
   \   000121                ; Setup parameters for call to function osal_mem_free
   \   000121   AA..         MOV       R2,?V4
   \   000123   AB..         MOV       R3,?V5
   \   000125   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   1543            }
   1544          }
   \                     ??ZDO_ProcessMgmtRtgReq_10:
   \   000128   7401         MOV       A,#0x1
   \   00012A                REQUIRE ?Subroutine7
   \   00012A                ; // Fall through to label ?Subroutine7

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine80:
   \   000000   F583         MOV       DPH,A
   \   000002                REQUIRE ??Subroutine226_0
   \   000002                ; // Fall through to label ??Subroutine226_0
   1545          
   1546          /*********************************************************************
   1547           * @fn          ZDO_ProcessMgmtBindReq
   1548           *
   1549           * @brief       This function finishes the processing of the Management
   1550           *              Bind Request and generates the response.
   1551           *
   1552           *   Note:      This function will limit the number of items returned
   1553           *              to ZDO_MAX_BIND_ITEMS items.
   1554           *
   1555           * @param       inMsg - incoming message (request)
   1556           *
   1557           * @return      none
   1558           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1559          void ZDO_ProcessMgmtBindReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtBindReq:
   1560          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV       A,#-0x4
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   7402         MOV       A,#0x2
   \   00000C   12....       LCALL     ?XSTACK_DISP0_8
   \   00000F   12....       LCALL     ??Subroutine224_0 & 0xFFFF
   1561          #if defined ( REFLECTOR )
   1562            byte x;
   1563            uint16 maxNumItems;
   1564            uint16 numItems;
   1565            uint8 *pBuf = NULL;
   \                     ??CrossCallReturnLabel_393:
   \   000012   75..00       MOV       ?V4,#0x0
   \   000015   75..00       MOV       ?V5,#0x0
   1566            apsBindingItem_t *pList;
   1567            uint8 StartIndex = inMsg->asdu[0];
   \   000018   7402         MOV       A,#0x2
   \   00001A   12....       LCALL     ?XSTACK_DISP0_8
   \   00001D   12....       LCALL     ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_84:
   \   000020   F5..         MOV       ?V2,A
   1568            uint8 status;
   1569          
   1570            // Get the number of table items
   1571            APSME_GetRequest( apsNumBindingTableEntries, 0, (byte*)(&maxNumItems) );
   \   000022                ; Setup parameters for call to function APSME_GetRequest
   \   000022   AC..         MOV       R4,?XSP + 0
   \   000024   AD..         MOV       R5,?XSP + 1
   \   000026   7A00         MOV       R2,#0x0
   \   000028   7B00         MOV       R3,#0x0
   \   00002A   79A3         MOV       R1,#-0x5d
   \   00002C   12....       LCALL     `??APSME_GetRequest::?relay`; Banked call to: APSME_GetRequest
   1572          
   1573            if ( maxNumItems > StartIndex )
   \   00002F   85..82       MOV       DPL,?XSP + 0
   \   000032   85..83       MOV       DPH,?XSP + 1
   \   000035   12....       LCALL     ??Subroutine251_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_541:
   \   000038   C3           CLR       C
   \   000039   E5..         MOV       A,?V2
   \   00003B   98           SUBB      A,R0
   \   00003C   E4           CLR       A
   \   00003D   99           SUBB      A,R1
   \   00003E   507A         JNC       ??ZDO_ProcessMgmtBindReq_0
   1574            {
   1575              numItems = maxNumItems - StartIndex;    // Start at the passed in index
   \   000040   85..82       MOV       DPL,?XSP + 0
   \   000043   85..83       MOV       DPH,?XSP + 1
   \   000046   A8..         MOV       R0,?V2
   \   000048   E0           MOVX      A,@DPTR
   \   000049   C3           CLR       C
   \   00004A   98           SUBB      A,R0
   \   00004B   FE           MOV       R6,A
   \   00004C   A3           INC       DPTR
   \   00004D   E0           MOVX      A,@DPTR
   \   00004E   9400         SUBB      A,#0x0
   \   000050   FF           MOV       R7,A
   1576            }
   1577            else
   1578            {
   1579              numItems = 0;
   1580            }
   1581          
   1582            // limit the size of the list
   1583            if ( numItems > ZDO_MAX_BIND_ITEMS )
   \   000051   C3           CLR       C
   \   000052   EE           MOV       A,R6
   \   000053   9404         SUBB      A,#0x4
   \   000055   EF           MOV       A,R7
   \   000056   9400         SUBB      A,#0x0
   \   000058   4006         JC        ??ZDO_ProcessMgmtBindReq_1
   1584            {
   1585              numItems = ZDO_MAX_BIND_ITEMS;
   \   00005A   7E03         MOV       R6,#0x3
   \   00005C   7F00         MOV       R7,#0x0
   \   00005E   8004         SJMP      ??ZDO_ProcessMgmtBindReq_2
   1586            }
   1587          
   1588            // Allocate the memory to build the table
   1589            if ( numItems && (pBuf = osal_mem_alloc( sizeof( apsBindingItem_t ) * numItems )) )
   \                     ??ZDO_ProcessMgmtBindReq_1:
   \   000060   EE           MOV       A,R6
   \   000061   4F           ORL       A,R7
   \   000062   6056         JZ        ??ZDO_ProcessMgmtBindReq_0
   \                     ??ZDO_ProcessMgmtBindReq_2:
   \   000064                ; Setup parameters for call to function osal_mem_alloc
   \   000064   EE           MOV       A,R6
   \   000065   FA           MOV       R2,A
   \   000066   EF           MOV       A,R7
   \   000067   FB           MOV       R3,A
   \   000068   EA           MOV       A,R2
   \   000069   75F015       MOV       B,#0x15
   \   00006C   A4           MUL       AB
   \   00006D   FA           MOV       R2,A
   \   00006E   A8F0         MOV       R0,B
   \   000070   75F015       MOV       B,#0x15
   \   000073   EB           MOV       A,R3
   \   000074   A4           MUL       AB
   \   000075   28           ADD       A,R0
   \   000076   FB           MOV       R3,A
   \   000077   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00007A   8A..         MOV       ?V4,R2
   \   00007C   8B..         MOV       ?V5,R3
   \   00007E   EA           MOV       A,R2
   \   00007F   45..         ORL       A,?V5
   \   000081   6037         JZ        ??ZDO_ProcessMgmtBindReq_0
   1590            {
   1591              status = ZSuccess;
   \   000083   75..00       MOV       ?V1,#0x0
   1592          
   1593              // Convert buffer to list
   1594              pList = (apsBindingItem_t *)pBuf;
   \   000086   8A..         MOV       ?V6,R2
   \   000088   8B..         MOV       ?V7,R3
   1595          
   1596              // Loop through items and build list
   1597              for ( x = 0; x < numItems; x++ )
   \   00008A   75..00       MOV       ?V0,#0x0
   \   00008D   801F         SJMP      ??ZDO_ProcessMgmtBindReq_3
   1598              {
   1599                APSME_GetRequest( apsBindingTable, (x + StartIndex), (void*)pList );
   \                     ??ZDO_ProcessMgmtBindReq_4:
   \   00008F                ; Setup parameters for call to function APSME_GetRequest
   \   00008F   AC..         MOV       R4,?V6
   \   000091   AD..         MOV       R5,?V7
   \   000093   A8..         MOV       R0,?V2
   \   000095   E5..         MOV       A,?V0
   \   000097   28           ADD       A,R0
   \   000098   FA           MOV       R2,A
   \   000099   E4           CLR       A
   \   00009A   3400         ADDC      A,#0x0
   \   00009C   FB           MOV       R3,A
   \   00009D   79A2         MOV       R1,#-0x5e
   \   00009F   12....       LCALL     `??APSME_GetRequest::?relay`; Banked call to: APSME_GetRequest
   1600                pList++;
   \   0000A2   E5..         MOV       A,?V6
   \   0000A4   2415         ADD       A,#0x15
   \   0000A6   F5..         MOV       ?V6,A
   \   0000A8   5002         JNC       ??ZDO_ProcessMgmtBindReq_5
   \   0000AA   05..         INC       ?V7
   1601              }
   \                     ??ZDO_ProcessMgmtBindReq_5:
   \   0000AC   05..         INC       ?V0
   \                     ??ZDO_ProcessMgmtBindReq_3:
   \   0000AE   C3           CLR       C
   \   0000AF   E5..         MOV       A,?V0
   \   0000B1   9E           SUBB      A,R6
   \   0000B2   E4           CLR       A
   \   0000B3   9F           SUBB      A,R7
   \   0000B4   40D9         JC        ??ZDO_ProcessMgmtBindReq_4
   \   0000B6   EE           MOV       A,R6
   \   0000B7   F9           MOV       R1,A
   \   0000B8   8005         SJMP      ??ZDO_ProcessMgmtBindReq_6
   1602          
   1603            }
   1604            else
   1605            {
   1606              status = ZDP_NOT_PERMITTED;
   \                     ??ZDO_ProcessMgmtBindReq_0:
   \   0000BA   75..8B       MOV       ?V1,#-0x75
   1607              numItems = 0;
   \   0000BD   7900         MOV       R1,#0x0
   1608            }
   1609          
   1610            // Send response
   1611            ZDP_MgmtBindRsp( inMsg->TransSeq, &(inMsg->srcAddr), status, (byte)maxNumItems, StartIndex,
   1612                             (byte)numItems, (apsBindingItem_t *)pBuf, false );
   \                     ??ZDO_ProcessMgmtBindReq_6:
   \   0000BF                ; Setup parameters for call to function ZDP_MgmtBindRsp
   \   0000BF   75..00       MOV       ?V0,#0x0
   \   0000C2   78..         MOV       R0,#?V0
   \   0000C4   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000C7   78..         MOV       R0,#?V4
   \   0000C9   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000CC   E9           MOV       A,R1
   \   0000CD   F5..         MOV       ?V0,A
   \   0000CF   78..         MOV       R0,#?V0
   \   0000D1   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000D4   E5..         MOV       A,?V2
   \   0000D6   F5..         MOV       ?V0,A
   \   0000D8   78..         MOV       R0,#?V0
   \   0000DA   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000DD   7405         MOV       A,#0x5
   \   0000DF   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E2   E0           MOVX      A,@DPTR
   \   0000E3   FD           MOV       R5,A
   \   0000E4   AC..         MOV       R4,?V1
   \   0000E6   7407         MOV       A,#0x7
   \   0000E8   12....       LCALL     ?XSTACK_DISP0_8
   \   0000EB   12....       LCALL     ?Subroutine110 & 0xFFFF
   \                     ??CrossCallReturnLabel_175:
   \   0000EE   7407         MOV       A,#0x7
   \   0000F0   12....       LCALL     ?XSTACK_DISP0_8
   \   0000F3   12....       LCALL     ?Subroutine76 & 0xFFFF
   \                     ??CrossCallReturnLabel_125:
   \   0000F6   12....       LCALL     `??ZDP_MgmtBindRsp::?relay`; Banked call to: ZDP_MgmtBindRsp
   \   0000F9   7405         MOV       A,#0x5
   \   0000FB   12....       LCALL     ?DEALLOC_XSTACK8
   1613          
   1614            if ( pBuf )
   \   0000FE   E5..         MOV       A,?V4
   \   000100   45..         ORL       A,?V5
   \   000102   6007         JZ        ??ZDO_ProcessMgmtBindReq_7
   1615            {
   1616              osal_mem_free( pBuf );
   \   000104                ; Setup parameters for call to function osal_mem_free
   \   000104   AA..         MOV       R2,?V4
   \   000106   AB..         MOV       R3,?V5
   \   000108   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   1617            }
   1618          #else
   1619            (void)inMsg;
   1620          #endif
   1621          }
   \                     ??ZDO_ProcessMgmtBindReq_7:
   \   00010B   7404         MOV       A,#0x4
   \   00010D   02....       LJMP      ?Subroutine7 & 0xFFFF
   1622          
   1623          /*********************************************************************
   1624           * @fn          ZDO_ProcessMgmtDirectJoinReq
   1625           *
   1626           * @brief       This function finishes the processing of the Management
   1627           *              Direct Join Request and generates the response.
   1628           *
   1629           * @param       inMsg - incoming message (request)
   1630           *
   1631           * @return      none
   1632           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1633          void ZDO_ProcessMgmtDirectJoinReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtDirectJoinReq:
   1634          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   12....       LCALL     ?Subroutine121 & 0xFFFF
   1635            uint8 *deviceAddr;
   1636            uint8 capInfo;
   1637            uint8 stat;
   1638          
   1639            // Parse the message
   1640            deviceAddr = inMsg->asdu;
   1641            capInfo = inMsg->asdu[Z_EXTADDR_LEN];
   1642          
   1643            stat = (byte) NLME_DirectJoinRequest( deviceAddr, capInfo );
   \                     ??CrossCallReturnLabel_416:
   \   00000D   12....       LCALL     ?Subroutine107 & 0xFFFF
   \                     ??CrossCallReturnLabel_173:
   \   000010   A3           INC       DPTR
   \   000011   A3           INC       DPTR
   \   000012   A3           INC       DPTR
   \   000013   A3           INC       DPTR
   \   000014   A3           INC       DPTR
   \   000015   A3           INC       DPTR
   \   000016   A3           INC       DPTR
   \   000017   A3           INC       DPTR
   \   000018   E0           MOVX      A,@DPTR
   \   000019   F9           MOV       R1,A
   \   00001A   12....       LCALL     `??NLME_DirectJoinRequest::?relay`; Banked call to: NLME_DirectJoinRequest
   \   00001D   E9           MOV       A,R1
   \   00001E   85..82       MOV       DPL,?XSP + 0
   \   000021   85..83       MOV       DPH,?XSP + 1
   \   000024   F0           MOVX      @DPTR,A
   1644          
   1645            ZDP_MgmtDirectJoinRsp( inMsg->TransSeq, &(inMsg->srcAddr), stat, false );
   \   000025                ; Setup parameters for call to function ZDP_SendData
   \   000025   75..00       MOV       ?V0,#0x0
   \   000028   78..         MOV       R0,#?V0
   \   00002A   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00002D   7401         MOV       A,#0x1
   \   00002F   12....       LCALL     ?XSTACK_DISP100_8
   \   000032   88..         MOV       ?V0,R0
   \   000034   89..         MOV       ?V1,R1
   \   000036   78..         MOV       R0,#?V0
   \   000038   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003B   75..35       MOV       ?V0,#0x35
   \   00003E   75..80       MOV       ?V1,#-0x80
   \   000041   78..         MOV       R0,#?V0
   \   000043   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000046   12....       LCALL     ?Subroutine126 & 0xFFFF
   \                     ??CrossCallReturnLabel_193:
   \   000049   12....       LCALL     `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   00004C   7405         MOV       A,#0x5
   \   00004E   12....       LCALL     ?DEALLOC_XSTACK8
   1646          }
   \   000051                REQUIRE ?Subroutine8
   \   000051                ; // Fall through to label ?Subroutine8

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   7401         MOV       A,#0x1
   \   000002   02....       LJMP      ??Subroutine213_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine121:
   \   000000   EA           MOV       A,R2
   \   000001   FE           MOV       R6,A
   \   000002   EB           MOV       A,R3
   \   000003   FF           MOV       R7,A
   \   000004                ; Setup parameters for call to function NLME_PermitJoiningRequest
   \   000004                REQUIRE ??Subroutine227_0
   \   000004                ; // Fall through to label ??Subroutine227_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine126:
   \   000000   7901         MOV       R1,#0x1
   \   000002   EE           MOV       A,R6
   \   000003   2402         ADD       A,#0x2
   \   000005   FC           MOV       R4,A
   \   000006   E4           CLR       A
   \   000007   3F           ADDC      A,R7
   \   000008   FD           MOV       R5,A
   \   000009   EE           MOV       A,R6
   \   00000A   240F         ADD       A,#0xf
   \   00000C   FA           MOV       R2,A
   \   00000D   E4           CLR       A
   \   00000E   3F           ADDC      A,R7
   \   00000F   FB           MOV       R3,A
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine242_0:
   \   000000   F583         MOV       DPH,A
   \   000002                REQUIRE ??Subroutine243_0
   \   000002                ; // Fall through to label ??Subroutine243_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine107:
   \   000000   12....       LCALL     ??Subroutine242_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_517:
   \   000003                ; Setup parameters for call to function NLME_DirectJoinRequest
   \   000003   8A82         MOV       DPL,R2
   \   000005   8B83         MOV       DPH,R3
   \   000007   22           RET
   1647          
   1648          /*********************************************************************
   1649           * @fn          ZDO_ProcessMgmtLeaveReq
   1650           *
   1651           * @brief       This function processes a Management Leave Request
   1652           *              and generates the response.
   1653           *
   1654           * @param       inMsg - incoming message (request)
   1655           *
   1656           * @return      none
   1657           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1658          void ZDO_ProcessMgmtLeaveReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtLeaveReq:
   1659          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 6
   \   000005   74FA         MOV       A,#-0x6
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   12....       LCALL     ?Subroutine122 & 0xFFFF
   1660            NLME_LeaveReq_t req;
   1661            ZStatus_t       status;
   1662            uint8           option;
   1663            uint8 *msg = inMsg->asdu;
   \                     ??CrossCallReturnLabel_430:
   \   00000D   35..         ADDC      A,?V1
   \   00000F   12....       LCALL     ?Subroutine102 & 0xFFFF
   1664          
   1665            if ( ( AddrMgrExtAddrValid( msg ) == FALSE                 ) ||
   1666                 ( osal_ExtAddrEqual( msg, NLME_GetExtAddr() ) == TRUE )    )
   \                     ??CrossCallReturnLabel_421:
   \   000012   FA           MOV       R2,A
   \   000013   EF           MOV       A,R7
   \   000014   FB           MOV       R3,A
   \   000015   12....       LCALL     `??AddrMgrExtAddrValid::?relay`; Banked call to: AddrMgrExtAddrValid
   \   000018   E9           MOV       A,R1
   \   000019   6017         JZ        ??ZDO_ProcessMgmtLeaveReq_0
   \   00001B                ; Setup parameters for call to function NLME_GetExtAddr
   \   00001B   12....       LCALL     `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
   \   00001E   8A..         MOV       ?V2,R2
   \   000020   8B..         MOV       ?V3,R3
   \   000022   AC..         MOV       R4,?V2
   \   000024   AD..         MOV       R5,?V3
   \   000026                ; Setup parameters for call to function sAddrExtCmp
   \   000026   EE           MOV       A,R6
   \   000027   FA           MOV       R2,A
   \   000028   EF           MOV       A,R7
   \   000029   FB           MOV       R3,A
   \   00002A   12....       LCALL     `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   00002D   E9           MOV       A,R1
   \   00002E   6401         XRL       A,#0x1
   \   000030   700A         JNZ       ??ZDO_ProcessMgmtLeaveReq_1
   1667            {
   1668              // Remove this device
   1669              req.extAddr = NULL;
   \                     ??ZDO_ProcessMgmtLeaveReq_0:
   \   000032   7401         MOV       A,#0x1
   \   000034   12....       LCALL     ?XSTACK_DISP0_8
   \   000037   E4           CLR       A
   \   000038   F0           MOVX      @DPTR,A
   \   000039   A3           INC       DPTR
   \   00003A   8009         SJMP      ??ZDO_ProcessMgmtLeaveReq_2
   1670            }
   1671            else
   1672            {
   1673              // Remove child device
   1674              req.extAddr = msg;
   \                     ??ZDO_ProcessMgmtLeaveReq_1:
   \   00003C   7401         MOV       A,#0x1
   \   00003E   12....       LCALL     ?XSTACK_DISP0_8
   \   000041   EE           MOV       A,R6
   \   000042   F0           MOVX      @DPTR,A
   \   000043   A3           INC       DPTR
   \   000044   EF           MOV       A,R7
   1675            }
   \                     ??ZDO_ProcessMgmtLeaveReq_2:
   \   000045   12....       LCALL     ?Subroutine28 & 0xFFFF
   1676          
   1677            option = msg[Z_EXTADDR_LEN];
   \                     ??CrossCallReturnLabel_36:
   \   000048   F8           MOV       R0,A
   1678            if ( option & ZDP_MGMT_LEAVE_REQ_RC )
   \   000049   A2E6         MOV       C,0xE0 /* A   */.6
   \   00004B   5008         JNC       ??ZDO_ProcessMgmtLeaveReq_3
   1679            {
   1680              req.removeChildren = TRUE;
   \   00004D   7403         MOV       A,#0x3
   \   00004F   12....       LCALL     ?XSTACK_DISP0_8
   \   000052   7401         MOV       A,#0x1
   \   000054   F0           MOVX      @DPTR,A
   1681            }
   1682          
   1683            if ( option & ZDP_MGMT_LEAVE_REQ_REJOIN )
   \                     ??ZDO_ProcessMgmtLeaveReq_3:
   \   000055   E8           MOV       A,R0
   \   000056   A2E7         MOV       C,0xE0 /* A   */.7
   \   000058   5008         JNC       ??ZDO_ProcessMgmtLeaveReq_4
   1684            {
   1685               req.rejoin = TRUE;
   \   00005A   7404         MOV       A,#0x4
   \   00005C   12....       LCALL     ?XSTACK_DISP0_8
   \   00005F   7401         MOV       A,#0x1
   \   000061   F0           MOVX      @DPTR,A
   1686            }
   1687          
   1688            req.silent = FALSE;
   \                     ??ZDO_ProcessMgmtLeaveReq_4:
   \   000062   7405         MOV       A,#0x5
   \   000064   12....       LCALL     ?XSTACK_DISP0_8
   \   000067   E4           CLR       A
   \   000068   F0           MOVX      @DPTR,A
   1689          
   1690            status = NLME_LeaveReq( &req );
   \   000069                ; Setup parameters for call to function NLME_LeaveReq
   \   000069   04           INC       A
   \   00006A   12....       LCALL     ?XSTACK_DISP101_8
   \   00006D   12....       LCALL     `??NLME_LeaveReq::?relay`; Banked call to: NLME_LeaveReq
   \   000070   E9           MOV       A,R1
   \   000071   85..82       MOV       DPL,?XSP + 0
   \   000074   85..83       MOV       DPH,?XSP + 1
   \   000077   F0           MOVX      @DPTR,A
   1691          
   1692            ZDP_MgmtLeaveRsp( inMsg->TransSeq, &(inMsg->srcAddr), status, FALSE );
   \   000078                ; Setup parameters for call to function ZDP_SendData
   \   000078   75..00       MOV       ?V2,#0x0
   \   00007B   78..         MOV       R0,#?V2
   \   00007D   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000080   7401         MOV       A,#0x1
   \   000082   12....       LCALL     ?XSTACK_DISP100_8
   \   000085   88..         MOV       ?V2,R0
   \   000087   89..         MOV       ?V3,R1
   \   000089   78..         MOV       R0,#?V2
   \   00008B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00008E   75..34       MOV       ?V2,#0x34
   \   000091   75..80       MOV       ?V3,#-0x80
   \   000094   78..         MOV       R0,#?V2
   \   000096   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000099   12....       LCALL     ?Subroutine128 & 0xFFFF
   \                     ??CrossCallReturnLabel_196:
   \   00009C   12....       LCALL     `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   00009F   7405         MOV       A,#0x5
   \   0000A1   12....       LCALL     ?DEALLOC_XSTACK8
   1693          }
   \   0000A4   7406         MOV       A,#0x6
   \   0000A6   02....       LJMP      ?Subroutine2 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine102:
   \   000000   F583         MOV       DPH,A
   \   000002                REQUIRE ??Subroutine228_0
   \   000002                ; // Fall through to label ??Subroutine228_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   12....       LCALL     ?Subroutine157 & 0xFFFF
   \                     ??CrossCallReturnLabel_266:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   E0           MOVX      A,@DPTR
   \   000007   22           RET
   1694          
   1695          
   1696          /*********************************************************************
   1697           * @fn          ZDO_ProcessMgmtPermitJoinReq
   1698           *
   1699           * @brief       This function processes a Management Permit Join Request
   1700           *              and generates the response.
   1701           *
   1702           * @param       inMsg - incoming message (request)
   1703           *
   1704           * @return      none
   1705           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1706          void ZDO_ProcessMgmtPermitJoinReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtPermitJoinReq:
   1707          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   12....       LCALL     ?Subroutine121 & 0xFFFF
   1708            uint8 stat;
   1709            uint8 duration;
   1710            uint8 tcsig;
   1711          
   1712            duration = inMsg->asdu[ZDP_MGMT_PERMIT_JOIN_REQ_DURATION];
   1713            tcsig    = inMsg->asdu[ZDP_MGMT_PERMIT_JOIN_REQ_TC_SIG];
   1714          
   1715            // Set the network layer permit join duration
   1716            stat = (byte) NLME_PermitJoiningRequest( duration );
   \                     ??CrossCallReturnLabel_417:
   \   00000D   12....       LCALL     ?Subroutine80 & 0xFFFF
   \                     ??CrossCallReturnLabel_404:
   \   000010   F9           MOV       R1,A
   \   000011   12....       LCALL     `??NLME_PermitJoiningRequest::?relay`; Banked call to: NLME_PermitJoiningRequest
   \   000014   E9           MOV       A,R1
   \   000015   85..82       MOV       DPL,?XSP + 0
   \   000018   85..83       MOV       DPH,?XSP + 1
   \   00001B   12....       LCALL     ?Subroutine21 & 0xFFFF
   1717          
   1718            // Handle the Trust Center Significance
   1719            if ( ZG_SECURE_ENABLED && ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
   1720            {
   1721              if ( tcsig == TRUE )
   1722              {
   1723                ZDSecMgrPermitJoining( duration );
   1724              }
   1725            }
   1726          
   1727            // Send a response if unicast
   1728            if (inMsg->srcAddr.addr.shortAddr != NWK_BROADCAST_SHORTADDR)
   \                     ??CrossCallReturnLabel_18:
   \   00001E   F4           CPL       A
   \   00001F   7003         JNZ       ??ZDO_ProcessMgmtPermitJoinReq_0
   \   000021   A3           INC       DPTR
   \   000022   E0           MOVX      A,@DPTR
   \   000023   F4           CPL       A
   \                     ??ZDO_ProcessMgmtPermitJoinReq_0:
   \   000024   602C         JZ        ??ZDO_ProcessMgmtPermitJoinReq_1
   1729            {
   1730              ZDP_MgmtPermitJoinRsp( inMsg->TransSeq, &(inMsg->srcAddr), stat, false );
   \   000026                ; Setup parameters for call to function ZDP_SendData
   \   000026   75..00       MOV       ?V0,#0x0
   \   000029   78..         MOV       R0,#?V0
   \   00002B   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00002E   7401         MOV       A,#0x1
   \   000030   12....       LCALL     ?XSTACK_DISP100_8
   \   000033   88..         MOV       ?V0,R0
   \   000035   89..         MOV       ?V1,R1
   \   000037   78..         MOV       R0,#?V0
   \   000039   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003C   75..36       MOV       ?V0,#0x36
   \   00003F   75..80       MOV       ?V1,#-0x80
   \   000042   78..         MOV       R0,#?V0
   \   000044   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000047   12....       LCALL     ?Subroutine126 & 0xFFFF
   1731            }
   \                     ??CrossCallReturnLabel_194:
   \   00004A   12....       LCALL     `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   00004D   7405         MOV       A,#0x5
   \   00004F   12....       LCALL     ?DEALLOC_XSTACK8
   1732          }
   \                     ??ZDO_ProcessMgmtPermitJoinReq_1:
   \   000052   02....       LJMP      ?Subroutine8 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   12....       LCALL     ?Subroutine161 & 0xFFFF
   \                     ??CrossCallReturnLabel_269:
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine161:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8E82         MOV       DPL,R6
   \   000003   8F83         MOV       DPH,R7
   \   000005   A3           INC       DPTR
   \   000006   22           RET
   1733          
   1734          /*
   1735           * This function stub allows the next higher layer to be notified of
   1736           * a permit joining timeout.
   1737           */
   1738          /*********************************************************************
   1739           * @fn          ZDO_ProcessMgmtPermitJoinTimeout
   1740           *
   1741           * @brief       This function stub allows the next higher layer to be
   1742           *              notified of a permit joining timeout. Currently, this
   1743           *              directly bypasses the APS layer.
   1744           *
   1745           * @param       none
   1746           *
   1747           * @return      none
   1748           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1749          void ZDO_ProcessMgmtPermitJoinTimeout( void )
   \                     NLME_PermitJoiningTimeout:
   1750          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   1751            #if defined( ZDO_MGMT_PERMIT_JOIN_RESPONSE )
   1752            // Currently, only the ZDSecMgr needs to be notified
   1753            if ( ZG_SECURE_ENABLED && ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
   1754            {
   1755              ZDSecMgrPermitJoiningTimeout();
   1756            }
   1757            #endif
   1758          }
   \   000000   02....       LJMP      ?BRET
   1759          
   1760          /*********************************************************************
   1761           * @fn          ZDO_ProcessUserDescReq
   1762           *
   1763           * @brief       This function finishes the processing of the User
   1764           *              Descriptor Request and generates the response.
   1765           *
   1766           * @param       inMsg - incoming message (request)
   1767           *
   1768           * @return      none
   1769           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1770          void ZDO_ProcessUserDescReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessUserDescReq:
   1771          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 17
   \   000005   74EF         MOV       A,#-0x11
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   12....       LCALL     ?Subroutine121 & 0xFFFF
   1772            uint16 aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
   \                     ??CrossCallReturnLabel_418:
   \   00000D   12....       LCALL     ?Subroutine59 & 0xFFFF
   \                     ??CrossCallReturnLabel_93:
   \   000010   F5..         MOV       ?V0,A
   \   000012   E4           CLR       A
   \   000013   39           ADDC      A,R1
   \   000014   F5..         MOV       ?V1,A
   1773            UserDescriptorFormat_t userDesc;
   1774          
   1775            if ( (aoi == ZDAppNwkAddr.addr.shortAddr) && (ZSUCCESS == osal_nv_read(
   1776                       ZCD_NV_USERDESC, 0, sizeof(UserDescriptorFormat_t), &userDesc )) )
   \   000016   90....       MOV       DPTR,#ZDAppNwkAddr
   \   000019   E0           MOVX      A,@DPTR
   \   00001A   65..         XRL       A,?V0
   \   00001C   7004         JNZ       ??ZDO_ProcessUserDescReq_0
   \   00001E   A3           INC       DPTR
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   65..         XRL       A,?V1
   \                     ??ZDO_ProcessUserDescReq_0:
   \   000022   7052         JNZ       ??ZDO_ProcessUserDescReq_1
   \   000024                ; Setup parameters for call to function osal_nv_read
   \   000024   A8..         MOV       R0,?XSP + 0
   \   000026   A9..         MOV       R1,?XSP + 1
   \   000028   88..         MOV       ?V2,R0
   \   00002A   89..         MOV       ?V3,R1
   \   00002C   78..         MOV       R0,#?V2
   \   00002E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000031   75..11       MOV       ?V2,#0x11
   \   000034   75..00       MOV       ?V3,#0x0
   \   000037   78..         MOV       R0,#?V2
   \   000039   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003C   7C00         MOV       R4,#0x0
   \   00003E   7D00         MOV       R5,#0x0
   \   000040   7A81         MOV       R2,#-0x7f
   \   000042   7B00         MOV       R3,#0x0
   \   000044   12....       LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000047   7404         MOV       A,#0x4
   \   000049   12....       LCALL     ?DEALLOC_XSTACK8
   \   00004C   E9           MOV       A,R1
   \   00004D   7027         JNZ       ??ZDO_ProcessUserDescReq_1
   1777            {
   1778              ZDP_UserDescRsp( inMsg->TransSeq, &(inMsg->srcAddr), aoi, &userDesc, false );
   \   00004F                ; Setup parameters for call to function ZDP_UserDescRsp
   \   00004F   75..00       MOV       ?V2,#0x0
   \   000052   78..         MOV       R0,#?V2
   \   000054   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000057   7401         MOV       A,#0x1
   \   000059   12....       LCALL     ?XSTACK_DISP100_8
   \   00005C   88..         MOV       ?V2,R0
   \   00005E   89..         MOV       ?V3,R1
   \   000060   78..         MOV       R0,#?V2
   \   000062   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000065   AC..         MOV       R4,?V0
   \   000067   AD..         MOV       R5,?V1
   \   000069   12....       LCALL     ?Subroutine123 & 0xFFFF
   1779            }
   \                     ??CrossCallReturnLabel_189:
   \   00006C   12....       LCALL     `??ZDP_UserDescRsp::?relay`; Banked call to: ZDP_UserDescRsp
   \   00006F   7403         MOV       A,#0x3
   \   000071   12....       LCALL     ?DEALLOC_XSTACK8
   \   000074   8020         SJMP      ??ZDO_ProcessUserDescReq_2
   1780            else
   1781            {
   1782              ZDP_GenericRsp(inMsg->TransSeq, &(inMsg->srcAddr),
   1783                     ZDP_NOT_SUPPORTED, aoi, User_Desc_rsp, inMsg->SecurityUse );
   \                     ??ZDO_ProcessUserDescReq_1:
   \   000076                ; Setup parameters for call to function ZDP_GenericRsp
   \   000076   75..11       MOV       ?V2,#0x11
   \   000079   75..80       MOV       ?V3,#-0x80
   \   00007C   78..         MOV       R0,#?V2
   \   00007E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000081   78..         MOV       R0,#?V0
   \   000083   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000086   12....       LCALL     ?Subroutine131 & 0xFFFF
   1784            }
   \                     ??CrossCallReturnLabel_203:
   \   000089   7C84         MOV       R4,#-0x7c
   \   00008B   12....       LCALL     ?Subroutine123 & 0xFFFF
   \                     ??CrossCallReturnLabel_190:
   \   00008E   12....       LCALL     `??ZDP_GenericRsp::?relay`; Banked call to: ZDP_GenericRsp
   \   000091   7404         MOV       A,#0x4
   \   000093   12....       LCALL     ?DEALLOC_XSTACK8
   1785          }
   \                     ??ZDO_ProcessUserDescReq_2:
   \   000096   7411         MOV       A,#0x11
   \   000098   02....       LJMP      ?Subroutine2 & 0xFFFF
   1786          
   1787          /*********************************************************************
   1788           * @fn          ZDO_ProcessUserDescSet
   1789           *
   1790           * @brief       This function finishes the processing of the User
   1791           *              Descriptor Set and generates the response.
   1792           *
   1793           * @param       inMsg - incoming message (request)
   1794           *
   1795           * @return      none
   1796           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1797          void ZDO_ProcessUserDescSet( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessUserDescSet:
   1798          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV       A,#-0x15
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V4,R2
   \   00000C   8B..         MOV       ?V5,R3
   1799            uint8 *msg;
   1800            uint16 aoi;
   1801            UserDescriptorFormat_t userDesc;
   1802            uint8 outMsg[3];
   1803            uint8 status;
   1804          
   1805            msg = inMsg->asdu;
   \   00000E   12....       LCALL     ??Subroutine230_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_433:
   \   000011   35..         ADDC      A,?V5
   \   000013   12....       LCALL     ?Subroutine81 & 0xFFFF
   1806            aoi = BUILD_UINT16( msg[0], msg[1] );
   \                     ??CrossCallReturnLabel_132:
   \   000016   FA           MOV       R2,A
   \   000017   E4           CLR       A
   \   000018   CA           XCH       A,R2
   \   000019   FB           MOV       R3,A
   \   00001A   EC           MOV       A,R4
   \   00001B   2A           ADD       A,R2
   \   00001C   FE           MOV       R6,A
   \   00001D   E4           CLR       A
   \   00001E   3B           ADDC      A,R3
   \   00001F   FF           MOV       R7,A
   1807          
   1808            if ( aoi == ZDAppNwkAddr.addr.shortAddr )
   \   000020   90....       MOV       DPTR,#ZDAppNwkAddr
   \   000023   E0           MOVX      A,@DPTR
   \   000024   6E           XRL       A,R6
   \   000025   7003         JNZ       ??ZDO_ProcessUserDescSet_0
   \   000027   A3           INC       DPTR
   \   000028   E0           MOVX      A,@DPTR
   \   000029   6F           XRL       A,R7
   \                     ??ZDO_ProcessUserDescSet_0:
   \   00002A   6003         JZ        $+5
   \   00002C   02....       LJMP      ??ZDO_ProcessUserDescSet_1 & 0xFFFF
   1809            {
   1810              userDesc.len = (msg[2] < AF_MAX_USER_DESCRIPTOR_LEN) ? msg[2] : AF_MAX_USER_DESCRIPTOR_LEN;
   \   00002F   8882         MOV       DPL,R0
   \   000031   8983         MOV       DPH,R1
   \   000033   A3           INC       DPTR
   \   000034   A3           INC       DPTR
   \   000035   E0           MOVX      A,@DPTR
   \   000036   9410         SUBB      A,#0x10
   \   000038   500F         JNC       ??ZDO_ProcessUserDescSet_2
   \   00003A   8882         MOV       DPL,R0
   \   00003C   8983         MOV       DPH,R1
   \   00003E   A3           INC       DPTR
   \   00003F   A3           INC       DPTR
   \   000040   E0           MOVX      A,@DPTR
   \   000041   85..82       MOV       DPL,?XSP + 0
   \   000044   85..83       MOV       DPH,?XSP + 1
   \   000047   8008         SJMP      ??ZDO_ProcessUserDescSet_3
   \                     ??ZDO_ProcessUserDescSet_2:
   \   000049   85..82       MOV       DPL,?XSP + 0
   \   00004C   85..83       MOV       DPH,?XSP + 1
   \   00004F   7410         MOV       A,#0x10
   \                     ??ZDO_ProcessUserDescSet_3:
   \   000051   F0           MOVX      @DPTR,A
   \   000052   E0           MOVX      A,@DPTR
   \   000053   C0E0         PUSH      A
   \   000055   7404         MOV       A,#0x4
   \   000057   12....       LCALL     ?XSTACK_DISP0_8
   \   00005A   D0E0         POP       A
   \   00005C   12....       LCALL     ?Subroutine35 & 0xFFFF
   1811              msg ++;  // increment one for the length field
   1812          
   1813              osal_memcpy( userDesc.desc, &msg[2], userDesc.len );
   \                     ??CrossCallReturnLabel_50:
   \   00005F   A982         MOV       R1,DPL
   \   000061   AA83         MOV       R2,DPH
   \   000063   89..         MOV       ?V0,R1
   \   000065   8A..         MOV       ?V1,R2
   \   000067   75..00       MOV       ?V2,#0x0
   \   00006A   78..         MOV       R0,#?V0
   \   00006C   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00006F   7407         MOV       A,#0x7
   \   000071   12....       LCALL     ?XSTACK_DISP0_8
   \   000074   E0           MOVX      A,@DPTR
   \   000075   FC           MOV       R4,A
   \   000076   7D00         MOV       R5,#0x0
   \   000078   7408         MOV       A,#0x8
   \   00007A   12....       LCALL     ?XSTACK_DISP0_8
   \   00007D   AA82         MOV       R2,DPL
   \   00007F   AB83         MOV       R3,DPH
   \   000081   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000084   7403         MOV       A,#0x3
   \   000086   12....       LCALL     ?DEALLOC_XSTACK8
   1814              osal_nv_write( ZCD_NV_USERDESC, 0, sizeof(UserDescriptorFormat_t), &userDesc );
   \   000089                ; Setup parameters for call to function osal_nv_write
   \   000089   7404         MOV       A,#0x4
   \   00008B   12....       LCALL     ?XSTACK_DISP100_8
   \   00008E   88..         MOV       ?V0,R0
   \   000090   89..         MOV       ?V1,R1
   \   000092   78..         MOV       R0,#?V0
   \   000094   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000097   75..11       MOV       ?V0,#0x11
   \   00009A   75..00       MOV       ?V1,#0x0
   \   00009D   78..         MOV       R0,#?V0
   \   00009F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000A2   7C00         MOV       R4,#0x0
   \   0000A4   7D00         MOV       R5,#0x0
   \   0000A6   7A81         MOV       R2,#-0x7f
   \   0000A8   7B00         MOV       R3,#0x0
   \   0000AA   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   0000AD   7404         MOV       A,#0x4
   \   0000AF   12....       LCALL     ?DEALLOC_XSTACK8
   1815              if ( userDesc.len != 0 )
   \   0000B2   7404         MOV       A,#0x4
   \   0000B4   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B7   E0           MOVX      A,@DPTR
   \   0000B8   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor
   \   0000BB   6005         JZ        ??ZDO_ProcessUserDescSet_4
   1816              {
   1817                ZDO_Config_Node_Descriptor.UserDescAvail = TRUE;
   \   0000BD   E0           MOVX      A,@DPTR
   \   0000BE   D2E4         SETB      0xE0 /* A   */.4
   \   0000C0   8003         SJMP      ??ZDO_ProcessUserDescSet_5
   1818              }
   1819              else
   1820              {
   1821                ZDO_Config_Node_Descriptor.UserDescAvail = FALSE;
   \                     ??ZDO_ProcessUserDescSet_4:
   \   0000C2   E0           MOVX      A,@DPTR
   \   0000C3   C2E4         CLR       0xE0 /* A   */.4
   \                     ??ZDO_ProcessUserDescSet_5:
   \   0000C5   F0           MOVX      @DPTR,A
   1822              }
   1823          
   1824              status = ZDP_SUCCESS;
   \   0000C6   85..82       MOV       DPL,?XSP + 0
   \   0000C9   85..83       MOV       DPH,?XSP + 1
   \   0000CC   E4           CLR       A
   \   0000CD   8008         SJMP      ??ZDO_ProcessUserDescSet_6
   1825            }
   1826            else
   1827            {
   1828              status =  ZDP_NOT_SUPPORTED;
   \                     ??ZDO_ProcessUserDescSet_1:
   \   0000CF   85..82       MOV       DPL,?XSP + 0
   \   0000D2   85..83       MOV       DPH,?XSP + 1
   \   0000D5   7484         MOV       A,#-0x7c
   \                     ??ZDO_ProcessUserDescSet_6:
   \   0000D7   F0           MOVX      @DPTR,A
   1829            }
   1830          
   1831            outMsg[0] = status;
   \   0000D8   E0           MOVX      A,@DPTR
   \   0000D9   C0E0         PUSH      A
   \   0000DB   7401         MOV       A,#0x1
   \   0000DD   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E0   D0E0         POP       A
   \   0000E2   F0           MOVX      @DPTR,A
   1832            outMsg[1] = LO_UINT16( aoi );
   \   0000E3   7402         MOV       A,#0x2
   \   0000E5   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E8   EE           MOV       A,R6
   \   0000E9   F0           MOVX      @DPTR,A
   1833            outMsg[2] = LO_UINT16( aoi );
   \   0000EA   7403         MOV       A,#0x3
   \   0000EC   12....       LCALL     ?XSTACK_DISP0_8
   \   0000EF   EE           MOV       A,R6
   \   0000F0   F0           MOVX      @DPTR,A
   1834          
   1835            ZDP_SendData( &(inMsg->TransSeq), &(inMsg->srcAddr), User_Desc_conf, 3, outMsg,
   1836                         inMsg->SecurityUse );
   \   0000F1                ; Setup parameters for call to function ZDP_SendData
   \   0000F1   12....       LCALL     ?Subroutine133 & 0xFFFF
   \                     ??CrossCallReturnLabel_614:
   \   0000F4   35..         ADDC      A,?V5
   \   0000F6   12....       LCALL     ?Subroutine106 & 0xFFFF
   \                     ??CrossCallReturnLabel_440:
   \   0000F9   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000FC   7402         MOV       A,#0x2
   \   0000FE   12....       LCALL     ?XSTACK_DISP100_8
   \   000101   88..         MOV       ?V0,R0
   \   000103   89..         MOV       ?V1,R1
   \   000105   78..         MOV       R0,#?V0
   \   000107   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00010A   75..14       MOV       ?V0,#0x14
   \   00010D   75..80       MOV       ?V1,#-0x80
   \   000110   78..         MOV       R0,#?V0
   \   000112   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000115   7903         MOV       R1,#0x3
   \   000117   12....       LCALL     ?Subroutine130 & 0xFFFF
   \                     ??CrossCallReturnLabel_201:
   \   00011A   FA           MOV       R2,A
   \   00011B   E4           CLR       A
   \   00011C   35..         ADDC      A,?V5
   \   00011E   FB           MOV       R3,A
   \   00011F   12....       LCALL     `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   000122   7405         MOV       A,#0x5
   \   000124   12....       LCALL     ?DEALLOC_XSTACK8
   1837          }
   \   000127   7415         MOV       A,#0x15
   \   000129   02....       LJMP      ?Subroutine5 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine106:
   \   000000   F583         MOV       DPH,A
   \   000002                REQUIRE ??Subroutine231_0
   \   000002                ; // Fall through to label ??Subroutine231_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   12....       LCALL     ?Subroutine162 & 0xFFFF
   \                     ??CrossCallReturnLabel_272:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine162:
   \   000000   12....       LCALL     ?Subroutine197 & 0xFFFF
   \                     ??CrossCallReturnLabel_324:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine197:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                ; Setup parameters for call to function osal_memcpy
   \   000001   8882         MOV       DPL,R0
   \   000003   8983         MOV       DPH,R1
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   22           RET
   1838          
   1839          /*********************************************************************
   1840           * @fn          ZDO_ProcessDeviceAnnce
   1841           *
   1842           * @brief       This function processes a device annouce message.
   1843           *
   1844           * @param       inMsg - incoming message
   1845           *
   1846           * @return      none
   1847           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1848          void ZDO_ProcessDeviceAnnce( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessDeviceAnnce:
   1849          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 32
   \   000005   74E0         MOV       A,#-0x20
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   1850            ZDO_DeviceAnnce_t Annce;
   1851            AddrMgrEntry_t addrEntry;
   1852            uint8 parentExt[Z_EXTADDR_LEN];
   1853          
   1854            // Parse incoming message
   1855            ZDO_ParseDeviceAnnce( inMsg, &Annce );
   \   00000A                ; Setup parameters for call to function ZDO_ParseDeviceAnnce
   \   00000A   AC..         MOV       R4,?XSP + 0
   \   00000C   AD..         MOV       R5,?XSP + 1
   \   00000E   12....       LCALL     `??ZDO_ParseDeviceAnnce::?relay`; Banked call to: ZDO_ParseDeviceAnnce
   1856          
   1857            if ( ZSTACK_END_DEVICE_BUILD )
   1858            {
   1859              // Make sure the message didn't come from myself - end device only
   1860              if ( osal_ExtAddrEqual( NLME_GetExtAddr(), Annce.extAddr ) && Annce.nwkAddr == NLME_GetShortAddr() )
   \   000011                ; Setup parameters for call to function NLME_GetExtAddr
   \   000011   12....       LCALL     `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
   \   000014                ; Setup parameters for call to function sAddrExtCmp
   \   000014   7402         MOV       A,#0x2
   \   000016   12....       LCALL     ?XSTACK_DISP0_8
   \   000019   AC82         MOV       R4,DPL
   \   00001B   AD83         MOV       R5,DPH
   \   00001D   12....       LCALL     `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   000020   E9           MOV       A,R1
   \   000021   601D         JZ        ??ZDO_ProcessDeviceAnnce_0
   \   000023                ; Setup parameters for call to function NLME_GetShortAddr
   \   000023   12....       LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   000026   8A..         MOV       ?V0,R2
   \   000028   8B..         MOV       ?V1,R3
   \   00002A   A8..         MOV       R0,?V0
   \   00002C   A9..         MOV       R1,?V1
   \   00002E   85..82       MOV       DPL,?XSP + 0
   \   000031   85..83       MOV       DPH,?XSP + 1
   \   000034   E0           MOVX      A,@DPTR
   \   000035   68           XRL       A,R0
   \   000036   7003         JNZ       ??ZDO_ProcessDeviceAnnce_1
   \   000038   A3           INC       DPTR
   \   000039   E0           MOVX      A,@DPTR
   \   00003A   69           XRL       A,R1
   \                     ??ZDO_ProcessDeviceAnnce_1:
   \   00003B   7003         JNZ       $+5
   \   00003D   02....       LJMP      ??ZDO_ProcessDeviceAnnce_2 & 0xFFFF
   1861              {
   1862                return;
   1863              }
   1864            }
   1865          
   1866          #if defined ( ZIGBEE_STOCHASTIC_ADDRESSING )
   1867            // Clean up the neighbor table
   1868            nwkNeighborRemoveAllStranded();
   \                     ??ZDO_ProcessDeviceAnnce_0:
   \   000040                ; Setup parameters for call to function nwkNeighborRemoveAllStranded
   \   000040   12....       LCALL     `??nwkNeighborRemoveAllStranded::?relay`; Banked call to: nwkNeighborRemoveAllStranded
   1869          
   1870            // If address conflict is detected, no need to update the address manager
   1871            if ( NLME_CheckNewAddrSet( Annce.nwkAddr, Annce.extAddr )== ZFailure )
   \   000043                ; Setup parameters for call to function NLME_CheckNewAddrSet
   \   000043   7402         MOV       A,#0x2
   \   000045   12....       LCALL     ?XSTACK_DISP0_8
   \   000048   AC82         MOV       R4,DPL
   \   00004A   AD83         MOV       R5,DPH
   \   00004C   85..82       MOV       DPL,?XSP + 0
   \   00004F   85..83       MOV       DPH,?XSP + 1
   \   000052   12....       LCALL     ??Subroutine236_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_460:
   \   000055   12....       LCALL     `??NLME_CheckNewAddrSet::?relay`; Banked call to: NLME_CheckNewAddrSet
   \   000058   E9           MOV       A,R1
   \   000059   6401         XRL       A,#0x1
   \   00005B   7003         JNZ       $+5
   \   00005D   02....       LJMP      ??ZDO_ProcessDeviceAnnce_2 & 0xFFFF
   1872            {
   1873              return;
   1874            }
   1875          #endif
   1876          
   1877          #if defined ( ZIGBEE_STOCHASTIC_ADDRESSING )
   1878            // Check for parent's address
   1879            NLME_GetCoordExtAddr( parentExt );
   \   000060                ; Setup parameters for call to function NLME_GetCoordExtAddr
   \   000060   740B         MOV       A,#0xb
   \   000062   12....       LCALL     ?XSTACK_DISP101_8
   \   000065   12....       LCALL     `??NLME_GetCoordExtAddr::?relay`; Banked call to: NLME_GetCoordExtAddr
   1880            if ( osal_ExtAddrEqual( parentExt, Annce.extAddr ) )
   \   000068                ; Setup parameters for call to function sAddrExtCmp
   \   000068   7402         MOV       A,#0x2
   \   00006A   12....       LCALL     ?XSTACK_DISP0_8
   \   00006D   AC82         MOV       R4,DPL
   \   00006F   AD83         MOV       R5,DPH
   \   000071   740B         MOV       A,#0xb
   \   000073   12....       LCALL     ?XSTACK_DISP101_8
   \   000076   12....       LCALL     `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   000079   E9           MOV       A,R1
   \   00007A   6032         JZ        ??ZDO_ProcessDeviceAnnce_3
   1881            {
   1882              if ( Annce.nwkAddr != NLME_GetCoordShortAddr() )
   \   00007C                ; Setup parameters for call to function NLME_GetCoordShortAddr
   \   00007C   12....       LCALL     `??NLME_GetCoordShortAddr::?relay`; Banked call to: NLME_GetCoordShortAddr
   \   00007F   8A..         MOV       ?V0,R2
   \   000081   8B..         MOV       ?V1,R3
   \   000083   A8..         MOV       R0,?V0
   \   000085   A9..         MOV       R1,?V1
   \   000087   85..82       MOV       DPL,?XSP + 0
   \   00008A   85..83       MOV       DPH,?XSP + 1
   \   00008D   E0           MOVX      A,@DPTR
   \   00008E   68           XRL       A,R0
   \   00008F   7003         JNZ       ??ZDO_ProcessDeviceAnnce_4
   \   000091   A3           INC       DPTR
   \   000092   E0           MOVX      A,@DPTR
   \   000093   69           XRL       A,R1
   \                     ??ZDO_ProcessDeviceAnnce_4:
   \   000094   6018         JZ        ??ZDO_ProcessDeviceAnnce_3
   1883              {
   1884                // Set the Parent's MAC's new short address
   1885                _NIB.nwkCoordAddress = Annce.nwkAddr;
   \   000096   85..82       MOV       DPL,?XSP + 0
   \   000099   85..83       MOV       DPH,?XSP + 1
   \   00009C   12....       LCALL     ??Subroutine251_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_542:
   \   00009F   90....       MOV       DPTR,#_NIB + 23
   \   0000A2   12....       LCALL     ??Subroutine222_0 & 0xFFFF
   1886                ZMacSetReq( ZMacCoordShortAddress, (byte*)&(_NIB.nwkCoordAddress) );
   \                     ??CrossCallReturnLabel_376:
   \   0000A5                ; Setup parameters for call to function ZMacSetReq
   \   0000A5   7A..         MOV       R2,#(_NIB + 23) & 0xff
   \   0000A7   7B..         MOV       R3,#((_NIB + 23) >> 8) & 0xff
   \   0000A9   794B         MOV       R1,#0x4b
   \   0000AB   12....       LCALL     `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
   1887              }
   1888            }
   1889          
   1890            if ( ZSTACK_ROUTER_BUILD )
   1891            {
   1892              // If the device annce comes from a end device child that has moved
   1893              // to another parent, remove it from associated device list
   1894          
   1895              // If the dev annce is coming from other device's children,
   1896              // (The dev annce from its own children shall be unicast to itself,
   1897              // So check the mac destination address)
   1898              // Remove it from the associated device list. If it is not
   1899              // a child, no action will be taken in AssocRemove() anyway.
   1900              if ( inMsg->macDestAddr != NLME_GetShortAddr() )
   1901              {
   1902                associated_devices_t *dev_ptr;
   1903          
   1904                // If it's an end device child
   1905                dev_ptr = AssocGetWithExt( Annce.extAddr );
   1906                if ( dev_ptr )
   1907                {
   1908                  if ( dev_ptr->nodeRelation == CHILD_RFD ||
   1909                       dev_ptr->nodeRelation == CHILD_RFD_RX_IDLE )
   1910                  {
   1911                    AssocRemove( Annce.extAddr );
   1912                  }
   1913                }
   1914              }
   1915          
   1916              if ( Annce.nwkAddr != NLME_GetShortAddr() )
   1917              {
   1918                // If an associated device is found with matched extended Address,
   1919                // update its short address
   1920                if ( AssocChangeNwkAddr( Annce.nwkAddr, Annce.extAddr ) )
   1921                {
   1922                  // Update the neighbor table
   1923                  nwkNeighborUpdateNwkAddr( Annce.nwkAddr, Annce.extAddr );
   1924          
   1925                  // Set event to save NV
   1926                  ZDApp_NVUpdate();
   1927                }
   1928              }
   1929            }
   1930            
   1931            // Assume that the device has moved, remove existing routing entries
   1932            RTG_RemoveRtgEntry( Annce.nwkAddr, 0 );
   \                     ??ZDO_ProcessDeviceAnnce_3:
   \   0000AE                ; Setup parameters for call to function RTG_RemoveRtgEntry
   \   0000AE   7900         MOV       R1,#0x0
   \   0000B0   85..82       MOV       DPL,?XSP + 0
   \   0000B3   85..83       MOV       DPH,?XSP + 1
   \   0000B6   12....       LCALL     ??Subroutine236_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_461:
   \   0000B9   12....       LCALL     `??RTG_RemoveRtgEntry::?relay`; Banked call to: RTG_RemoveRtgEntry
   1933            
   1934          #endif // ZIGBEE_STOCHASTIC_ADDRESSING
   1935          
   1936          
   1937            // Fill in the extended address in address manager if we don't have it already.
   1938            addrEntry.user = ADDRMGR_USER_DEFAULT;
   \   0000BC   7413         MOV       A,#0x13
   \   0000BE   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C1   E4           CLR       A
   \   0000C2   12....       LCALL     ?Subroutine27 & 0xFFFF
   1939            addrEntry.nwkAddr = Annce.nwkAddr;
   \                     ??CrossCallReturnLabel_32:
   \   0000C5   F8           MOV       R0,A
   \   0000C6   A3           INC       DPTR
   \   0000C7   E0           MOVX      A,@DPTR
   \   0000C8   F9           MOV       R1,A
   \   0000C9   7414         MOV       A,#0x14
   \   0000CB   12....       LCALL     ?XSTACK_DISP0_8
   \   0000CE   12....       LCALL     ??Subroutine222_0 & 0xFFFF
   1940            if ( AddrMgrEntryLookupNwk( &addrEntry ) )
   \                     ??CrossCallReturnLabel_377:
   \   0000D1                ; Setup parameters for call to function AddrMgrEntryLookupNwk
   \   0000D1   7413         MOV       A,#0x13
   \   0000D3   12....       LCALL     ?XSTACK_DISP101_8
   \   0000D6   12....       LCALL     `??AddrMgrEntryLookupNwk::?relay`; Banked call to: AddrMgrEntryLookupNwk
   \   0000D9   E9           MOV       A,R1
   \   0000DA   603F         JZ        ??ZDO_ProcessDeviceAnnce_2
   1941            {
   1942              osal_memset( parentExt, 0, Z_EXTADDR_LEN );
   \   0000DC                ; Setup parameters for call to function osal_memset
   \   0000DC   7C08         MOV       R4,#0x8
   \   0000DE   7D00         MOV       R5,#0x0
   \   0000E0   7900         MOV       R1,#0x0
   \   0000E2   740B         MOV       A,#0xb
   \   0000E4   12....       LCALL     ?XSTACK_DISP101_8
   \   0000E7   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   1943              if ( osal_ExtAddrEqual( parentExt, addrEntry.extAddr ) )
   \   0000EA                ; Setup parameters for call to function sAddrExtCmp
   \   0000EA   7416         MOV       A,#0x16
   \   0000EC   12....       LCALL     ?XSTACK_DISP0_8
   \   0000EF   AC82         MOV       R4,DPL
   \   0000F1   AD83         MOV       R5,DPH
   \   0000F3   740B         MOV       A,#0xb
   \   0000F5   12....       LCALL     ?XSTACK_DISP101_8
   \   0000F8   12....       LCALL     `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   0000FB   E9           MOV       A,R1
   \   0000FC   601D         JZ        ??ZDO_ProcessDeviceAnnce_2
   1944              {
   1945                AddrMgrExtAddrSet( addrEntry.extAddr, Annce.extAddr );
   \   0000FE                ; Setup parameters for call to function AddrMgrExtAddrSet
   \   0000FE   7402         MOV       A,#0x2
   \   000100   12....       LCALL     ?XSTACK_DISP0_8
   \   000103   AC82         MOV       R4,DPL
   \   000105   AD83         MOV       R5,DPH
   \   000107   7416         MOV       A,#0x16
   \   000109   12....       LCALL     ?XSTACK_DISP0_8
   \   00010C   AA82         MOV       R2,DPL
   \   00010E   AB83         MOV       R3,DPH
   \   000110   12....       LCALL     `??AddrMgrExtAddrSet::?relay`; Banked call to: AddrMgrExtAddrSet
   1946                AddrMgrEntryUpdate( &addrEntry );
   \   000113                ; Setup parameters for call to function AddrMgrEntryUpdate
   \   000113   7413         MOV       A,#0x13
   \   000115   12....       LCALL     ?XSTACK_DISP101_8
   \   000118   12....       LCALL     `??AddrMgrEntryUpdate::?relay`; Banked call to: AddrMgrEntryUpdate
   1947              }
   1948            }
   1949          }
   \                     ??ZDO_ProcessDeviceAnnce_2:
   \   00011B   7420         MOV       A,#0x20
   \   00011D   02....       LJMP      ??Subroutine213_0 & 0xFFFF
   1950          
   1951          /*********************************************************************
   1952           * @fn          ZDO_BuildSimpleDescBuf
   1953           *
   1954           * @brief       Build a byte sequence representation of a Simple Descriptor.
   1955           *
   1956           * @param       buf  - pointer to a byte array big enough for data.
   1957           * @param       desc - SimpleDescriptionFormat_t *
   1958           *
   1959           * @return      none
   1960           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1961          void ZDO_BuildSimpleDescBuf( uint8 *buf, SimpleDescriptionFormat_t *desc )
   \                     ZDO_BuildSimpleDescBuf:
   1962          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EC           MOV       A,R4
   \   000006   FE           MOV       R6,A
   \   000007   ED           MOV       A,R5
   \   000008   FF           MOV       R7,A
   1963            byte cnt;
   1964            uint16 *ptr;
   1965          
   1966            *buf++ = desc->EndPoint;
   \   000009   12....       LCALL     ?Subroutine97 & 0xFFFF
   1967            *buf++ = HI_UINT16( desc->AppProfId );
   \                     ??CrossCallReturnLabel_160:
   \   00000C   A882         MOV       R0,DPL
   \   00000E   A983         MOV       R1,DPH
   \   000010   12....       LCALL     ??Subroutine232_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_442:
   \   000013   12....       LCALL     ?Subroutine30 & 0xFFFF
   1968            *buf++ = LO_UINT16( desc->AppProfId );
   \                     ??CrossCallReturnLabel_40:
   \   000016   F0           MOVX      @DPTR,A
   1969            *buf++ = HI_UINT16( desc->AppDeviceId );
   \   000017   EE           MOV       A,R6
   \   000018   2403         ADD       A,#0x3
   \   00001A   F8           MOV       R0,A
   \   00001B   E4           CLR       A
   \   00001C   3F           ADDC      A,R7
   \   00001D   F9           MOV       R1,A
   \   00001E   8882         MOV       DPL,R0
   \   000020   8983         MOV       DPH,R1
   \   000022   12....       LCALL     ??Subroutine232_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_443:
   \   000025   A3           INC       DPTR
   \   000026   A3           INC       DPTR
   \   000027   12....       LCALL     ?Subroutine30 & 0xFFFF
   1970            *buf++ = LO_UINT16( desc->AppDeviceId );
   \                     ??CrossCallReturnLabel_41:
   \   00002A   A3           INC       DPTR
   \   00002B   A3           INC       DPTR
   \   00002C   12....       LCALL     ?Subroutine17 & 0xFFFF
   1971          
   1972            *buf++ = (byte)(desc->AppDevVer << 4);
   \                     ??CrossCallReturnLabel_16:
   \   00002F   C4           SWAP      A
   \   000030   54F0         ANL       A,#0xf0
   \   000032   8A82         MOV       DPL,R2
   \   000034   8B83         MOV       DPH,R3
   \   000036   A3           INC       DPTR
   \   000037   A3           INC       DPTR
   \   000038   A3           INC       DPTR
   \   000039   A3           INC       DPTR
   \   00003A   A3           INC       DPTR
   \   00003B   12....       LCALL     ?Subroutine46 & 0xFFFF
   1973          
   1974            *buf++ = desc->AppNumInClusters;
   \                     ??CrossCallReturnLabel_64:
   \   00003E   12....       LCALL     ?Subroutine111 & 0xFFFF
   \                     ??CrossCallReturnLabel_444:
   \   000041   A3           INC       DPTR
   \   000042   A3           INC       DPTR
   \   000043   A3           INC       DPTR
   \   000044   A3           INC       DPTR
   \   000045   A3           INC       DPTR
   \   000046   A3           INC       DPTR
   \   000047   F0           MOVX      @DPTR,A
   \   000048   EA           MOV       A,R2
   \   000049   2407         ADD       A,#0x7
   \   00004B   FA           MOV       R2,A
   \   00004C   5001         JNC       ??ZDO_BuildSimpleDescBuf_0
   \   00004E   0B           INC       R3
   1975            ptr = desc->pAppInClusterList;
   \                     ??ZDO_BuildSimpleDescBuf_0:
   \   00004F   8E82         MOV       DPL,R6
   \   000051   8F83         MOV       DPH,R7
   \   000053   12....       LCALL     ?Subroutine82 & 0xFFFF
   1976            for ( cnt = 0; cnt < desc->AppNumInClusters; ptr++, cnt++ )
   \                     ??CrossCallReturnLabel_549:
   \   000056   7C00         MOV       R4,#0x0
   \   000058   800E         SJMP      ??ZDO_BuildSimpleDescBuf_1
   1977            {
   1978              *buf++ = HI_UINT16( *ptr );
   \                     ??ZDO_BuildSimpleDescBuf_2:
   \   00005A   12....       LCALL     ?Subroutine23 & 0xFFFF
   1979              *buf++ = LO_UINT16( *ptr );
   1980            }
   \                     ??CrossCallReturnLabel_25:
   \   00005D   5001         JNC       ??ZDO_BuildSimpleDescBuf_3
   \   00005F   0B           INC       R3
   \                     ??ZDO_BuildSimpleDescBuf_3:
   \   000060   E8           MOV       A,R0
   \   000061   2402         ADD       A,#0x2
   \   000063   F8           MOV       R0,A
   \   000064   5001         JNC       ??ZDO_BuildSimpleDescBuf_4
   \   000066   09           INC       R1
   \                     ??ZDO_BuildSimpleDescBuf_4:
   \   000067   0C           INC       R4
   \                     ??ZDO_BuildSimpleDescBuf_1:
   \   000068   8E82         MOV       DPL,R6
   \   00006A   8F83         MOV       DPH,R7
   \   00006C   A3           INC       DPTR
   \   00006D   A3           INC       DPTR
   \   00006E   A3           INC       DPTR
   \   00006F   A3           INC       DPTR
   \   000070   A3           INC       DPTR
   \   000071   A3           INC       DPTR
   \   000072   E0           MOVX      A,@DPTR
   \   000073   FD           MOV       R5,A
   \   000074   EC           MOV       A,R4
   \   000075   C3           CLR       C
   \   000076   9D           SUBB      A,R5
   \   000077   40E1         JC        ??ZDO_BuildSimpleDescBuf_2
   1981          
   1982            *buf++ = desc->AppNumOutClusters;
   \   000079   8E82         MOV       DPL,R6
   \   00007B   8F83         MOV       DPH,R7
   \   00007D   A3           INC       DPTR
   \   00007E   A3           INC       DPTR
   \   00007F   A3           INC       DPTR
   \   000080   A3           INC       DPTR
   \   000081   A3           INC       DPTR
   \   000082   A3           INC       DPTR
   \   000083   12....       LCALL     ?Subroutine111 & 0xFFFF
   \                     ??CrossCallReturnLabel_445:
   \   000086   F0           MOVX      @DPTR,A
   \   000087   A3           INC       DPTR
   \   000088   AA82         MOV       R2,DPL
   \   00008A   AB83         MOV       R3,DPH
   1983            ptr = desc->pAppOutClusterList;
   \   00008C   8E82         MOV       DPL,R6
   \   00008E   8F83         MOV       DPH,R7
   \   000090   A3           INC       DPTR
   \   000091   A3           INC       DPTR
   \   000092   A3           INC       DPTR
   \   000093   12....       LCALL     ?Subroutine82 & 0xFFFF
   1984            for ( cnt = 0; cnt < desc->AppNumOutClusters; ptr++, cnt++ )
   \                     ??CrossCallReturnLabel_550:
   \   000096   7C00         MOV       R4,#0x0
   \   000098   800E         SJMP      ??ZDO_BuildSimpleDescBuf_5
   1985            {
   1986              *buf++ = HI_UINT16( *ptr );
   \                     ??ZDO_BuildSimpleDescBuf_6:
   \   00009A   12....       LCALL     ?Subroutine23 & 0xFFFF
   1987              *buf++ = LO_UINT16( *ptr );
   1988            }
   \                     ??CrossCallReturnLabel_26:
   \   00009D   5001         JNC       ??ZDO_BuildSimpleDescBuf_7
   \   00009F   0B           INC       R3
   \                     ??ZDO_BuildSimpleDescBuf_7:
   \   0000A0   E8           MOV       A,R0
   \   0000A1   2402         ADD       A,#0x2
   \   0000A3   F8           MOV       R0,A
   \   0000A4   5001         JNC       ??ZDO_BuildSimpleDescBuf_8
   \   0000A6   09           INC       R1
   \                     ??ZDO_BuildSimpleDescBuf_8:
   \   0000A7   0C           INC       R4
   \                     ??ZDO_BuildSimpleDescBuf_5:
   \   0000A8   8E82         MOV       DPL,R6
   \   0000AA   8F83         MOV       DPH,R7
   \   0000AC   A3           INC       DPTR
   \   0000AD   A3           INC       DPTR
   \   0000AE   A3           INC       DPTR
   \   0000AF   A3           INC       DPTR
   \   0000B0   A3           INC       DPTR
   \   0000B1   A3           INC       DPTR
   \   0000B2   A3           INC       DPTR
   \   0000B3   A3           INC       DPTR
   \   0000B4   A3           INC       DPTR
   \   0000B5   E0           MOVX      A,@DPTR
   \   0000B6   FD           MOV       R5,A
   \   0000B7   EC           MOV       A,R4
   \   0000B8   C3           CLR       C
   \   0000B9   9D           SUBB      A,R5
   \   0000BA   40DE         JC        ??ZDO_BuildSimpleDescBuf_6
   1989          }
   \   0000BC   02....       LJMP      ??Subroutine214_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine111:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002                REQUIRE ??Subroutine232_0
   \   000002                ; // Fall through to label ??Subroutine232_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine232_0:
   \   000000   12....       LCALL     ?Subroutine205 & 0xFFFF
   \                     ??CrossCallReturnLabel_449:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine205:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine233_0
   \   000001                ; // Fall through to label ??Subroutine233_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine233_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   8A82         MOV       DPL,R2
   \   000003   8B83         MOV       DPH,R3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   A3           INC       DPTR
   \   000001   12....       LCALL     ?Subroutine155 & 0xFFFF
   \                     ??CrossCallReturnLabel_261:
   \   000004   A3           INC       DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   8882         MOV       DPL,R0
   \   000002   8983         MOV       DPH,R1
   \   000004   12....       LCALL     ?Subroutine205 & 0xFFFF
   \                     ??CrossCallReturnLabel_448:
   \   000007   12....       LCALL     ?Subroutine155 & 0xFFFF
   \                     ??CrossCallReturnLabel_262:
   \   00000A   F0           MOVX      @DPTR,A
   \   00000B   EA           MOV       A,R2
   \   00000C   2402         ADD       A,#0x2
   \   00000E   FA           MOV       R2,A
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine155:
   \   000000   12....       LCALL     ?Subroutine198 & 0xFFFF
   \                     ??CrossCallReturnLabel_326:
   \   000003   12....       LCALL     ??Subroutine233_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_447:
   \   000006   A3           INC       DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine82:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005                REQUIRE ??Subroutine249_0
   \   000005                ; // Fall through to label ??Subroutine249_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine46:
   \   000000   12....       LCALL     ?Subroutine160 & 0xFFFF
   \                     ??CrossCallReturnLabel_267:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine160:
   \   000000   12....       LCALL     ?Subroutine199 & 0xFFFF
   \                     ??CrossCallReturnLabel_330:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine97:
   \   000000   8E82         MOV       DPL,R6
   \   000002   8F83         MOV       DPH,R7
   \   000004   12....       LCALL     ??Subroutine233_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_446:
   \   000007   12....       LCALL     ?Subroutine161 & 0xFFFF
   \                     ??CrossCallReturnLabel_270:
   \   00000A   22           RET
   1990          
   1991          /*********************************************************************
   1992           * @fn      ZDO_MatchEndDeviceBind()
   1993           *
   1994           * @brief
   1995           *
   1996           *   Called to match end device binding requests
   1997           *
   1998           * @param  bindReq  - binding request information
   1999           * @param  SecurityUse - Security enable/disable
   2000           *
   2001           * @return  none
   2002           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2003          void ZDO_MatchEndDeviceBind( ZDEndDeviceBind_t *bindReq )
   \                     ZDO_MatchEndDeviceBind:
   2004          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV       A,#-0xa
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V4,R2
   \   00000C   8B..         MOV       ?V5,R3
   2005            zAddrType_t dstAddr;
   2006            uint8 sendRsp = FALSE;
   \   00000E   7E00         MOV       R6,#0x0
   2007            uint8 status;
   2008          
   2009            // Is this the first request?
   2010            if ( matchED == NULL )
   \   000010   90....       MOV       DPTR,#matchED
   \   000013   12....       LCALL     ??Subroutine239_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_494:
   \   000016   7052         JNZ       ??ZDO_MatchEndDeviceBind_0
   2011            {
   2012              // Create match info structure
   2013              matchED = (ZDMatchEndDeviceBind_t *)osal_mem_alloc( sizeof ( ZDMatchEndDeviceBind_t ) );
   \   000018                ; Setup parameters for call to function osal_mem_alloc
   \   000018   7A37         MOV       R2,#0x37
   \   00001A   7B00         MOV       R3,#0x0
   \   00001C   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00001F   90....       MOV       DPTR,#matchED
   \   000022   12....       LCALL     ??Subroutine224_0 & 0xFFFF
   2014              if ( matchED )
   \                     ??CrossCallReturnLabel_394:
   \   000025   90....       MOV       DPTR,#matchED
   \   000028   12....       LCALL     ??Subroutine239_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_495:
   \   00002B   6019         JZ        ??ZDO_MatchEndDeviceBind_1
   2015              {
   2016                // Clear the structure
   2017                osal_memset( (uint8 *)matchED, 0, sizeof ( ZDMatchEndDeviceBind_t ) );
   \   00002D                ; Setup parameters for call to function osal_memset
   \   00002D   7C37         MOV       R4,#0x37
   \   00002F   7D00         MOV       R5,#0x0
   \   000031   7900         MOV       R1,#0x0
   \   000033   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   2018          
   2019                // Copy the first request's information
   2020                if ( !ZDO_CopyMatchInfo( &(matchED->ed1), bindReq ) )
   \   000036                ; Setup parameters for call to function ZDO_CopyMatchInfo
   \   000036   AC..         MOV       R4,?V4
   \   000038   AD..         MOV       R5,?V5
   \   00003A   90....       MOV       DPTR,#matchED
   \   00003D   12....       LCALL     ??Subroutine236_0 & 0xFFFF
   2021                {
   2022          
   2023                  status = ZDP_NO_ENTRY;
   2024                  sendRsp = TRUE;
   2025                }
   2026              }
   \                     ??CrossCallReturnLabel_462:
   \   000040   12....       LCALL     `??ZDO_CopyMatchInfo::?relay`; Banked call to: ZDO_CopyMatchInfo
   \   000043   E9           MOV       A,R1
   \   000044   700B         JNZ       ??ZDO_MatchEndDeviceBind_2
   2027              else
   2028              {
   2029                status = ZDP_NO_ENTRY;
   \                     ??ZDO_MatchEndDeviceBind_1:
   \   000046   85..82       MOV       DPL,?XSP + 0
   \   000049   85..83       MOV       DPH,?XSP + 1
   \   00004C   7488         MOV       A,#-0x78
   \   00004E   02....       LJMP      ??ZDO_MatchEndDeviceBind_3 & 0xFFFF
   2030                sendRsp = TRUE;
   2031              }
   2032          
   2033              if ( !sendRsp )
   2034              {
   2035                // Set into the correct state
   2036                matchED->state = ZDMATCH_WAIT_REQ;
   \                     ??ZDO_MatchEndDeviceBind_2:
   \   000051   12....       LCALL     ?Subroutine95 & 0xFFFF
   \                     ??CrossCallReturnLabel_577:
   \   000054   12....       LCALL     ?Subroutine149 & 0xFFFF
   \                     ??CrossCallReturnLabel_251:
   \   000057   7401         MOV       A,#0x1
   \   000059   F0           MOVX      @DPTR,A
   2037          
   2038                // Setup the timeout
   2039                APS_SetEndDeviceBindTimeout( AIB_MaxBindingTime, ZDO_EndDeviceBindMatchTimeoutCB );
   \   00005A                ; Setup parameters for call to function APS_SetEndDeviceBindTimeout
   \   00005A   7C..         MOV       R4,#`??ZDO_EndDeviceBindMatchTimeoutCB::?relay` & 0xff
   \   00005C   7D..         MOV       R5,#(`??ZDO_EndDeviceBindMatchTimeoutCB::?relay` >> 8) & 0xff
   \   00005E   90....       MOV       DPTR,#AIB_MaxBindingTime
   \   000061   12....       LCALL     ??Subroutine236_0 & 0xFFFF
   2040              }
   2041            }
   \                     ??CrossCallReturnLabel_463:
   \   000064   12....       LCALL     `??APS_SetEndDeviceBindTimeout::?relay`; Banked call to: APS_SetEndDeviceBindTimeout
   \   000067   02....       LJMP      ??ZDO_MatchEndDeviceBind_4 & 0xFFFF
   2042            else
   2043            {
   2044                matchED->state = ZDMATCH_SENDING_BINDS;
   \                     ??ZDO_MatchEndDeviceBind_0:
   \   00006A   E0           MOVX      A,@DPTR
   \   00006B   C8           XCH       A,R0
   \   00006C   12....       LCALL     ?Subroutine149 & 0xFFFF
   \                     ??CrossCallReturnLabel_252:
   \   00006F   7402         MOV       A,#0x2
   \   000071   F0           MOVX      @DPTR,A
   2045          
   2046                // Copy the 2nd request's information
   2047                if ( !ZDO_CopyMatchInfo( &(matchED->ed2), bindReq ) )
   \   000072                ; Setup parameters for call to function ZDO_CopyMatchInfo
   \   000072   AC..         MOV       R4,?V4
   \   000074   AD..         MOV       R5,?V5
   \   000076   12....       LCALL     ?Subroutine112 & 0xFFFF
   \                     ??CrossCallReturnLabel_176:
   \   000079   12....       LCALL     `??ZDO_CopyMatchInfo::?relay`; Banked call to: ZDO_CopyMatchInfo
   \   00007C   E9           MOV       A,R1
   \   00007D   700B         JNZ       ??ZDO_MatchEndDeviceBind_5
   2048                {
   2049                  status = ZDP_NO_ENTRY;
   \   00007F   85..82       MOV       DPL,?XSP + 0
   \   000082   85..83       MOV       DPH,?XSP + 1
   \   000085   7488         MOV       A,#-0x78
   \   000087   F0           MOVX      @DPTR,A
   2050                  sendRsp = TRUE;
   \   000088   7E01         MOV       R6,#0x1
   2051                }
   2052          
   2053                // Make a source match for ed1
   2054                matchED->ed1numMatched = ZDO_CompareClusterLists(
   2055                            matchED->ed1.numOutClusters, matchED->ed1.outClusters,
   2056                            matchED->ed2.numInClusters, matchED->ed2.inClusters, ZDOBuildBuf );
   \                     ??ZDO_MatchEndDeviceBind_5:
   \   00008A                ; Setup parameters for call to function ZDO_CompareClusterLists
   \   00008A   75....       MOV       ?V0,#ZDOBuildBuf & 0xff
   \   00008D   75....       MOV       ?V1,#(ZDOBuildBuf >> 8) & 0xff
   \   000090   78..         MOV       R0,#?V0
   \   000092   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000095   12....       LCALL     ?Subroutine85 & 0xFFFF
   \                     ??CrossCallReturnLabel_138:
   \   000098   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   00009B   12....       LCALL     ?Subroutine95 & 0xFFFF
   \                     ??CrossCallReturnLabel_578:
   \   00009E   2428         ADD       A,#0x28
   \   0000A0   12....       LCALL     ?Subroutine134 & 0xFFFF
   \                     ??CrossCallReturnLabel_208:
   \   0000A3   FC           MOV       R4,A
   \   0000A4   12....       LCALL     ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_104:
   \   0000A7   12....       LCALL     ?Subroutine95 & 0xFFFF
   \                     ??CrossCallReturnLabel_579:
   \   0000AA   2414         ADD       A,#0x14
   \   0000AC   12....       LCALL     ?Subroutine134 & 0xFFFF
   \                     ??CrossCallReturnLabel_209:
   \   0000AF   F9           MOV       R1,A
   \   0000B0   12....       LCALL     `??ZDO_CompareClusterLists::?relay`; Banked call to: ZDO_CompareClusterLists
   \   0000B3   7404         MOV       A,#0x4
   \   0000B5   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000B8   12....       LCALL     ?Subroutine94 & 0xFFFF
   \                     ??CrossCallReturnLabel_479:
   \   0000BB   12....       LCALL     ?Subroutine25 & 0xFFFF
   2057                if ( matchED->ed1numMatched )
   \                     ??CrossCallReturnLabel_509:
   \   0000BE   2431         ADD       A,#0x31
   \   0000C0   12....       LCALL     ?Subroutine134 & 0xFFFF
   \                     ??CrossCallReturnLabel_210:
   \   0000C3   6045         JZ        ??ZDO_MatchEndDeviceBind_6
   \   0000C5                ; Setup parameters for call to function osal_mem_alloc
   \   0000C5   12....       LCALL     ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_68:
   \   0000C8   FA           MOV       R2,A
   \   0000C9   E4           CLR       A
   \   0000CA   33           RLC       A
   \   0000CB   FB           MOV       R3,A
   2058                {
   2059                  // Save the match list
   2060                  matchED->ed1Matched = osal_mem_alloc( (short)(matchED->ed1numMatched * sizeof ( uint16 )) );
   \   0000CC   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   0000CF   EA           MOV       A,R2
   \   0000D0   F8           MOV       R0,A
   \   0000D1   EB           MOV       A,R3
   \   0000D2   F9           MOV       R1,A
   \   0000D3   90....       MOV       DPTR,#matchED
   \   0000D6   E0           MOVX      A,@DPTR
   \   0000D7   FC           MOV       R4,A
   \   0000D8   A3           INC       DPTR
   \   0000D9   E0           MOVX      A,@DPTR
   \   0000DA   CC           XCH       A,R4
   \   0000DB   2432         ADD       A,#0x32
   \   0000DD   12....       LCALL     ?Subroutine36 & 0xFFFF
   2061                  if ( matchED->ed1Matched )
   \                     ??CrossCallReturnLabel_562:
   \   0000E0   4B           ORL       A,R3
   \   0000E1   601C         JZ        ??ZDO_MatchEndDeviceBind_7
   2062                  {
   2063                    osal_memcpy( matchED->ed1Matched, ZDOBuildBuf, (matchED->ed1numMatched * sizeof ( uint16 )) );
   \   0000E3                ; Setup parameters for call to function osal_memcpy
   \   0000E3   75..00       MOV       ?V2,#0x0
   \   0000E6   78..         MOV       R0,#?V0
   \   0000E8   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000EB   12....       LCALL     ?Subroutine49 & 0xFFFF
   2064                  }
   \                     ??CrossCallReturnLabel_69:
   \   0000EE   FC           MOV       R4,A
   \   0000EF   E4           CLR       A
   \   0000F0   33           RLC       A
   \   0000F1   FD           MOV       R5,A
   \   0000F2   12....       LCALL     ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_106:
   \   0000F5   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000F8   7403         MOV       A,#0x3
   \   0000FA   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000FD   800B         SJMP      ??ZDO_MatchEndDeviceBind_6
   2065                  else
   2066                  {
   2067                    // Allocation error, stop
   2068                    status = ZDP_NO_ENTRY;
   \                     ??ZDO_MatchEndDeviceBind_7:
   \   0000FF   85..82       MOV       DPL,?XSP + 0
   \   000102   85..83       MOV       DPH,?XSP + 1
   \   000105   7488         MOV       A,#-0x78
   \   000107   F0           MOVX      @DPTR,A
   2069                    sendRsp = TRUE;
   \   000108   7E01         MOV       R6,#0x1
   2070                  }
   2071                }
   2072          
   2073                // Make a source match for ed2
   2074                matchED->ed2numMatched = ZDO_CompareClusterLists(
   2075                            matchED->ed2.numOutClusters, matchED->ed2.outClusters,
   2076                            matchED->ed1.numInClusters, matchED->ed1.inClusters, ZDOBuildBuf );
   \                     ??ZDO_MatchEndDeviceBind_6:
   \   00010A                ; Setup parameters for call to function ZDO_CompareClusterLists
   \   00010A   78..         MOV       R0,#?V0
   \   00010C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00010F   12....       LCALL     ?Subroutine86 & 0xFFFF
   \                     ??CrossCallReturnLabel_140:
   \   000112   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000115   12....       LCALL     ?Subroutine95 & 0xFFFF
   \                     ??CrossCallReturnLabel_580:
   \   000118   2411         ADD       A,#0x11
   \   00011A   12....       LCALL     ?Subroutine134 & 0xFFFF
   \                     ??CrossCallReturnLabel_211:
   \   00011D   FC           MOV       R4,A
   \   00011E   12....       LCALL     ?Subroutine67 & 0xFFFF
   \                     ??CrossCallReturnLabel_108:
   \   000121   12....       LCALL     ?Subroutine95 & 0xFFFF
   \                     ??CrossCallReturnLabel_581:
   \   000124   242B         ADD       A,#0x2b
   \   000126   12....       LCALL     ?Subroutine134 & 0xFFFF
   \                     ??CrossCallReturnLabel_212:
   \   000129   F9           MOV       R1,A
   \   00012A   12....       LCALL     `??ZDO_CompareClusterLists::?relay`; Banked call to: ZDO_CompareClusterLists
   \   00012D   7404         MOV       A,#0x4
   \   00012F   12....       LCALL     ?DEALLOC_XSTACK8
   \   000132   E9           MOV       A,R1
   \   000133   F8           MOV       R0,A
   \   000134   12....       LCALL     ?Subroutine95 & 0xFFFF
   \                     ??CrossCallReturnLabel_582:
   \   000137   2434         ADD       A,#0x34
   \   000139   12....       LCALL     ?Subroutine25 & 0xFFFF
   2077                if ( matchED->ed2numMatched )
   \                     ??CrossCallReturnLabel_510:
   \   00013C   2434         ADD       A,#0x34
   \   00013E   12....       LCALL     ?Subroutine134 & 0xFFFF
   \                     ??CrossCallReturnLabel_213:
   \   000141   6038         JZ        ??ZDO_MatchEndDeviceBind_8
   \   000143                ; Setup parameters for call to function osal_mem_alloc
   \   000143   12....       LCALL     ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_71:
   \   000146   FA           MOV       R2,A
   \   000147   E4           CLR       A
   \   000148   33           RLC       A
   \   000149   FB           MOV       R3,A
   2078                {
   2079                  // Save the match list
   2080                  matchED->ed2Matched = osal_mem_alloc( (short)(matchED->ed2numMatched * sizeof ( uint16 )) );
   \   00014A   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00014D   EA           MOV       A,R2
   \   00014E   F8           MOV       R0,A
   \   00014F   EB           MOV       A,R3
   \   000150   F9           MOV       R1,A
   \   000151   90....       MOV       DPTR,#matchED
   \   000154   E0           MOVX      A,@DPTR
   \   000155   FC           MOV       R4,A
   \   000156   A3           INC       DPTR
   \   000157   E0           MOVX      A,@DPTR
   \   000158   CC           XCH       A,R4
   \   000159   2435         ADD       A,#0x35
   \   00015B   12....       LCALL     ?Subroutine36 & 0xFFFF
   2081                  if ( matchED->ed2Matched )
   \                     ??CrossCallReturnLabel_563:
   \   00015E   4B           ORL       A,R3
   \   00015F   603B         JZ        ??ZDO_MatchEndDeviceBind_9
   2082                  {
   2083                    osal_memcpy( matchED->ed2Matched, ZDOBuildBuf, (matchED->ed2numMatched * sizeof ( uint16 )) );
   \   000161                ; Setup parameters for call to function osal_memcpy
   \   000161   75..00       MOV       ?V2,#0x0
   \   000164   78..         MOV       R0,#?V0
   \   000166   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000169   12....       LCALL     ?Subroutine50 & 0xFFFF
   2084                  }
   \                     ??CrossCallReturnLabel_72:
   \   00016C   FC           MOV       R4,A
   \   00016D   E4           CLR       A
   \   00016E   33           RLC       A
   \   00016F   FD           MOV       R5,A
   \   000170   12....       LCALL     ?Subroutine68 & 0xFFFF
   \                     ??CrossCallReturnLabel_110:
   \   000173   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000176   7403         MOV       A,#0x3
   \   000178   12....       LCALL     ?DEALLOC_XSTACK8
   2085                  else
   2086                  {
   2087                    // Allocation error, stop
   2088                    status = ZDP_NO_ENTRY;
   2089                    sendRsp = TRUE;
   2090                  }
   2091                }
   2092          
   2093                if ( (sendRsp == FALSE) && (matchED->ed1numMatched || matchED->ed2numMatched) )
   \                     ??ZDO_MatchEndDeviceBind_8:
   \   00017B   EE           MOV       A,R6
   \   00017C   A2E0         MOV       C,0xE0 /* A   */.0
   \   00017E   4025         JC        ??ZDO_MatchEndDeviceBind_10
   \   000180   12....       LCALL     ?Subroutine94 & 0xFFFF
   \                     ??CrossCallReturnLabel_480:
   \   000183   12....       LCALL     ?Subroutine134 & 0xFFFF
   \                     ??CrossCallReturnLabel_214:
   \   000186   7008         JNZ       ??ZDO_MatchEndDeviceBind_11
   \   000188   90....       MOV       DPTR,#matchED
   \   00018B   12....       LCALL     ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_80:
   \   00018E   6015         JZ        ??ZDO_MatchEndDeviceBind_10
   2094                {
   2095                  // Do the first unbind/bind state
   2096                  ZDMatchSendState( ZDMATCH_REASON_START, ZDP_SUCCESS, 0 );
   \                     ??ZDO_MatchEndDeviceBind_11:
   \   000190                ; Setup parameters for call to function ZDMatchSendState
   \   000190   7B00         MOV       R3,#0x0
   \   000192   7A00         MOV       R2,#0x0
   \   000194   7900         MOV       R1,#0x0
   \   000196   12....       LCALL     `??ZDMatchSendState::?relay`; Banked call to: ZDMatchSendState
   2097                }
   2098                else
   2099                {
   2100                  status = ZDP_NO_MATCH;
   2101                  sendRsp = TRUE;
   2102                }
   2103            }
   2104          
   2105            if ( sendRsp )
   \   000199   02....       LJMP      ??ZDO_MatchEndDeviceBind_4 & 0xFFFF
   \                     ??ZDO_MatchEndDeviceBind_9:
   \   00019C   85..82       MOV       DPL,?XSP + 0
   \   00019F   85..83       MOV       DPH,?XSP + 1
   \   0001A2   7488         MOV       A,#-0x78
   \   0001A4   F0           MOVX      @DPTR,A
   \                     ??ZDO_MatchEndDeviceBind_10:
   \   0001A5   85..82       MOV       DPL,?XSP + 0
   \   0001A8   85..83       MOV       DPH,?XSP + 1
   \   0001AB   7486         MOV       A,#-0x7a
   \                     ??ZDO_MatchEndDeviceBind_3:
   \   0001AD   F0           MOVX      @DPTR,A
   2106            {
   2107              // send response to this requester
   2108              dstAddr.addrMode = Addr16Bit;
   \   0001AE   7409         MOV       A,#0x9
   \   0001B0   12....       LCALL     ?XSTACK_DISP0_8
   \   0001B3   7402         MOV       A,#0x2
   \   0001B5   12....       LCALL     ?Subroutine154 & 0xFFFF
   2109              dstAddr.addr.shortAddr = bindReq->srcAddr;
   \                     ??CrossCallReturnLabel_260:
   \   0001B8   12....       LCALL     ??Subroutine249_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_546:
   \   0001BB   7401         MOV       A,#0x1
   \   0001BD   12....       LCALL     ?XSTACK_DISP0_8
   \   0001C0   12....       LCALL     ??Subroutine222_0 & 0xFFFF
   2110              ZDP_EndDeviceBindRsp( bindReq->TransSeq, &dstAddr, status, bindReq->SecurityUse );
   \                     ??CrossCallReturnLabel_378:
   \   0001C3                ; Setup parameters for call to function ZDP_SendData
   \   0001C3   85..82       MOV       DPL,?V4
   \   0001C6   85..83       MOV       DPH,?V5
   \   0001C9   A3           INC       DPTR
   \   0001CA   12....       LCALL     ??Subroutine231_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_439:
   \   0001CD   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0001D0   7401         MOV       A,#0x1
   \   0001D2   12....       LCALL     ?XSTACK_DISP100_8
   \   0001D5   88..         MOV       ?V0,R0
   \   0001D7   89..         MOV       ?V1,R1
   \   0001D9   78..         MOV       R0,#?V0
   \   0001DB   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001DE   75..20       MOV       ?V0,#0x20
   \   0001E1   75..80       MOV       ?V1,#-0x80
   \   0001E4   78..         MOV       R0,#?V0
   \   0001E6   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001E9   7901         MOV       R1,#0x1
   \   0001EB   7406         MOV       A,#0x6
   \   0001ED   12....       LCALL     ?XSTACK_DISP102_8
   \   0001F0   AA..         MOV       R2,?V4
   \   0001F2   AB..         MOV       R3,?V5
   \   0001F4   12....       LCALL     `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   0001F7   7405         MOV       A,#0x5
   \   0001F9   12....       LCALL     ?DEALLOC_XSTACK8
   2111          
   2112              if ( matchED->state == ZDMATCH_SENDING_BINDS )
   \   0001FC   12....       LCALL     ?Subroutine73 & 0xFFFF
   \                     ??CrossCallReturnLabel_118:
   \   0001FF   704A         JNZ       ??ZDO_MatchEndDeviceBind_12
   2113              {
   2114                // send response to first requester
   2115                dstAddr.addrMode = Addr16Bit;
   \   000201   7409         MOV       A,#0x9
   \   000203   12....       LCALL     ?XSTACK_DISP0_8
   \   000206   7402         MOV       A,#0x2
   \   000208   12....       LCALL     ?Subroutine47 & 0xFFFF
   2116                dstAddr.addr.shortAddr = matchED->ed1.srcAddr;
   2117                ZDP_EndDeviceBindRsp( matchED->ed1.TransSeq, &dstAddr, status, matchED->ed1.SecurityUse );
   2118              }
   \                     ??CrossCallReturnLabel_66:
   \   00020B   F583         MOV       DPH,A
   \   00020D   8882         MOV       DPL,R0
   \   00020F   12....       LCALL     ??Subroutine249_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_547:
   \   000212   7401         MOV       A,#0x1
   \   000214   12....       LCALL     ?XSTACK_DISP0_8
   \   000217   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   00021A   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00021D   7401         MOV       A,#0x1
   \   00021F   12....       LCALL     ?XSTACK_DISP100_8
   \   000222   88..         MOV       ?V0,R0
   \   000224   89..         MOV       ?V1,R1
   \   000226   78..         MOV       R0,#?V0
   \   000228   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00022B   75..20       MOV       ?V0,#0x20
   \   00022E   75..80       MOV       ?V1,#-0x80
   \   000231   78..         MOV       R0,#?V0
   \   000233   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000236   7901         MOV       R1,#0x1
   \   000238   7406         MOV       A,#0x6
   \   00023A   12....       LCALL     ?XSTACK_DISP102_8
   \   00023D   90....       MOV       DPTR,#matchED
   \   000240   12....       LCALL     ??Subroutine236_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_464:
   \   000243   12....       LCALL     `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   000246   7405         MOV       A,#0x5
   \   000248   12....       LCALL     ?DEALLOC_XSTACK8
   2119          
   2120              // Process ended - release memory used
   2121              ZDO_RemoveMatchMemory();
   \                     ??ZDO_MatchEndDeviceBind_12:
   \   00024B                ; Setup parameters for call to function ZDO_RemoveMatchMemory
   \   00024B   12....       LCALL     `??ZDO_RemoveMatchMemory::?relay`; Banked call to: ZDO_RemoveMatchMemory
   2122            }
   2123          }
   \                     ??ZDO_MatchEndDeviceBind_4:
   \   00024E   740A         MOV       A,#0xa
   \   000250   02....       LJMP      ?Subroutine5 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine149:
   \   000000   12....       LCALL     ?Subroutine195 & 0xFFFF
   \                     ??CrossCallReturnLabel_321:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine195:
   \   000000   242E         ADD       A,#0x2e
   \   000002   F582         MOV       DPL,A
   \   000004   E4           CLR       A
   \   000005   38           ADDC      A,R0
   \   000006   F583         MOV       DPH,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine94:
   \   000000   90....       MOV       DPTR,#matchED
   \   000003                REQUIRE ??Subroutine237_0
   \   000003                ; // Fall through to label ??Subroutine237_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine237_0:
   \   000000   12....       LCALL     ??Subroutine248_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_601:
   \   000003   2431         ADD       A,#0x31
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003   38           ADDC      A,R0
   \   000004   F583         MOV       DPH,A
   \   000006                REQUIRE ??Subroutine240_0
   \   000006                ; // Fall through to label ??Subroutine240_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine240_0:
   \   000000   12....       LCALL     ?Subroutine153 & 0xFFFF
   \                     ??CrossCallReturnLabel_512:
   \   000003   C8           XCH       A,R0
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine153:
   \   000000   E9           MOV       A,R1
   \   000001                REQUIRE ??Subroutine241_0
   \   000001                ; // Fall through to label ??Subroutine241_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine241_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                ; Setup parameters for call to function ZDP_SendData
   \   000001                ; Setup parameters for call to function ZDP_SendData
   \   000001                ; Setup parameters for call to function ZDP_SendData
   \   000001   90....       MOV       DPTR,#matchED
   \   000004   E0           MOVX      A,@DPTR
   \   000005   F8           MOV       R0,A
   \   000006   A3           INC       DPTR
   \   000007   E0           MOVX      A,@DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine86:
   \   000000   12....       LCALL     ?Subroutine174 & 0xFFFF
   \                     ??CrossCallReturnLabel_599:
   \   000003   2412         ADD       A,#0x12
   \   000005   F582         MOV       DPL,A
   \   000007   E4           CLR       A
   \   000008   38           ADDC      A,R0
   \   000009   F583         MOV       DPH,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine85:
   \   000000   12....       LCALL     ?Subroutine174 & 0xFFFF
   \                     ??CrossCallReturnLabel_598:
   \   000003   2429         ADD       A,#0x29
   \   000005   F582         MOV       DPL,A
   \   000007   E4           CLR       A
   \   000008   38           ADDC      A,R0
   \   000009   F583         MOV       DPH,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine68:
   \   000000   12....       LCALL     ?Subroutine174 & 0xFFFF
   \                     ??CrossCallReturnLabel_596:
   \   000003   2435         ADD       A,#0x35
   \   000005   12....       LCALL     ?Subroutine169 & 0xFFFF
   \                     ??CrossCallReturnLabel_521:
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine67:
   \   000000   12....       LCALL     ?Subroutine174 & 0xFFFF
   \                     ??CrossCallReturnLabel_595:
   \   000003   242C         ADD       A,#0x2c
   \   000005   12....       LCALL     ?Subroutine169 & 0xFFFF
   \                     ??CrossCallReturnLabel_520:
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine66:
   \   000000   12....       LCALL     ?Subroutine174 & 0xFFFF
   \                     ??CrossCallReturnLabel_594:
   \   000003   2432         ADD       A,#0x32
   \   000005   12....       LCALL     ?Subroutine169 & 0xFFFF
   \                     ??CrossCallReturnLabel_519:
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine169:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003   38           ADDC      A,R0
   \   000004                REQUIRE ??Subroutine242_0
   \   000004                ; // Fall through to label ??Subroutine242_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine65:
   \   000000   12....       LCALL     ?Subroutine174 & 0xFFFF
   \                     ??CrossCallReturnLabel_593:
   \   000003   2415         ADD       A,#0x15
   \   000005   12....       LCALL     ?Subroutine169 & 0xFFFF
   \                     ??CrossCallReturnLabel_518:
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine112:
   \   000000   90....       MOV       DPTR,#matchED
   \   000003   E0           MOVX      A,@DPTR
   \   000004   2417         ADD       A,#0x17
   \   000006   FA           MOV       R2,A
   \   000007   A3           INC       DPTR
   \   000008   E0           MOVX      A,@DPTR
   \   000009   3400         ADDC      A,#0x0
   \   00000B   FB           MOV       R3,A
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine174:
   \   000000   90....       MOV       DPTR,#matchED
   \   000003                REQUIRE ??Subroutine248_0
   \   000003                ; // Fall through to label ??Subroutine248_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine73:
   \   000000   12....       LCALL     ?Subroutine174 & 0xFFFF
   \                     ??CrossCallReturnLabel_597:
   \   000003   12....       LCALL     ?Subroutine195 & 0xFFFF
   \                     ??CrossCallReturnLabel_320:
   \   000006   E0           MOVX      A,@DPTR
   \   000007   6402         XRL       A,#0x2
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine54:
   \   000000   12....       LCALL     ?Subroutine171 & 0xFFFF
   \                     ??CrossCallReturnLabel_286:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine171:
   \   000000   12....       LCALL     ?Subroutine201 & 0xFFFF
   \                     ??CrossCallReturnLabel_605:
   \   000003   2434         ADD       A,#0x34
   \   000005   F582         MOV       DPL,A
   \   000007   E4           CLR       A
   \   000008   38           ADDC      A,R0
   \   000009   F583         MOV       DPH,A
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine50:
   \   000000   90....       MOV       DPTR,#matchED
   \   000003   12....       LCALL     ?Subroutine171 & 0xFFFF
   \                     ??CrossCallReturnLabel_285:
   \   000006   25E0         ADD       A,0xE0 /* A   */
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine49:
   \   000000   12....       LCALL     ?Subroutine170 & 0xFFFF
   \                     ??CrossCallReturnLabel_283:
   \   000003   25E0         ADD       A,0xE0 /* A   */
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine170:
   \   000000   90....       MOV       DPTR,#matchED
   \   000003   12....       LCALL     ?Subroutine201 & 0xFFFF
   \                     ??CrossCallReturnLabel_604:
   \   000006   2431         ADD       A,#0x31
   \   000008   F582         MOV       DPL,A
   \   00000A   E4           CLR       A
   \   00000B   38           ADDC      A,R0
   \   00000C   F583         MOV       DPH,A
   \   00000E   E0           MOVX      A,@DPTR
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine47:
   \   000000   12....       LCALL     ??Subroutine241_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_514:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   E8           MOV       A,R0
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   12....       LCALL     ?Subroutine153 & 0xFFFF
   \                     ??CrossCallReturnLabel_513:
   \   000006   F583         MOV       DPH,A
   \   000008   8882         MOV       DPL,R0
   \   00000A   A3           INC       DPTR
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   F5..         MOV       ?V0,A
   \   00000E   78..         MOV       R0,#?V0
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003   3C           ADDC      A,R4
   \   000004   F583         MOV       DPH,A
   \   000006                REQUIRE ??Subroutine254_0
   \   000006                ; // Fall through to label ??Subroutine254_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine254_0:
   \   000000   E8           MOV       A,R0
   \   000001                REQUIRE ??Subroutine255_0
   \   000001                ; // Fall through to label ??Subroutine255_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine255_0:
   \   000000   12....       LCALL     ??Subroutine268_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_661:
   \   000003   EA           MOV       A,R2
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine95:
   \   000000   90....       MOV       DPTR,#matchED
   \   000003                REQUIRE ??Subroutine257_0
   \   000003                ; // Fall through to label ??Subroutine257_0
   2124          
   2125          /*********************************************************************
   2126           * @fn      ZDO_RemoveMatchMemory()
   2127           *
   2128           * @brief   Called to clear the memory used for the end device bind.
   2129           *
   2130           * @param  none
   2131           *
   2132           * @return  none
   2133           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2134          static void ZDO_RemoveMatchMemory( void )
   \                     ZDO_RemoveMatchMemory:
   2135          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2136            if ( matchED != NULL )
   \   000004   90....       MOV       DPTR,#matchED
   \   000007   12....       LCALL     ??Subroutine239_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_496:
   \   00000A   6075         JZ        ??ZDO_RemoveMatchMemory_0
   2137            {
   2138              if ( matchED->ed2Matched != NULL )
   \   00000C   E0           MOVX      A,@DPTR
   \   00000D   C8           XCH       A,R0
   \   00000E   2435         ADD       A,#0x35
   \   000010   12....       LCALL     ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_503:
   \   000013   6006         JZ        ??ZDO_RemoveMatchMemory_1
   2139                osal_mem_free( matchED->ed2Matched );
   \   000015                ; Setup parameters for call to function osal_mem_free
   \   000015   12....       LCALL     ?Subroutine68 & 0xFFFF
   \                     ??CrossCallReturnLabel_111:
   \   000018   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2140              if ( matchED->ed1Matched != NULL )
   \                     ??ZDO_RemoveMatchMemory_1:
   \   00001B   12....       LCALL     ?Subroutine95 & 0xFFFF
   \                     ??CrossCallReturnLabel_583:
   \   00001E   2432         ADD       A,#0x32
   \   000020   12....       LCALL     ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_504:
   \   000023   6006         JZ        ??ZDO_RemoveMatchMemory_2
   2141                osal_mem_free( matchED->ed1Matched );
   \   000025                ; Setup parameters for call to function osal_mem_free
   \   000025   12....       LCALL     ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_107:
   \   000028   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2142          
   2143              if ( matchED->ed1.inClusters != NULL )
   \                     ??ZDO_RemoveMatchMemory_2:
   \   00002B   12....       LCALL     ?Subroutine95 & 0xFFFF
   \                     ??CrossCallReturnLabel_584:
   \   00002E   2412         ADD       A,#0x12
   \   000030   12....       LCALL     ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_505:
   \   000033   6009         JZ        ??ZDO_RemoveMatchMemory_3
   2144                osal_mem_free( matchED->ed1.inClusters );
   \   000035                ; Setup parameters for call to function osal_mem_free
   \   000035   12....       LCALL     ?Subroutine86 & 0xFFFF
   \                     ??CrossCallReturnLabel_141:
   \   000038   12....       LCALL     ??Subroutine236_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_465:
   \   00003B   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2145          
   2146              if ( matchED->ed1.outClusters != NULL )
   \                     ??ZDO_RemoveMatchMemory_3:
   \   00003E   12....       LCALL     ?Subroutine95 & 0xFFFF
   \                     ??CrossCallReturnLabel_585:
   \   000041   2415         ADD       A,#0x15
   \   000043   12....       LCALL     ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_506:
   \   000046   6006         JZ        ??ZDO_RemoveMatchMemory_4
   2147                osal_mem_free( matchED->ed1.outClusters );
   \   000048                ; Setup parameters for call to function osal_mem_free
   \   000048   12....       LCALL     ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_105:
   \   00004B   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2148          
   2149              if ( matchED->ed2.inClusters != NULL )
   \                     ??ZDO_RemoveMatchMemory_4:
   \   00004E   12....       LCALL     ?Subroutine95 & 0xFFFF
   \                     ??CrossCallReturnLabel_586:
   \   000051   2429         ADD       A,#0x29
   \   000053   12....       LCALL     ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_507:
   \   000056   6009         JZ        ??ZDO_RemoveMatchMemory_5
   2150                osal_mem_free( matchED->ed2.inClusters );
   \   000058                ; Setup parameters for call to function osal_mem_free
   \   000058   12....       LCALL     ?Subroutine85 & 0xFFFF
   \                     ??CrossCallReturnLabel_139:
   \   00005B   12....       LCALL     ??Subroutine236_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_466:
   \   00005E   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2151          
   2152              if ( matchED->ed2.outClusters != NULL )
   \                     ??ZDO_RemoveMatchMemory_5:
   \   000061   12....       LCALL     ?Subroutine95 & 0xFFFF
   \                     ??CrossCallReturnLabel_587:
   \   000064   242C         ADD       A,#0x2c
   \   000066   12....       LCALL     ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_508:
   \   000069   6006         JZ        ??ZDO_RemoveMatchMemory_6
   2153                osal_mem_free( matchED->ed2.outClusters );
   \   00006B                ; Setup parameters for call to function osal_mem_free
   \   00006B   12....       LCALL     ?Subroutine67 & 0xFFFF
   \                     ??CrossCallReturnLabel_109:
   \   00006E   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2154          
   2155              osal_mem_free( matchED );
   \                     ??ZDO_RemoveMatchMemory_6:
   \   000071                ; Setup parameters for call to function osal_mem_free
   \   000071   90....       MOV       DPTR,#matchED
   \   000074   12....       LCALL     ??Subroutine236_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_467:
   \   000077   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2156          
   2157              matchED = (ZDMatchEndDeviceBind_t *)NULL;
   \   00007A   90....       MOV       DPTR,#matchED
   \   00007D   E4           CLR       A
   \   00007E   F0           MOVX      @DPTR,A
   \   00007F   A3           INC       DPTR
   \   000080   F0           MOVX      @DPTR,A
   2158            }
   2159          }
   \                     ??ZDO_RemoveMatchMemory_0:
   \   000081                REQUIRE ?Subroutine0
   \   000081                ; // Fall through to label ?Subroutine0
   2160          
   2161          /*********************************************************************
   2162           * @fn      ZDO_CopyMatchInfo()
   2163           *
   2164           * @brief   Called to copy memory used for the end device bind.
   2165           *
   2166           * @param  srcReq - source information
   2167           * @param  dstReq - destination location
   2168           *
   2169           * @return  TRUE if copy was successful.
   2170           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine108:
   \   000000   EE           MOV       A,R6
   \   000001   2412         ADD       A,#0x12
   \   000003                REQUIRE ??Subroutine234_0
   \   000003                ; // Fall through to label ??Subroutine234_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine234_0:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003   3F           ADDC      A,R7
   \   000004                REQUIRE ??Subroutine235_0
   \   000004                ; // Fall through to label ??Subroutine235_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2171          static uint8 ZDO_CopyMatchInfo( ZDEndDeviceBind_t *destReq, ZDEndDeviceBind_t *srcReq )
   \                     ZDO_CopyMatchInfo:
   2172          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   8C..         MOV       ?V4,R4
   \   00000B   8D..         MOV       ?V5,R5
   2173            uint8 allOK = TRUE;
   \   00000D   75..01       MOV       ?V3,#0x1
   2174          
   2175            // Copy bind information into the match info structure
   2176            osal_memcpy( (uint8 *)destReq, srcReq, sizeof ( ZDEndDeviceBind_t ) );
   \   000010                ; Setup parameters for call to function osal_memcpy
   \   000010   8C..         MOV       ?V0,R4
   \   000012   8D..         MOV       ?V1,R5
   \   000014   75..00       MOV       ?V2,#0x0
   \   000017   78..         MOV       R0,#?V0
   \   000019   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00001C   7C17         MOV       R4,#0x17
   \   00001E   7D00         MOV       R5,#0x0
   \   000020   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000023   7403         MOV       A,#0x3
   \   000025   12....       LCALL     ?DEALLOC_XSTACK8
   2177          
   2178            // Initialize the destination cluster pointers
   2179            destReq->inClusters = NULL;
   \   000028   EE           MOV       A,R6
   \   000029   2412         ADD       A,#0x12
   \   00002B   12....       LCALL     ??Subroutine244_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_524:
   \   00002E   F0           MOVX      @DPTR,A
   \   00002F   A3           INC       DPTR
   \   000030   F0           MOVX      @DPTR,A
   2180            destReq->outClusters = NULL;
   \   000031   EE           MOV       A,R6
   \   000032   2415         ADD       A,#0x15
   \   000034   12....       LCALL     ??Subroutine244_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_525:
   \   000037   F0           MOVX      @DPTR,A
   \   000038   A3           INC       DPTR
   \   000039   F0           MOVX      @DPTR,A
   2181          
   2182            // Copy input cluster IDs
   2183            if ( srcReq->numInClusters )
   \   00003A   E5..         MOV       A,?V4
   \   00003C   2411         ADD       A,#0x11
   \   00003E   12....       LCALL     ?Subroutine190 & 0xFFFF
   \                     ??CrossCallReturnLabel_310:
   \   000041   6037         JZ        ??ZDO_CopyMatchInfo_0
   \   000043                ; Setup parameters for call to function osal_mem_alloc
   \   000043   12....       LCALL     ??Subroutine270_0 & 0xFFFF
   2184            {
   2185              destReq->inClusters = osal_mem_alloc( (short)(srcReq->numInClusters * sizeof ( uint16 )) );
   \                     ??CrossCallReturnLabel_671:
   \   000046   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000049   8A..         MOV       ?V0,R2
   \   00004B   8B..         MOV       ?V1,R3
   \   00004D   A8..         MOV       R0,?V0
   \   00004F   A9..         MOV       R1,?V1
   \   000051   12....       LCALL     ?Subroutine144 & 0xFFFF
   \                     ??CrossCallReturnLabel_241:
   \   000054   12....       LCALL     ??Subroutine246_0 & 0xFFFF
   2186              if ( destReq->inClusters )
   \                     ??CrossCallReturnLabel_531:
   \   000057   601E         JZ        ??ZDO_CopyMatchInfo_1
   2187              {
   2188                // Copy the clusters
   2189                osal_memcpy( (uint8*)(destReq->inClusters), (uint8 *)(srcReq->inClusters),
   2190                                (srcReq->numInClusters * sizeof ( uint16 )) );
   \   000059                ; Setup parameters for call to function osal_memcpy
   \   000059   E5..         MOV       A,?V4
   \   00005B   2412         ADD       A,#0x12
   \   00005D   12....       LCALL     ?Subroutine105 & 0xFFFF
   2191              }
   \                     ??CrossCallReturnLabel_170:
   \   000060   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000063   E5..         MOV       A,?V4
   \   000065   2411         ADD       A,#0x11
   \   000067   12....       LCALL     ?Subroutine117 & 0xFFFF
   \                     ??CrossCallReturnLabel_529:
   \   00006A   12....       LCALL     ?Subroutine108 & 0xFFFF
   \                     ??CrossCallReturnLabel_476:
   \   00006D   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000070   7403         MOV       A,#0x3
   \   000072   12....       LCALL     ?DEALLOC_XSTACK8
   \   000075   8003         SJMP      ??ZDO_CopyMatchInfo_0
   2192              else
   2193                allOK = FALSE;
   \                     ??ZDO_CopyMatchInfo_1:
   \   000077   75..00       MOV       ?V3,#0x0
   2194            }
   2195          
   2196            // Copy output cluster IDs
   2197            if ( srcReq->numOutClusters )
   \                     ??ZDO_CopyMatchInfo_0:
   \   00007A   E5..         MOV       A,?V4
   \   00007C   2414         ADD       A,#0x14
   \   00007E   12....       LCALL     ?Subroutine190 & 0xFFFF
   \                     ??CrossCallReturnLabel_311:
   \   000081   6035         JZ        ??ZDO_CopyMatchInfo_2
   \   000083                ; Setup parameters for call to function osal_mem_alloc
   \   000083   12....       LCALL     ??Subroutine270_0 & 0xFFFF
   2198            {
   2199              destReq->outClusters = osal_mem_alloc( (short)(srcReq->numOutClusters * sizeof ( uint16 )) );
   \                     ??CrossCallReturnLabel_672:
   \   000086   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000089   8A..         MOV       ?V0,R2
   \   00008B   8B..         MOV       ?V1,R3
   \   00008D   A8..         MOV       R0,?V0
   \   00008F   A9..         MOV       R1,?V1
   \   000091   12....       LCALL     ?Subroutine192 & 0xFFFF
   \                     ??CrossCallReturnLabel_313:
   \   000094   12....       LCALL     ??Subroutine246_0 & 0xFFFF
   2200              if ( destReq->outClusters )
   \                     ??CrossCallReturnLabel_532:
   \   000097   6049         JZ        ??ZDO_CopyMatchInfo_3
   2201              {
   2202                // Copy the clusters
   2203                osal_memcpy( (uint8 *)(destReq->outClusters), (uint8 *)(srcReq->outClusters),
   2204                                (srcReq->numOutClusters * sizeof ( uint16 )) );
   \   000099                ; Setup parameters for call to function osal_memcpy
   \   000099   E5..         MOV       A,?V4
   \   00009B   2415         ADD       A,#0x15
   \   00009D   12....       LCALL     ?Subroutine105 & 0xFFFF
   2205              }
   \                     ??CrossCallReturnLabel_171:
   \   0000A0   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000A3   E5..         MOV       A,?V4
   \   0000A5   2414         ADD       A,#0x14
   \   0000A7   12....       LCALL     ?Subroutine117 & 0xFFFF
   \                     ??CrossCallReturnLabel_530:
   \   0000AA   EE           MOV       A,R6
   \   0000AB   2415         ADD       A,#0x15
   \   0000AD   12....       LCALL     ??Subroutine234_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_474:
   \   0000B0   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000B3   7403         MOV       A,#0x3
   \   0000B5   12....       LCALL     ?DEALLOC_XSTACK8
   2206              else
   2207                allOK = FALSE;
   2208            }
   2209          
   2210            if ( !allOK )
   \                     ??ZDO_CopyMatchInfo_2:
   \   0000B8   E5..         MOV       A,?V3
   \   0000BA   A2E0         MOV       C,0xE0 /* A   */.0
   \   0000BC   401F         JC        ??ZDO_CopyMatchInfo_4
   2211            {
   2212              if ( destReq->inClusters != NULL )
   \                     ??ZDO_CopyMatchInfo_5:
   \   0000BE   12....       LCALL     ?Subroutine144 & 0xFFFF
   \                     ??CrossCallReturnLabel_242:
   \   0000C1   12....       LCALL     ??Subroutine238_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_499:
   \   0000C4   6006         JZ        ??ZDO_CopyMatchInfo_6
   2213                osal_mem_free( destReq->inClusters );
   \   0000C6                ; Setup parameters for call to function osal_mem_free
   \   0000C6   12....       LCALL     ?Subroutine108 & 0xFFFF
   \                     ??CrossCallReturnLabel_477:
   \   0000C9   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2214              if ( destReq->outClusters != NULL )
   \                     ??ZDO_CopyMatchInfo_6:
   \   0000CC   12....       LCALL     ?Subroutine192 & 0xFFFF
   \                     ??CrossCallReturnLabel_314:
   \   0000CF   12....       LCALL     ??Subroutine238_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_500:
   \   0000D2   6009         JZ        ??ZDO_CopyMatchInfo_4
   2215                osal_mem_free( destReq->outClusters );
   \   0000D4                ; Setup parameters for call to function osal_mem_free
   \   0000D4   EE           MOV       A,R6
   \   0000D5   2415         ADD       A,#0x15
   \   0000D7   12....       LCALL     ??Subroutine234_0 & 0xFFFF
   2216            }
   \                     ??CrossCallReturnLabel_475:
   \   0000DA   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2217          
   2218            return ( allOK );
   \                     ??ZDO_CopyMatchInfo_4:
   \   0000DD   A9..         MOV       R1,?V3
   \   0000DF   02....       LJMP      ??Subroutine274_0 & 0xFFFF
   \                     ??ZDO_CopyMatchInfo_3:
   \   0000E2   75..00       MOV       ?V3,#0x0
   \   0000E5   80D7         SJMP      ??ZDO_CopyMatchInfo_5
   2219          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine117:
   \   000000   12....       LCALL     ?Subroutine190 & 0xFFFF
   \                     ??CrossCallReturnLabel_312:
   \   000003                REQUIRE ??Subroutine245_0
   \   000003                ; // Fall through to label ??Subroutine245_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine105:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003   35..         ADDC      A,?V5
   \   000005   12....       LCALL     ?Subroutine178 & 0xFFFF
   \                     ??CrossCallReturnLabel_342:
   \   000008   78..         MOV       R0,#?V0
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine246_0:
   \   000000   F583         MOV       DPH,A
   \   000002                REQUIRE ??Subroutine247_0
   \   000002                ; // Fall through to label ??Subroutine247_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine247_0:
   \   000000   12....       LCALL     ?Subroutine159 & 0xFFFF
   \                     ??CrossCallReturnLabel_660:
   \   000003   E8           MOV       A,R0
   \   000004   49           ORL       A,R1
   \   000005   22           RET
   2220          
   2221          /*********************************************************************
   2222           * @fn      ZDMatchSendState()
   2223           *
   2224           * @brief   State machine for the End device match message algorithm.
   2225           *
   2226           * @param  reason - state of algoritm
   2227           * @param  status - initial message status
   2228           * @param  TransSeq - next transaction sequence number
   2229           *
   2230           * @return  FALSE if error and we are not currently matching, TRUE
   2231           *          if success.
   2232           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2233          uint8 ZDMatchSendState( uint8 reason, uint8 status, uint8 TransSeq )
   \                     ZDMatchSendState:
   2234          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV       A,#-0x15
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   7401         MOV       A,#0x1
   \   00000C   12....       LCALL     ?XSTACK_DISP0_8
   \   00000F   EA           MOV       A,R2
   \   000010   F0           MOVX      @DPTR,A
   \   000011   7402         MOV       A,#0x2
   \   000013   12....       LCALL     ?XSTACK_DISP0_8
   \   000016   EB           MOV       A,R3
   \   000017   F0           MOVX      @DPTR,A
   \   000018   89..         MOV       ?V2,R1
   2235            uint8 *dstIEEEAddr = NULL;
   \   00001A   75..00       MOV       ?V4,#0x0
   \   00001D   75..00       MOV       ?V5,#0x0
   2236            uint8 dstEP = 0xFF;
   \   000020   75..FF       MOV       ?V3,#-0x1
   2237            zAddrType_t dstAddr;
   2238            zAddrType_t destinationAddr;
   2239            uint16 msgType;
   2240            uint16 clusterID = 0xFFFF;
   \   000023   7EFF         MOV       R6,#-0x1
   \   000025   7FFF         MOV       R7,#-0x1
   2241            ZDEndDeviceBind_t *ed = NULL;
   \   000027   75..00       MOV       ?V6,#0x0
   \   00002A   75..00       MOV       ?V7,#0x0
   2242            uint8 rspStatus = ZDP_SUCCESS;
   \   00002D   85..82       MOV       DPL,?XSP + 0
   \   000030   85..83       MOV       DPH,?XSP + 1
   \   000033   E4           CLR       A
   \   000034   12....       LCALL     ?Subroutine47 & 0xFFFF
   2243          
   2244            if ( matchED == NULL )
   \                     ??CrossCallReturnLabel_67:
   \   000037   F9           MOV       R1,A
   \   000038   E8           MOV       A,R0
   \   000039   49           ORL       A,R1
   \   00003A   6020         JZ        ??ZDMatchSendState_0
   2245              return ( FALSE );
   2246          
   2247            // Check sequence number
   2248            if ( reason == ZDMATCH_REASON_BIND_RSP || reason == ZDMATCH_REASON_UNBIND_RSP )
   \   00003C   7403         MOV       A,#0x3
   \   00003E   65..         XRL       A,?V2
   \   000040   6006         JZ        ??ZDMatchSendState_1
   \   000042   7402         MOV       A,#0x2
   \   000044   65..         XRL       A,?V2
   \   000046   7019         JNZ       ??ZDMatchSendState_2
   2249            {
   2250              if ( TransSeq != matchED->transSeq )
   \                     ??ZDMatchSendState_1:
   \   000048   7402         MOV       A,#0x2
   \   00004A   12....       LCALL     ?XSTACK_DISP0_8
   \   00004D   E0           MOVX      A,@DPTR
   \   00004E   F9           MOV       R1,A
   \   00004F   90....       MOV       DPTR,#matchED + 1
   \   000052   E0           MOVX      A,@DPTR
   \   000053   C8           XCH       A,R0
   \   000054   2430         ADD       A,#0x30
   \   000056   12....       LCALL     ?Subroutine134 & 0xFFFF
   \                     ??CrossCallReturnLabel_215:
   \   000059   69           XRL       A,R1
   \   00005A   6005         JZ        ??ZDMatchSendState_2
   2251                return( FALSE ); // ignore the message
   \                     ??ZDMatchSendState_0:
   \   00005C   7900         MOV       R1,#0x0
   \   00005E   02....       LJMP      ??ZDMatchSendState_3 & 0xFFFF
   2252            }
   2253          
   2254            // turn off timer
   2255            APS_SetEndDeviceBindTimeout( 0, ZDO_EndDeviceBindMatchTimeoutCB );
   \                     ??ZDMatchSendState_2:
   \   000061                ; Setup parameters for call to function APS_SetEndDeviceBindTimeout
   \   000061   7C..         MOV       R4,#`??ZDO_EndDeviceBindMatchTimeoutCB::?relay` & 0xff
   \   000063   7D..         MOV       R5,#(`??ZDO_EndDeviceBindMatchTimeoutCB::?relay` >> 8) & 0xff
   \   000065   7A00         MOV       R2,#0x0
   \   000067   7B00         MOV       R3,#0x0
   \   000069   12....       LCALL     `??APS_SetEndDeviceBindTimeout::?relay`; Banked call to: APS_SetEndDeviceBindTimeout
   2256          
   2257            if ( reason == ZDMATCH_REASON_TIMEOUT )
   \   00006C   7401         MOV       A,#0x1
   \   00006E   65..         XRL       A,?V2
   \   000070   700A         JNZ       ??ZDMatchSendState_4
   2258            {
   2259              rspStatus = ZDP_TIMEOUT;    // The process will stop
   \   000072   85..82       MOV       DPL,?XSP + 0
   \   000075   85..83       MOV       DPH,?XSP + 1
   \   000078   7485         MOV       A,#-0x7b
   \   00007A   8045         SJMP      ??ZDMatchSendState_5
   2260            }
   2261          
   2262            if ( reason == ZDMATCH_REASON_START || reason == ZDMATCH_REASON_BIND_RSP )
   \                     ??ZDMatchSendState_4:
   \   00007C   E5..         MOV       A,?V2
   \   00007E   6006         JZ        ??ZDMatchSendState_6
   \   000080   7403         MOV       A,#0x3
   \   000082   65..         XRL       A,?V2
   \   000084   701D         JNZ       ??ZDMatchSendState_7
   2263            {
   2264              matchED->sending = ZDMATCH_SENDING_UNBIND;
   \                     ??ZDMatchSendState_6:
   \   000086   90....       MOV       DPTR,#matchED
   \   000089   12....       LCALL     ?Subroutine77 & 0xFFFF
   \                     ??CrossCallReturnLabel_126:
   \   00008C   F0           MOVX      @DPTR,A
   2265          
   2266              if ( reason == ZDMATCH_REASON_BIND_RSP && status != ZDP_SUCCESS )
   \   00008D   7403         MOV       A,#0x3
   \   00008F   65..         XRL       A,?V2
   \   000091   7031         JNZ       ??ZDMatchSendState_8
   \   000093   7401         MOV       A,#0x1
   \   000095   12....       LCALL     ?XSTACK_DISP0_8
   \   000098   E0           MOVX      A,@DPTR
   \   000099   602D         JZ        ??ZDMatchSendState_9
   2267              {
   2268                rspStatus = status;
   \   00009B   85..82       MOV       DPL,?XSP + 0
   \   00009E   85..83       MOV       DPH,?XSP + 1
   \   0000A1   801E         SJMP      ??ZDMatchSendState_5
   2269              }
   2270            }
   2271            else if ( reason == ZDMATCH_REASON_UNBIND_RSP )
   \                     ??ZDMatchSendState_7:
   \   0000A3   7402         MOV       A,#0x2
   \   0000A5   65..         XRL       A,?V2
   \   0000A7   701F         JNZ       ??ZDMatchSendState_9
   2272            {
   2273              if ( status == ZDP_SUCCESS )
   \   0000A9   7401         MOV       A,#0x1
   \   0000AB   12....       LCALL     ?XSTACK_DISP0_8
   \   0000AE   E0           MOVX      A,@DPTR
   \   0000AF   90....       MOV       DPTR,#matchED
   \   0000B2   7005         JNZ       ??ZDMatchSendState_10
   2274              {
   2275                matchED->sending = ZDMATCH_SENDING_UNBIND;
   \   0000B4   12....       LCALL     ?Subroutine77 & 0xFFFF
   2276              }
   \                     ??CrossCallReturnLabel_127:
   \   0000B7   8008         SJMP      ??ZDMatchSendState_5
   2277              else
   2278              {
   2279                matchED->sending = ZDMATCH_SENDING_BIND;
   \                     ??ZDMatchSendState_10:
   \   0000B9   12....       LCALL     ??Subroutine257_0 & 0xFFFF
   2280              }
   2281            }
   \                     ??CrossCallReturnLabel_574:
   \   0000BC   12....       LCALL     ?Subroutine207 & 0xFFFF
   \                     ??CrossCallReturnLabel_338:
   \   0000BF   7402         MOV       A,#0x2
   \                     ??ZDMatchSendState_5:
   \   0000C1   F0           MOVX      @DPTR,A
   \   0000C2   8004         SJMP      ??ZDMatchSendState_9
   2282          
   2283            if ( reason != ZDMATCH_REASON_START && matchED->sending == ZDMATCH_SENDING_UNBIND )
   \                     ??ZDMatchSendState_8:
   \   0000C4   E5..         MOV       A,?V2
   \   0000C6   601E         JZ        ??ZDMatchSendState_11
   \                     ??ZDMatchSendState_9:
   \   0000C8   12....       LCALL     ?Subroutine74 & 0xFFFF
   \                     ??CrossCallReturnLabel_120:
   \   0000CB   7019         JNZ       ??ZDMatchSendState_11
   2284            {
   2285              // Move to the next cluster ID
   2286              if ( matchED->ed1numMatched )
   \   0000CD   12....       LCALL     ?Subroutine72 & 0xFFFF
   \                     ??CrossCallReturnLabel_116:
   \   0000D0   6005         JZ        ??ZDMatchSendState_12
   2287                matchED->ed1numMatched--;
   \   0000D2   12....       LCALL     ??Subroutine237_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_478:
   \   0000D5   800A         SJMP      ??ZDMatchSendState_13
   2288              else if ( matchED->ed2numMatched )
   \                     ??ZDMatchSendState_12:
   \   0000D7   12....       LCALL     ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_81:
   \   0000DA   600A         JZ        ??ZDMatchSendState_11
   2289                matchED->ed2numMatched--;
   \   0000DC   12....       LCALL     ?Subroutine95 & 0xFFFF
   2290            }
   \                     ??CrossCallReturnLabel_588:
   \   0000DF   2434         ADD       A,#0x34
   \                     ??ZDMatchSendState_13:
   \   0000E1   12....       LCALL     ?Subroutine134 & 0xFFFF
   \                     ??CrossCallReturnLabel_216:
   \   0000E4   2E           ADD       A,R6
   \   0000E5   F0           MOVX      @DPTR,A
   2291          
   2292            // What message do we send now
   2293            if ( matchED->ed1numMatched )
   \                     ??ZDMatchSendState_11:
   \   0000E6   12....       LCALL     ?Subroutine72 & 0xFFFF
   \                     ??CrossCallReturnLabel_117:
   \   0000E9   601C         JZ        ??ZDMatchSendState_14
   2294            {
   2295              ed = &(matchED->ed1);
   \   0000EB   E0           MOVX      A,@DPTR
   \   0000EC   F5..         MOV       ?V6,A
   \   0000EE   A3           INC       DPTR
   \   0000EF   E0           MOVX      A,@DPTR
   \   0000F0   F5..         MOV       ?V7,A
   2296              clusterID = matchED->ed1Matched[matchED->ed1numMatched-1];
   \   0000F2   12....       LCALL     ?Subroutine49 & 0xFFFF
   2297              dstIEEEAddr = matchED->ed2.ieeeAddr;
   2298              dstEP = matchED->ed2.endpoint;
   2299            }
   \                     ??CrossCallReturnLabel_70:
   \   0000F5   12....       LCALL     ?Subroutine209 & 0xFFFF
   \                     ??CrossCallReturnLabel_617:
   \   0000F8   CA           XCH       A,R2
   \   0000F9   2432         ADD       A,#0x32
   \   0000FB   12....       LCALL     ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_78:
   \   0000FE   241D         ADD       A,#0x1d
   \   000100   12....       LCALL     ?Subroutine87 & 0xFFFF
   \                     ??CrossCallReturnLabel_142:
   \   000103   2425         ADD       A,#0x25
   \   000105   8026         SJMP      ??ZDMatchSendState_15
   2300            else if ( matchED->ed2numMatched )
   \                     ??ZDMatchSendState_14:
   \   000107   12....       LCALL     ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_82:
   \   00010A   6026         JZ        ??ZDMatchSendState_16
   2301            {
   2302              ed = &(matchED->ed2);
   \   00010C   90....       MOV       DPTR,#matchED
   \   00010F   E0           MOVX      A,@DPTR
   \   000110   2417         ADD       A,#0x17
   \   000112   F5..         MOV       ?V6,A
   \   000114   A3           INC       DPTR
   \   000115   E0           MOVX      A,@DPTR
   \   000116   3400         ADDC      A,#0x0
   \   000118   F5..         MOV       ?V7,A
   2303              clusterID = matchED->ed2Matched[matchED->ed2numMatched-1];
   \   00011A   12....       LCALL     ?Subroutine50 & 0xFFFF
   2304              dstIEEEAddr = matchED->ed1.ieeeAddr;
   2305              dstEP = matchED->ed1.endpoint;
   2306            }
   \                     ??CrossCallReturnLabel_73:
   \   00011D   12....       LCALL     ?Subroutine209 & 0xFFFF
   \                     ??CrossCallReturnLabel_618:
   \   000120   CA           XCH       A,R2
   \   000121   2435         ADD       A,#0x35
   \   000123   12....       LCALL     ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_79:
   \   000126   2406         ADD       A,#0x6
   \   000128   12....       LCALL     ?Subroutine87 & 0xFFFF
   \                     ??CrossCallReturnLabel_143:
   \   00012B   240E         ADD       A,#0xe
   \                     ??ZDMatchSendState_15:
   \   00012D   12....       LCALL     ?Subroutine134 & 0xFFFF
   \                     ??CrossCallReturnLabel_217:
   \   000130   F5..         MOV       ?V3,A
   2307          
   2308            dstAddr.addrMode = Addr16Bit;
   \                     ??ZDMatchSendState_16:
   \   000132   740B         MOV       A,#0xb
   \   000134   12....       LCALL     ?XSTACK_DISP0_8
   \   000137   7402         MOV       A,#0x2
   \   000139   12....       LCALL     ?Subroutine27 & 0xFFFF
   2309          
   2310            // Send the next message
   2311            if ( rspStatus == ZDP_SUCCESS && ed )
   \                     ??CrossCallReturnLabel_33:
   \   00013C   6003         JZ        $+5
   \   00013E   02....       LJMP      ??ZDMatchSendState_17 & 0xFFFF
   \   000141   E5..         MOV       A,?V6
   \   000143   45..         ORL       A,?V7
   \   000145   7003         JNZ       $+5
   \   000147   02....       LJMP      ??ZDMatchSendState_17 & 0xFFFF
   2312            {
   2313              // Send unbind/bind message to source
   2314              if ( matchED->sending == ZDMATCH_SENDING_UNBIND )
   \   00014A   12....       LCALL     ?Subroutine74 & 0xFFFF
   \                     ??CrossCallReturnLabel_121:
   \   00014D   7005         JNZ       ??ZDMatchSendState_18
   2315                msgType = Unbind_req;
   \   00014F   75..22       MOV       ?V0,#0x22
   \   000152   8003         SJMP      ??ZDMatchSendState_19
   2316              else
   2317                msgType = Bind_req;
   \                     ??ZDMatchSendState_18:
   \   000154   75..21       MOV       ?V0,#0x21
   \                     ??ZDMatchSendState_19:
   \   000157   75..00       MOV       ?V1,#0x0
   2318          
   2319              dstAddr.addr.shortAddr = ed->srcAddr;
   \   00015A   85..82       MOV       DPL,?V6
   \   00015D   85..83       MOV       DPH,?V7
   \   000160   12....       LCALL     ??Subroutine249_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_548:
   \   000163   7403         MOV       A,#0x3
   \   000165   12....       LCALL     ?XSTACK_DISP0_8
   \   000168   12....       LCALL     ??Subroutine222_0 & 0xFFFF
   2320          
   2321              // Save off the transaction sequence number
   2322              matchED->transSeq = ZDP_TransID;
   \                     ??CrossCallReturnLabel_379:
   \   00016B   90....       MOV       DPTR,#ZDP_TransID
   \   00016E   E0           MOVX      A,@DPTR
   \   00016F   C0E0         PUSH      A
   \   000171   12....       LCALL     ?Subroutine95 & 0xFFFF
   \                     ??CrossCallReturnLabel_589:
   \   000174   2430         ADD       A,#0x30
   \   000176   F582         MOV       DPL,A
   \   000178   E4           CLR       A
   \   000179   38           ADDC      A,R0
   \   00017A   F583         MOV       DPH,A
   \   00017C   D0E0         POP       A
   \   00017E   F0           MOVX      @DPTR,A
   2323          
   2324              destinationAddr.addrMode = Addr64Bit;
   \   00017F   7414         MOV       A,#0x14
   \   000181   12....       LCALL     ?XSTACK_DISP0_8
   \   000184   7403         MOV       A,#0x3
   \   000186   F0           MOVX      @DPTR,A
   2325              osal_cpyExtAddr( destinationAddr.addr.extAddr, dstIEEEAddr );
   \   000187                ; Setup parameters for call to function sAddrExtCpy
   \   000187   AC..         MOV       R4,?V4
   \   000189   AD..         MOV       R5,?V5
   \   00018B   740C         MOV       A,#0xc
   \   00018D   12....       LCALL     ?XSTACK_DISP101_8
   \   000190   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   2326          
   2327              ZDP_BindUnbindReq( msgType, &dstAddr, ed->ieeeAddr, ed->endpoint, clusterID,
   2328                  &destinationAddr, dstEP, ed->SecurityUse );
   \   000193                ; Setup parameters for call to function ZDP_BindUnbindReq
   \   000193   85..82       MOV       DPL,?V6
   \   000196   85..83       MOV       DPH,?V7
   \   000199   A3           INC       DPTR
   \   00019A   E0           MOVX      A,@DPTR
   \   00019B   F5..         MOV       ?V4,A
   \   00019D   78..         MOV       R0,#?V4
   \   00019F   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0001A2   78..         MOV       R0,#?V3
   \   0001A4   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0001A7   740E         MOV       A,#0xe
   \   0001A9   12....       LCALL     ?XSTACK_DISP100_8
   \   0001AC   88..         MOV       ?V4,R0
   \   0001AE   89..         MOV       ?V5,R1
   \   0001B0   78..         MOV       R0,#?V4
   \   0001B2   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001B5   8E..         MOV       ?V4,R6
   \   0001B7   8F..         MOV       ?V5,R7
   \   0001B9   78..         MOV       R0,#?V4
   \   0001BB   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001BE   E5..         MOV       A,?V6
   \   0001C0   2406         ADD       A,#0x6
   \   0001C2   F5..         MOV       ?V4,A
   \   0001C4   E4           CLR       A
   \   0001C5   35..         ADDC      A,?V7
   \   0001C7   F5..         MOV       ?V5,A
   \   0001C9   78..         MOV       R0,#?V4
   \   0001CB   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001CE   E5..         MOV       A,?V6
   \   0001D0   12....       LCALL     ??Subroutine258_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_610:
   \   0001D3   35..         ADDC      A,?V7
   \   0001D5   F583         MOV       DPH,A
   \   0001D7   E0           MOVX      A,@DPTR
   \   0001D8   F9           MOV       R1,A
   \   0001D9   740B         MOV       A,#0xb
   \   0001DB   12....       LCALL     ?XSTACK_DISP102_8
   \   0001DE   AA..         MOV       R2,?V0
   \   0001E0   AB..         MOV       R3,?V1
   \   0001E2   12....       LCALL     `??ZDP_BindUnbindReq::?relay`; Banked call to: ZDP_BindUnbindReq
   \   0001E5   7408         MOV       A,#0x8
   \   0001E7   12....       LCALL     ?DEALLOC_XSTACK8
   2329          
   2330              // Set timeout for response
   2331              APS_SetEndDeviceBindTimeout( AIB_MaxBindingTime, ZDO_EndDeviceBindMatchTimeoutCB );
   \   0001EA                ; Setup parameters for call to function APS_SetEndDeviceBindTimeout
   \   0001EA   7C..         MOV       R4,#`??ZDO_EndDeviceBindMatchTimeoutCB::?relay` & 0xff
   \   0001EC   7D..         MOV       R5,#(`??ZDO_EndDeviceBindMatchTimeoutCB::?relay` >> 8) & 0xff
   \   0001EE   90....       MOV       DPTR,#AIB_MaxBindingTime
   \   0001F1   12....       LCALL     ??Subroutine236_0 & 0xFFFF
   2332            }
   \                     ??CrossCallReturnLabel_468:
   \   0001F4   12....       LCALL     `??APS_SetEndDeviceBindTimeout::?relay`; Banked call to: APS_SetEndDeviceBindTimeout
   \   0001F7   02....       LJMP      ??ZDMatchSendState_20 & 0xFFFF
   2333            else
   2334            {
   2335              // Send the response messages to requesting devices
   2336              // send response to first requester
   2337              dstAddr.addr.shortAddr = matchED->ed1.srcAddr;
   \                     ??ZDMatchSendState_17:
   \   0001FA   90....       MOV       DPTR,#matchED
   \   0001FD   12....       LCALL     ?Subroutine75 & 0xFFFF
   \                     ??CrossCallReturnLabel_123:
   \   000200   7403         MOV       A,#0x3
   \   000202   12....       LCALL     ?XSTACK_DISP0_8
   \   000205   12....       LCALL     ?Subroutine14 & 0xFFFF
   2338              ZDP_EndDeviceBindRsp( matchED->ed1.TransSeq, &dstAddr, rspStatus, matchED->ed1.SecurityUse );
   \                     ??CrossCallReturnLabel_11:
   \   000208   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00020B   7401         MOV       A,#0x1
   \   00020D   12....       LCALL     ?XSTACK_DISP100_8
   \   000210   88..         MOV       ?V0,R0
   \   000212   89..         MOV       ?V1,R1
   \   000214   78..         MOV       R0,#?V0
   \   000216   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000219   75..20       MOV       ?V0,#0x20
   \   00021C   75..80       MOV       ?V1,#-0x80
   \   00021F   78..         MOV       R0,#?V0
   \   000221   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000224   7901         MOV       R1,#0x1
   \   000226   7408         MOV       A,#0x8
   \   000228   12....       LCALL     ?XSTACK_DISP102_8
   \   00022B   90....       MOV       DPTR,#matchED
   \   00022E   12....       LCALL     ??Subroutine236_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_469:
   \   000231   12....       LCALL     `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   000234   7405         MOV       A,#0x5
   \   000236   12....       LCALL     ?DEALLOC_XSTACK8
   2339          
   2340              // send response to second requester
   2341              if ( matchED->state == ZDMATCH_SENDING_BINDS )
   \   000239   12....       LCALL     ?Subroutine73 & 0xFFFF
   \                     ??CrossCallReturnLabel_119:
   \   00023C   7050         JNZ       ??ZDMatchSendState_21
   2342              {
   2343                dstAddr.addr.shortAddr = matchED->ed2.srcAddr;
   \   00023E   12....       LCALL     ?Subroutine95 & 0xFFFF
   2344                ZDP_EndDeviceBindRsp( matchED->ed2.TransSeq, &dstAddr, rspStatus, matchED->ed2.SecurityUse );
   2345              }
   \                     ??CrossCallReturnLabel_590:
   \   000241   2419         ADD       A,#0x19
   \   000243   F582         MOV       DPL,A
   \   000245   E4           CLR       A
   \   000246   38           ADDC      A,R0
   \   000247   F583         MOV       DPH,A
   \   000249   12....       LCALL     ??Subroutine251_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_543:
   \   00024C   7403         MOV       A,#0x3
   \   00024E   12....       LCALL     ?XSTACK_DISP0_8
   \   000251   E8           MOV       A,R0
   \   000252   F0           MOVX      @DPTR,A
   \   000253   A3           INC       DPTR
   \   000254   12....       LCALL     ??Subroutine240_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_511:
   \   000257   2418         ADD       A,#0x18
   \   000259   F582         MOV       DPL,A
   \   00025B   E4           CLR       A
   \   00025C   38           ADDC      A,R0
   \   00025D   12....       LCALL     ?Subroutine106 & 0xFFFF
   \                     ??CrossCallReturnLabel_441:
   \   000260   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000263   7401         MOV       A,#0x1
   \   000265   12....       LCALL     ?XSTACK_DISP100_8
   \   000268   88..         MOV       ?V0,R0
   \   00026A   89..         MOV       ?V1,R1
   \   00026C   78..         MOV       R0,#?V0
   \   00026E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000271   75..20       MOV       ?V0,#0x20
   \   000274   75..80       MOV       ?V1,#-0x80
   \   000277   78..         MOV       R0,#?V0
   \   000279   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00027C   7901         MOV       R1,#0x1
   \   00027E   7408         MOV       A,#0x8
   \   000280   12....       LCALL     ?XSTACK_DISP102_8
   \   000283   12....       LCALL     ?Subroutine112 & 0xFFFF
   \                     ??CrossCallReturnLabel_177:
   \   000286   12....       LCALL     `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   000289   7405         MOV       A,#0x5
   \   00028B   12....       LCALL     ?DEALLOC_XSTACK8
   2346          
   2347              // Process ended - release memory used
   2348              ZDO_RemoveMatchMemory();
   \                     ??ZDMatchSendState_21:
   \   00028E                ; Setup parameters for call to function ZDO_RemoveMatchMemory
   \   00028E   12....       LCALL     `??ZDO_RemoveMatchMemory::?relay`; Banked call to: ZDO_RemoveMatchMemory
   2349            }
   2350          
   2351            return ( TRUE );
   \                     ??ZDMatchSendState_20:
   \   000291   7901         MOV       R1,#0x1
   \                     ??ZDMatchSendState_3:
   \   000293   7415         MOV       A,#0x15
   \   000295   02....       LJMP      ?Subroutine7 & 0xFFFF
   2352          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine87:
   \   000000   F5..         MOV       ?V4,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   3400         ADDC      A,#0x0
   \   000006   F5..         MOV       ?V5,A
   \   000008   12....       LCALL     ?Subroutine174 & 0xFFFF
   \                     ??CrossCallReturnLabel_600:
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine77:
   \   000000   12....       LCALL     ?Subroutine173 & 0xFFFF
   \                     ??CrossCallReturnLabel_290:
   \   000003   7401         MOV       A,#0x1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine74:
   \   000000   90....       MOV       DPTR,#matchED
   \   000003   12....       LCALL     ?Subroutine173 & 0xFFFF
   \                     ??CrossCallReturnLabel_289:
   \   000006   E0           MOVX      A,@DPTR
   \   000007   6401         XRL       A,#0x1
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine173:
   \   000000   12....       LCALL     ?Subroutine201 & 0xFFFF
   \                     ??CrossCallReturnLabel_607:
   \   000003   12....       LCALL     ?Subroutine207 & 0xFFFF
   \                     ??CrossCallReturnLabel_339:
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine207:
   \   000000   242F         ADD       A,#0x2f
   \   000002   F582         MOV       DPL,A
   \   000004   E4           CLR       A
   \   000005   38           ADDC      A,R0
   \   000006   F583         MOV       DPH,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine72:
   \   000000   12....       LCALL     ?Subroutine170 & 0xFFFF
   \                     ??CrossCallReturnLabel_284:
   \   000003   90....       MOV       DPTR,#matchED
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine53:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003   3A           ADDC      A,R2
   \   000004   F583         MOV       DPH,A
   \   000006   E0           MOVX      A,@DPTR
   \   000007   28           ADD       A,R0
   \   000008   F8           MOV       R0,A
   \   000009   A3           INC       DPTR
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   39           ADDC      A,R1
   \   00000C   F9           MOV       R1,A
   \   00000D   E8           MOV       A,R0
   \   00000E   24FE         ADD       A,#-0x2
   \   000010   F582         MOV       DPL,A
   \   000012   E9           MOV       A,R1
   \   000013   34FF         ADDC      A,#-0x1
   \   000015   12....       LCALL     ?Subroutine177 & 0xFFFF
   \                     ??CrossCallReturnLabel_426:
   \   000018   90....       MOV       DPTR,#matchED
   \   00001B   E0           MOVX      A,@DPTR
   \   00001C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine209:
   \   000000   F8           MOV       R0,A
   \   000001   E4           CLR       A
   \   000002   33           RLC       A
   \   000003   F9           MOV       R1,A
   \   000004   90....       MOV       DPTR,#matchED
   \   000007                REQUIRE ??Subroutine259_0
   \   000007                ; // Fall through to label ??Subroutine259_0
   2353          
   2354          /*********************************************************************
   2355           * @fn      ZDO_EndDeviceBindMatchTimeoutCB()
   2356           *
   2357           * @brief   End device bind timeout.
   2358           *
   2359           * @param  none
   2360           *
   2361           * @return  none
   2362           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2363          static void ZDO_EndDeviceBindMatchTimeoutCB( void )
   \                     ZDO_EndDeviceBindMatchTimeoutCB:
   2364          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2365            ZDMatchSendState( ZDMATCH_REASON_TIMEOUT, ZDP_TIMEOUT, 0 );
   \   000004                ; Setup parameters for call to function ZDMatchSendState
   \   000004   7B00         MOV       R3,#0x0
   \   000006   7A85         MOV       R2,#-0x7b
   \   000008   7901         MOV       R1,#0x1
   \   00000A   12....       LCALL     `??ZDMatchSendState::?relay`; Banked call to: ZDMatchSendState
   2366          }
   \   00000D   02....       LJMP      ?Subroutine0 & 0xFFFF
   2367          
   2368          /*********************************************************************
   2369           * ZDO MESSAGE PARSING API FUNCTIONS
   2370           */
   2371          
   2372          /*********************************************************************
   2373           * @fn          ZDO_ParseEndDeviceBindReq
   2374           *
   2375           * @brief       This function parses the End_Device_Bind_req message.
   2376           *
   2377           *     NOTE:  The clusters lists in bindReq are allocated in this
   2378           *            function and must be freed by that calling function.
   2379           *
   2380           * @param       inMsg  - incoming message (request)
   2381           * @param       bindReq - pointer to place to parse message to
   2382           *
   2383           * @return      none
   2384           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003   35..         ADDC      A,?V1
   \   000005                REQUIRE ??Subroutine246_0
   \   000005                ; // Fall through to label ??Subroutine246_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2385          void ZDO_ParseEndDeviceBindReq( zdoIncomingMsg_t *inMsg, ZDEndDeviceBind_t *bindReq )
   \                     ZDO_ParseEndDeviceBindReq:
   2386          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8C..         MOV       ?V0,R4
   \   000007   8D..         MOV       ?V1,R5
   2387            uint8 *msg;
   2388          
   2389            // Parse the message
   2390            bindReq->TransSeq = inMsg->TransSeq;
   \   000009   EA           MOV       A,R2
   \   00000A   12....       LCALL     ?Subroutine187 & 0xFFFF
   \                     ??CrossCallReturnLabel_304:
   \   00000D   3B           ADDC      A,R3
   \   00000E   F583         MOV       DPH,A
   \   000010   12....       LCALL     ?Subroutine42 & 0xFFFF
   2391            bindReq->srcAddr = inMsg->srcAddr.addr.shortAddr;
   \                     ??CrossCallReturnLabel_559:
   \   000013   12....       LCALL     ??Subroutine250_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_544:
   \   000016   8C82         MOV       DPL,R4
   \   000018   8D83         MOV       DPH,R5
   \   00001A   A3           INC       DPTR
   \   00001B   A3           INC       DPTR
   \   00001C   12....       LCALL     ??Subroutine254_0 & 0xFFFF
   2392            bindReq->SecurityUse = inMsg->SecurityUse;
   \                     ??CrossCallReturnLabel_564:
   \   00001F   12....       LCALL     ??Subroutine258_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_611:
   \   000022   3B           ADDC      A,R3
   \   000023   F583         MOV       DPH,A
   \   000025   12....       LCALL     ?Subroutine91 & 0xFFFF
   \                     ??CrossCallReturnLabel_150:
   \   000028   12....       LCALL     ?Subroutine32 & 0xFFFF
   2393            msg = inMsg->asdu;
   \                     ??CrossCallReturnLabel_44:
   \   00002B   12....       LCALL     ?Subroutine58 & 0xFFFF
   2394          
   2395            bindReq->localCoordinator = BUILD_UINT16( msg[0], msg[1] );
   \                     ??CrossCallReturnLabel_90:
   \   00002E   A3           INC       DPTR
   \   00002F   A3           INC       DPTR
   \   000030   A3           INC       DPTR
   \   000031   12....       LCALL     ?Subroutine20 & 0xFFFF
   2396            msg += 2;
   \                     ??CrossCallReturnLabel_566:
   \   000034   5001         JNC       ??ZDO_ParseEndDeviceBindReq_0
   \   000036   0F           INC       R7
   2397          
   2398            osal_cpyExtAddr( bindReq->ieeeAddr, msg );
   \                     ??ZDO_ParseEndDeviceBindReq_0:
   \   000037                ; Setup parameters for call to function sAddrExtCpy
   \   000037   FC           MOV       R4,A
   \   000038   EF           MOV       A,R7
   \   000039   FD           MOV       R5,A
   \   00003A   E5..         MOV       A,?V0
   \   00003C   2406         ADD       A,#0x6
   \   00003E   FA           MOV       R2,A
   \   00003F   E4           CLR       A
   \   000040   35..         ADDC      A,?V1
   \   000042   FB           MOV       R3,A
   \   000043   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   2399            msg += Z_EXTADDR_LEN;
   2400          
   2401            bindReq->endpoint = *msg++;
   \   000046   8E82         MOV       DPL,R6
   \   000048   8F83         MOV       DPH,R7
   \   00004A   A3           INC       DPTR
   \   00004B   A3           INC       DPTR
   \   00004C   A3           INC       DPTR
   \   00004D   A3           INC       DPTR
   \   00004E   A3           INC       DPTR
   \   00004F   A3           INC       DPTR
   \   000050   A3           INC       DPTR
   \   000051   A3           INC       DPTR
   \   000052   E0           MOVX      A,@DPTR
   \   000053   C0E0         PUSH      A
   \   000055   12....       LCALL     ?Subroutine132 & 0xFFFF
   \                     ??CrossCallReturnLabel_204:
   \   000058   D0E0         POP       A
   \   00005A   12....       LCALL     ??Subroutine266_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_645:
   \   00005D   5001         JNC       ??ZDO_ParseEndDeviceBindReq_1
   \   00005F   0F           INC       R7
   2402            bindReq->profileID = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseEndDeviceBindReq_1:
   \   000060   12....       LCALL     ?Subroutine179 & 0xFFFF
   \                     ??CrossCallReturnLabel_557:
   \   000063   12....       LCALL     ?Subroutine129 & 0xFFFF
   \                     ??CrossCallReturnLabel_198:
   \   000066   12....       LCALL     ??Subroutine222_0 & 0xFFFF
   2403            msg += 2;
   2404          
   2405            bindReq->inClusters = NULL;
   \                     ??CrossCallReturnLabel_380:
   \   000069   E5..         MOV       A,?V0
   \   00006B   2412         ADD       A,#0x12
   \   00006D   12....       LCALL     ?Subroutine143 & 0xFFFF
   \                     ??CrossCallReturnLabel_237:
   \   000070   A3           INC       DPTR
   \   000071   F0           MOVX      @DPTR,A
   2406            bindReq->outClusters = NULL;
   \   000072   E5..         MOV       A,?V0
   \   000074   2415         ADD       A,#0x15
   \   000076   12....       LCALL     ?Subroutine143 & 0xFFFF
   \                     ??CrossCallReturnLabel_238:
   \   000079   A3           INC       DPTR
   \   00007A   12....       LCALL     ?Subroutine21 & 0xFFFF
   2407          
   2408            if ((bindReq->numInClusters = *msg++) &&
   2409                (bindReq->inClusters = (uint16*)osal_mem_alloc( (bindReq->numInClusters * sizeof( uint16 )))))
   \                     ??CrossCallReturnLabel_19:
   \   00007D   F8           MOV       R0,A
   \   00007E   E5..         MOV       A,?V0
   \   000080   12....       LCALL     ?Subroutine147 & 0xFFFF
   \                     ??CrossCallReturnLabel_247:
   \   000083   E8           MOV       A,R0
   \   000084   F0           MOVX      @DPTR,A
   \   000085   EE           MOV       A,R6
   \   000086   2403         ADD       A,#0x3
   \   000088   FE           MOV       R6,A
   \   000089   5001         JNC       ??ZDO_ParseEndDeviceBindReq_2
   \   00008B   0F           INC       R7
   \                     ??ZDO_ParseEndDeviceBindReq_2:
   \   00008C   E8           MOV       A,R0
   \   00008D   6030         JZ        ??ZDO_ParseEndDeviceBindReq_3
   \   00008F   12....       LCALL     ?Subroutine115 & 0xFFFF
   \                     ??CrossCallReturnLabel_675:
   \   000092   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000095   8A..         MOV       ?V2,R2
   \   000097   8B..         MOV       ?V3,R3
   \   000099   A8..         MOV       R0,?V2
   \   00009B   A9..         MOV       R1,?V3
   \   00009D   E5..         MOV       A,?V0
   \   00009F   2412         ADD       A,#0x12
   \   0000A1   12....       LCALL     ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_535:
   \   0000A4   6019         JZ        ??ZDO_ParseEndDeviceBindReq_3
   2410            {
   2411              msg = ZDO_ConvertOTAClusters( bindReq->numInClusters, msg, bindReq->inClusters );
   \   0000A6                ; Setup parameters for call to function ZDO_ConvertOTAClusters
   \   0000A6   E5..         MOV       A,?V0
   \   0000A8   2412         ADD       A,#0x12
   \   0000AA   12....       LCALL     ?Subroutine93 & 0xFFFF
   2412            }
   \                     ??CrossCallReturnLabel_156:
   \   0000AD   12....       LCALL     ?Subroutine147 & 0xFFFF
   \                     ??CrossCallReturnLabel_248:
   \   0000B0   E0           MOVX      A,@DPTR
   \   0000B1   F9           MOV       R1,A
   \   0000B2   12....       LCALL     `??ZDO_ConvertOTAClusters::?relay`; Banked call to: ZDO_ConvertOTAClusters
   \   0000B5   8A..         MOV       ?V2,R2
   \   0000B7   8B..         MOV       ?V3,R3
   \   0000B9   AE..         MOV       R6,?V2
   \   0000BB   AF..         MOV       R7,?V3
   \   0000BD   8007         SJMP      ??CrossCallReturnLabel_239
   2413            else
   2414            {
   2415              bindReq->numInClusters = 0;
   \                     ??ZDO_ParseEndDeviceBindReq_3:
   \   0000BF   E5..         MOV       A,?V0
   \   0000C1   2411         ADD       A,#0x11
   \   0000C3   12....       LCALL     ?Subroutine143 & 0xFFFF
   2416            }
   2417          
   2418            if ((bindReq->numOutClusters = *msg++) &&
   2419                (bindReq->outClusters = (uint16*)osal_mem_alloc((bindReq->numOutClusters * sizeof(uint16)))))
   \                     ??CrossCallReturnLabel_239:
   \   0000C6   8E82         MOV       DPL,R6
   \   0000C8   8F83         MOV       DPH,R7
   \   0000CA   E0           MOVX      A,@DPTR
   \   0000CB   F8           MOV       R0,A
   \   0000CC   12....       LCALL     ?Subroutine136 & 0xFFFF
   \                     ??CrossCallReturnLabel_221:
   \   0000CF   E8           MOV       A,R0
   \   0000D0   12....       LCALL     ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   0000D3   602C         JZ        ??ZDO_ParseEndDeviceBindReq_4
   \   0000D5   E5..         MOV       A,?V0
   \   0000D7   12....       LCALL     ?Subroutine135 & 0xFFFF
   \                     ??CrossCallReturnLabel_219:
   \   0000DA   12....       LCALL     ?Subroutine115 & 0xFFFF
   \                     ??CrossCallReturnLabel_676:
   \   0000DD   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   0000E0   8A..         MOV       ?V2,R2
   \   0000E2   8B..         MOV       ?V3,R3
   \   0000E4   A8..         MOV       R0,?V2
   \   0000E6   A9..         MOV       R1,?V3
   \   0000E8   E5..         MOV       A,?V0
   \   0000EA   2415         ADD       A,#0x15
   \   0000EC   12....       LCALL     ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_536:
   \   0000EF   6010         JZ        ??ZDO_ParseEndDeviceBindReq_4
   2420            {
   2421              msg = ZDO_ConvertOTAClusters( bindReq->numOutClusters, msg, bindReq->outClusters );
   \   0000F1                ; Setup parameters for call to function ZDO_ConvertOTAClusters
   \   0000F1   E5..         MOV       A,?V0
   \   0000F3   2415         ADD       A,#0x15
   \   0000F5   12....       LCALL     ?Subroutine93 & 0xFFFF
   2422            }
   \                     ??CrossCallReturnLabel_157:
   \   0000F8   12....       LCALL     ?Subroutine135 & 0xFFFF
   \                     ??CrossCallReturnLabel_220:
   \   0000FB   F9           MOV       R1,A
   \   0000FC   12....       LCALL     `??ZDO_ConvertOTAClusters::?relay`; Banked call to: ZDO_ConvertOTAClusters
   \   0000FF   8005         SJMP      ??ZDO_ParseEndDeviceBindReq_5
   2423            else
   2424            {
   2425              bindReq->numOutClusters = 0;
   \                     ??ZDO_ParseEndDeviceBindReq_4:
   \   000101   12....       LCALL     ?Subroutine136 & 0xFFFF
   2426            }
   \                     ??CrossCallReturnLabel_222:
   \   000104   E4           CLR       A
   \   000105   F0           MOVX      @DPTR,A
   2427          }
   \                     ??ZDO_ParseEndDeviceBindReq_5:
   \   000106   02....       LJMP      ??Subroutine210_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine179:
   \   000000   8E82         MOV       DPL,R6
   \   000002   8F83         MOV       DPH,R7
   \   000004                REQUIRE ??Subroutine252_0
   \   000004                ; // Fall through to label ??Subroutine252_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine147:
   \   000000   2411         ADD       A,#0x11
   \   000002   12....       LCALL     ??Subroutine260_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_630:
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine143:
   \   000000   12....       LCALL     ??Subroutine260_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_629:
   \   000003   E4           CLR       A
   \   000004   F0           MOVX      @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine135:
   \   000000   2414         ADD       A,#0x14
   \   000002   12....       LCALL     ??Subroutine260_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_626:
   \   000005   E0           MOVX      A,@DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine93:
   \   000000   12....       LCALL     ??Subroutine260_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_624:
   \   000003   12....       LCALL     ?Subroutine182 & 0xFFFF
   \                     ??CrossCallReturnLabel_297:
   \   000006   EE           MOV       A,R6
   \   000007   FA           MOV       R2,A
   \   000008   EF           MOV       A,R7
   \   000009   FB           MOV       R3,A
   \   00000A   E5..         MOV       A,?V0
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine42:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   8C82         MOV       DPL,R4
   \   000003   8D83         MOV       DPH,R5
   \   000005                REQUIRE ??Subroutine253_0
   \   000005                ; // Fall through to label ??Subroutine253_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine253_0:
   \   000000   12....       LCALL     ?Subroutine158 & 0xFFFF
   \                     ??CrossCallReturnLabel_654:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine256_0
   \   000001                ; // Fall through to label ??Subroutine256_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine256_0:
   \   000000   12....       LCALL     ??Subroutine268_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_662:
   \   000003   EE           MOV       A,R6
   \   000004   2402         ADD       A,#0x2
   \   000006   FE           MOV       R6,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine136:
   \   000000   E5..         MOV       A,?V0
   \   000002   2414         ADD       A,#0x14
   \   000004   12....       LCALL     ??Subroutine260_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_627:
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   12....       LCALL     ?Subroutine161 & 0xFFFF
   \                     ??CrossCallReturnLabel_271:
   \   000003   AE82         MOV       R6,DPL
   \   000005   AF83         MOV       R7,DPH
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine91:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   8C82         MOV       DPL,R4
   \   000003   8D83         MOV       DPH,R5
   \   000005   A3           INC       DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine132:
   \   000000   E5..         MOV       A,?V0
   \   000002   240E         ADD       A,#0xe
   \   000004   12....       LCALL     ??Subroutine260_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_625:
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine265_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FE           MOV       R6,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FF           MOV       R7,A
   \   000005   8E82         MOV       DPL,R6
   \   000007   8F83         MOV       DPH,R7
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine266_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   EE           MOV       A,R6
   \   000002   2409         ADD       A,#0x9
   \   000004   FE           MOV       R6,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine115:
   \   000000   F8           MOV       R0,A
   \   000001                ; Setup parameters for call to function osal_mem_alloc
   \   000001                ; Setup parameters for call to function osal_mem_alloc
   \   000001                REQUIRE ??Subroutine270_0
   \   000001                ; // Fall through to label ??Subroutine270_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine185:
   \   000000   EA           MOV       A,R2
   \   000001   12....       LCALL     ?Subroutine206 & 0xFFFF
   \                     ??CrossCallReturnLabel_693:
   \   000004   3B           ADDC      A,R3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine58:
   \   000000   12....       LCALL     ??Subroutine265_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_644:
   \   000003   12....       LCALL     ?Subroutine176 & 0xFFFF
   \                     ??CrossCallReturnLabel_695:
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine176:
   \   000000   FA           MOV       R2,A
   \   000001                REQUIRE ??Subroutine273_0
   \   000001                ; // Fall through to label ??Subroutine273_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine273_0:
   \   000000   A3           INC       DPTR
   \   000001   E0           MOVX      A,@DPTR
   \   000002   F9           MOV       R1,A
   \   000003   EA           MOV       A,R2
   \   000004   8C82         MOV       DPL,R4
   \   000006   8D83         MOV       DPH,R5
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   12....       LCALL     ?Subroutine185 & 0xFFFF
   \                     ??CrossCallReturnLabel_686:
   \   000004   F583         MOV       DPH,A
   \   000006   22           RET
   2428          
   2429          /*********************************************************************
   2430           * @fn          ZDO_ParseBindUnbindReq
   2431           *
   2432           * @brief       This function parses the Bind_req or Unbind_req message.
   2433           *
   2434           * @param       inMsg  - incoming message (request)
   2435           * @param       pReq - place to put parsed information
   2436           *
   2437           * @return      none
   2438           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2439          void ZDO_ParseBindUnbindReq( zdoIncomingMsg_t *inMsg, ZDO_BindUnbindReq_t *pReq )
   \                     ZDO_ParseBindUnbindReq:
   2440          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL     ?Subroutine119 & 0xFFFF
   2441            uint8 *msg;
   2442          
   2443            msg = inMsg->asdu;
   \                     ??CrossCallReturnLabel_681:
   \   000008   12....       LCALL     ?Subroutine102 & 0xFFFF
   2444            osal_cpyExtAddr( pReq->srcAddress, msg );
   \                     ??CrossCallReturnLabel_422:
   \   00000B   FC           MOV       R4,A
   \   00000C   EF           MOV       A,R7
   \   00000D   FD           MOV       R5,A
   \   00000E   AA..         MOV       R2,?V0
   \   000010   AB..         MOV       R3,?V1
   \   000012   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   2445            msg += Z_EXTADDR_LEN;
   2446            pReq->srcEndpoint = *msg++;
   \   000015   12....       LCALL     ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_647:
   \   000018   5001         JNC       ??ZDO_ParseBindUnbindReq_0
   \   00001A   0F           INC       R7
   2447            pReq->clusterID = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseBindUnbindReq_0:
   \   00001B   12....       LCALL     ?Subroutine11 & 0xFFFF
   2448            msg += 2;
   2449            pReq->dstAddress.addrMode = *msg++;
   \                     ??CrossCallReturnLabel_4:
   \   00001E   5001         JNC       ??ZDO_ParseBindUnbindReq_1
   \   000020   0F           INC       R7
   2450            if ( pReq->dstAddress.addrMode == Addr64Bit )
   \                     ??ZDO_ParseBindUnbindReq_1:
   \   000021   7403         MOV       A,#0x3
   \   000023   68           XRL       A,R0
   \   000024   7026         JNZ       ??ZDO_ParseBindUnbindReq_2
   2451            {
   2452              osal_cpyExtAddr( pReq->dstAddress.addr.extAddr, msg );
   \   000026                ; Setup parameters for call to function sAddrExtCpy
   \   000026   EE           MOV       A,R6
   \   000027   FC           MOV       R4,A
   \   000028   EF           MOV       A,R7
   \   000029   FD           MOV       R5,A
   \   00002A   E5..         MOV       A,?V0
   \   00002C   240B         ADD       A,#0xb
   \   00002E   FA           MOV       R2,A
   \   00002F   E4           CLR       A
   \   000030   35..         ADDC      A,?V1
   \   000032   FB           MOV       R3,A
   \   000033   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   2453              msg += Z_EXTADDR_LEN;
   2454              pReq->dstEndpoint = *msg;
   \   000036   8E82         MOV       DPL,R6
   \   000038   8F83         MOV       DPH,R7
   \   00003A   A3           INC       DPTR
   \   00003B   A3           INC       DPTR
   \   00003C   A3           INC       DPTR
   \   00003D   A3           INC       DPTR
   \   00003E   A3           INC       DPTR
   \   00003F   A3           INC       DPTR
   \   000040   A3           INC       DPTR
   \   000041   A3           INC       DPTR
   \   000042   E0           MOVX      A,@DPTR
   \   000043   C0E0         PUSH      A
   \   000045   12....       LCALL     ?Subroutine136 & 0xFFFF
   2455            }
   \                     ??CrossCallReturnLabel_223:
   \   000048   D0E0         POP       A
   \   00004A   8006         SJMP      ??ZDO_ParseBindUnbindReq_3
   2456            else
   2457            {
   2458              // copy group address
   2459              pReq->dstAddress.addr.shortAddr = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseBindUnbindReq_2:
   \   00004C   12....       LCALL     ?Subroutine62 & 0xFFFF
   2460            }
   \                     ??CrossCallReturnLabel_98:
   \   00004F   F0           MOVX      @DPTR,A
   \   000050   A3           INC       DPTR
   \   000051   E9           MOV       A,R1
   \                     ??ZDO_ParseBindUnbindReq_3:
   \   000052   F0           MOVX      @DPTR,A
   2461          }
   \   000053   02....       LJMP      ??Subroutine214_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine202:
   \   000000   8E82         MOV       DPL,R6
   \   000002   8F83         MOV       DPH,R7
   \   000004   12....       LCALL     ??Subroutine259_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_616:
   \   000007   F9           MOV       R1,A
   \   000008   EA           MOV       A,R2
   \   000009   85..82       MOV       DPL,?V0
   \   00000C   85..83       MOV       DPH,?V1
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine62:
   \   000000   12....       LCALL     ?Subroutine179 & 0xFFFF
   \                     ??CrossCallReturnLabel_558:
   \   000003   E5..         MOV       A,?V0
   \   000005   240B         ADD       A,#0xb
   \   000007   12....       LCALL     ??Subroutine260_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_623:
   \   00000A   E8           MOV       A,R0
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000   8E82         MOV       DPL,R6
   \   000002   8F83         MOV       DPH,R7
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   12....       LCALL     ?Subroutine175 & 0xFFFF
   \                     ??CrossCallReturnLabel_291:
   \   00000A   A3           INC       DPTR
   \   00000B   A3           INC       DPTR
   \   00000C                REQUIRE ??Subroutine266_0
   \   00000C                ; // Fall through to label ??Subroutine266_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   12....       LCALL     ?Subroutine165 & 0xFFFF
   \                     ??CrossCallReturnLabel_276:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   12....       LCALL     ??Subroutine268_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_657:
   \   000008   8E82         MOV       DPL,R6
   \   00000A   8F83         MOV       DPH,R7
   \   00000C   A3           INC       DPTR
   \   00000D   A3           INC       DPTR
   \   00000E   E0           MOVX      A,@DPTR
   \   00000F   F8           MOV       R0,A
   \   000010   E5..         MOV       A,?V0
   \   000012   12....       LCALL     ??Subroutine212_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_434:
   \   000015   12....       LCALL     ??Subroutine261_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_621:
   \   000018   E8           MOV       A,R0
   \   000019   F0           MOVX      @DPTR,A
   \   00001A   EE           MOV       A,R6
   \   00001B   2403         ADD       A,#0x3
   \   00001D   FE           MOV       R6,A
   \   00001E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine119:
   \   000000   8C..         MOV       ?V0,R4
   \   000002   8D..         MOV       ?V1,R5
   \   000004                REQUIRE ??Subroutine272_0
   \   000004                ; // Fall through to label ??Subroutine272_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine272_0:
   \   000000   12....       LCALL     ?Subroutine185 & 0xFFFF
   \                     ??CrossCallReturnLabel_689:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine175:
   \   000000   12....       LCALL     ?Subroutine203 & 0xFFFF
   \                     ??CrossCallReturnLabel_335:
   \   000003   A3           INC       DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine203:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   E0           MOVX      A,@DPTR
   \   000006   85..82       MOV       DPL,?V0
   \   000009   85..83       MOV       DPH,?V1
   \   00000C   A3           INC       DPTR
   \   00000D   A3           INC       DPTR
   \   00000E   A3           INC       DPTR
   \   00000F   A3           INC       DPTR
   \   000010   A3           INC       DPTR
   \   000011   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine165:
   \   000000   12....       LCALL     ?Subroutine202 & 0xFFFF
   \                     ??CrossCallReturnLabel_333:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A   22           RET
   2462          
   2463          /*********************************************************************
   2464           * @fn      ZDO_ParseAddrRsp
   2465           *
   2466           * @brief   Turns the inMsg (incoming message) into the out parsed
   2467           *          structure.
   2468           *
   2469           * @param   inMsg - incoming message
   2470           *
   2471           * @return  pointer to parsed structures.  This structure was
   2472           *          allocated using osal_mem_alloc, so it must be freed
   2473           *          by the calling function [osal_mem_free()].
   2474           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2475          ZDO_NwkIEEEAddrResp_t *ZDO_ParseAddrRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseAddrRsp:
   2476          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   2477            ZDO_NwkIEEEAddrResp_t *rsp;
   2478            uint8 *msg;
   2479            byte cnt = 0;
   \   000009   75..00       MOV       ?V2,#0x0
   2480          
   2481            // Calculate the number of items in the list
   2482            if ( inMsg->asduLen > (1 + Z_EXTADDR_LEN + 2) )
   \   00000C   EE           MOV       A,R6
   \   00000D   2410         ADD       A,#0x10
   \   00000F   F582         MOV       DPL,A
   \   000011   E4           CLR       A
   \   000012   3F           ADDC      A,R7
   \   000013   F583         MOV       DPH,A
   \   000015   E0           MOVX      A,@DPTR
   \   000016   C3           CLR       C
   \   000017   940C         SUBB      A,#0xc
   \   000019   400D         JC        ??ZDO_ParseAddrRsp_0
   2483              cnt = inMsg->asdu[1 + Z_EXTADDR_LEN + 2];
   \   00001B   12....       LCALL     ?Subroutine120 & 0xFFFF
   \                     ??CrossCallReturnLabel_187:
   \   00001E   12....       LCALL     ??Subroutine257_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_575:
   \   000021   240B         ADD       A,#0xb
   \   000023   12....       LCALL     ?Subroutine134 & 0xFFFF
   \                     ??CrossCallReturnLabel_218:
   \   000026   F5..         MOV       ?V2,A
   2484            else
   2485              cnt = 0;
   2486          
   2487            // Make buffer
   2488            rsp = (ZDO_NwkIEEEAddrResp_t *)osal_mem_alloc( sizeof(ZDO_NwkIEEEAddrResp_t) + (cnt * sizeof ( uint16 )) );
   \                     ??ZDO_ParseAddrRsp_0:
   \   000028                ; Setup parameters for call to function osal_mem_alloc
   \   000028   A8..         MOV       R0,?V2
   \   00002A   E8           MOV       A,R0
   \   00002B   28           ADD       A,R0
   \   00002C   F8           MOV       R0,A
   \   00002D   E4           CLR       A
   \   00002E   33           RLC       A
   \   00002F   F9           MOV       R1,A
   \   000030   E8           MOV       A,R0
   \   000031   240D         ADD       A,#0xd
   \   000033   FA           MOV       R2,A
   \   000034   E4           CLR       A
   \   000035   39           ADDC      A,R1
   \   000036   FB           MOV       R3,A
   \   000037   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00003A   8A..         MOV       ?V0,R2
   \   00003C   8B..         MOV       ?V1,R3
   2489          
   2490            if ( rsp )
   \   00003E   EA           MOV       A,R2
   \   00003F   45..         ORL       A,?V1
   \   000041   7003         JNZ       $+5
   \   000043   02....       LJMP      ??ZDO_ParseAddrRsp_1 & 0xFFFF
   2491            {
   2492              msg = inMsg->asdu;
   \   000046   12....       LCALL     ??Subroutine227_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_420:
   \   000049   12....       LCALL     ??Subroutine264_0 & 0xFFFF
   2493          
   2494              rsp->status = *msg++;
   \                     ??CrossCallReturnLabel_641:
   \   00004C   F8           MOV       R0,A
   \   00004D   8A82         MOV       DPL,R2
   \   00004F   8B83         MOV       DPH,R3
   \   000051   12....       LCALL     ?Subroutine22 & 0xFFFF
   2495              if ( rsp->status == ZDO_SUCCESS )
   \                     ??CrossCallReturnLabel_23:
   \   000054   7076         JNZ       ??ZDO_ParseAddrRsp_1
   2496              {
   2497                osal_cpyExtAddr( rsp->extAddr, msg );
   \   000056                ; Setup parameters for call to function sAddrExtCpy
   \   000056   EE           MOV       A,R6
   \   000057   FC           MOV       R4,A
   \   000058   EF           MOV       A,R7
   \   000059   FD           MOV       R5,A
   \   00005A   EA           MOV       A,R2
   \   00005B   2403         ADD       A,#0x3
   \   00005D   FA           MOV       R2,A
   \   00005E   E4           CLR       A
   \   00005F   35..         ADDC      A,?V1
   \   000061   FB           MOV       R3,A
   \   000062   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   2498                msg += Z_EXTADDR_LEN;
   \   000065   EE           MOV       A,R6
   \   000066   2408         ADD       A,#0x8
   \   000068   FE           MOV       R6,A
   \   000069   5001         JNC       ??ZDO_ParseAddrRsp_2
   \   00006B   0F           INC       R7
   2499                rsp->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseAddrRsp_2:
   \   00006C   12....       LCALL     ?Subroutine90 & 0xFFFF
   \                     ??CrossCallReturnLabel_148:
   \   00006F   A3           INC       DPTR
   \   000070   12....       LCALL     ??Subroutine223_0 & 0xFFFF
   2500          
   2501                msg += 2;
   2502                rsp->numAssocDevs = 0;
   \                     ??CrossCallReturnLabel_366:
   \   000073   12....       LCALL     ?Subroutine142 & 0xFFFF
   \                     ??CrossCallReturnLabel_234:
   \   000076   E4           CLR       A
   \   000077   F0           MOVX      @DPTR,A
   2503          
   2504                // StartIndex field is only present if NumAssocDev field is non-zero.
   2505                if ( cnt > 0 )
   \   000078   E5..         MOV       A,?V2
   \   00007A   6050         JZ        ??ZDO_ParseAddrRsp_1
   2506                {
   2507                  uint16 *pList = &(rsp->devList[0]);
   \   00007C   E5..         MOV       A,?V0
   \   00007E   240D         ADD       A,#0xd
   \   000080   F8           MOV       R0,A
   \   000081   E4           CLR       A
   \   000082   35..         ADDC      A,?V1
   \   000084   F9           MOV       R1,A
   2508                  byte n = cnt;
   2509          
   2510                  rsp->numAssocDevs = *msg++;
   \   000085   8E82         MOV       DPL,R6
   \   000087   8F83         MOV       DPH,R7
   \   000089   A3           INC       DPTR
   \   00008A   A3           INC       DPTR
   \   00008B   E0           MOVX      A,@DPTR
   \   00008C   C0E0         PUSH      A
   \   00008E   12....       LCALL     ?Subroutine142 & 0xFFFF
   \                     ??CrossCallReturnLabel_235:
   \   000091   D0E0         POP       A
   \   000093   12....       LCALL     ?Subroutine41 & 0xFFFF
   2511                  rsp->startIndex = *msg++;
   \                     ??CrossCallReturnLabel_55:
   \   000096   C0E0         PUSH      A
   \   000098   12....       LCALL     ?Subroutine138 & 0xFFFF
   \                     ??CrossCallReturnLabel_227:
   \   00009B   D0E0         POP       A
   \   00009D   F0           MOVX      @DPTR,A
   \   00009E   EE           MOV       A,R6
   \   00009F   2404         ADD       A,#0x4
   \   0000A1   FE           MOV       R6,A
   \   0000A2   5001         JNC       ??ZDO_ParseAddrRsp_3
   \   0000A4   0F           INC       R7
   \                     ??ZDO_ParseAddrRsp_3:
   \   0000A5   AC..         MOV       R4,?V2
   2512          
   2513                  while ( n != 0 )
   2514                  {
   2515                    *pList++ = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseAddrRsp_4:
   \   0000A7   8E82         MOV       DPL,R6
   \   0000A9   8F83         MOV       DPH,R7
   \   0000AB   E0           MOVX      A,@DPTR
   \   0000AC   F5..         MOV       ?V2,A
   \   0000AE   A3           INC       DPTR
   \   0000AF   E0           MOVX      A,@DPTR
   \   0000B0   FB           MOV       R3,A
   \   0000B1   E5..         MOV       A,?V2
   \   0000B3   8882         MOV       DPL,R0
   \   0000B5   8983         MOV       DPH,R1
   \   0000B7   12....       LCALL     ??Subroutine225_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_383:
   \   0000BA   E8           MOV       A,R0
   \   0000BB   2402         ADD       A,#0x2
   \   0000BD   F8           MOV       R0,A
   \   0000BE   5001         JNC       ??ZDO_ParseAddrRsp_5
   \   0000C0   09           INC       R1
   2516                    msg += sizeof( uint16 );
   \                     ??ZDO_ParseAddrRsp_5:
   \   0000C1   EE           MOV       A,R6
   \   0000C2   2402         ADD       A,#0x2
   \   0000C4   FE           MOV       R6,A
   \   0000C5   5001         JNC       ??ZDO_ParseAddrRsp_6
   \   0000C7   0F           INC       R7
   2517                    n--;
   2518                  }
   \                     ??ZDO_ParseAddrRsp_6:
   \   0000C8   1C           DEC       R4
   \   0000C9   EC           MOV       A,R4
   \   0000CA   70DB         JNZ       ??ZDO_ParseAddrRsp_4
   2519                }
   2520              }
   2521            }
   2522            return ( rsp );
   \                     ??ZDO_ParseAddrRsp_1:
   \   0000CC   AA..         MOV       R2,?V0
   \   0000CE   AB..         MOV       R3,?V1
   \   0000D0   02....       LJMP      ??Subroutine274_0 & 0xFFFF
   2523          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine138:
   \   000000   12....       LCALL     ?Subroutine191 & 0xFFFF
   \                     ??CrossCallReturnLabel_633:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine90:
   \   000000   12....       LCALL     ?Subroutine202 & 0xFFFF
   \                     ??CrossCallReturnLabel_332:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine142:
   \   000000   E5..         MOV       A,?V0
   \   000002   240B         ADD       A,#0xb
   \   000004   12....       LCALL     ??Subroutine260_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_628:
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine264_0:
   \   000000   12....       LCALL     ?Subroutine166 & 0xFFFF
   \                     ??CrossCallReturnLabel_642:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine166:
   \   000000   F583         MOV       DPH,A
   \   000002                REQUIRE ??Subroutine265_0
   \   000002                ; // Fall through to label ??Subroutine265_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000   12....       LCALL     ?Subroutine160 & 0xFFFF
   \                     ??CrossCallReturnLabel_268:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET
   2524          
   2525          /*********************************************************************
   2526           * @fn          ZDO_ParseNodeDescRsp
   2527           *
   2528           * @brief       This function parses the Node_Desc_rsp message.
   2529           *
   2530           * @param       inMsg - incoming message
   2531           * @param       pNDRsp - place to parse the message into
   2532           *
   2533           * @return      none
   2534           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2535          void ZDO_ParseNodeDescRsp( zdoIncomingMsg_t *inMsg, ZDO_NodeDescRsp_t *pNDRsp )
   \                     ZDO_ParseNodeDescRsp:
   2536          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   2537            uint8 *msg;
   2538          
   2539            msg = inMsg->asdu;
   \   000005   12....       LCALL     ?Subroutine10 & 0xFFFF
   2540          
   2541            pNDRsp->status = *msg++;
   2542            pNDRsp->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   2543          
   2544            if ( pNDRsp->status == ZDP_SUCCESS )
   \                     ??CrossCallReturnLabel_2:
   \   000008   6003         JZ        $+5
   \   00000A   02....       LJMP      ??ZDO_ParseNodeDescRsp_0 & 0xFFFF
   2545            {
   2546              msg += 2;
   2547              pNDRsp->nodeDesc.LogicalType = *msg & 0x07;
   \   00000D   E8           MOV       A,R0
   \   00000E   2402         ADD       A,#0x2
   \   000010   FA           MOV       R2,A
   \   000011   E4           CLR       A
   \   000012   39           ADDC      A,R1
   \   000013   FB           MOV       R3,A
   \   000014   EC           MOV       A,R4
   \   000015   2403         ADD       A,#0x3
   \   000017   FE           MOV       R6,A
   \   000018   E4           CLR       A
   \   000019   3D           ADDC      A,R5
   \   00001A   FF           MOV       R7,A
   \   00001B   8A82         MOV       DPL,R2
   \   00001D   8B83         MOV       DPH,R3
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   5407         ANL       A,#0x7
   \   000022   F5..         MOV       ?V0,A
   \   000024   8E82         MOV       DPL,R6
   \   000026   8F83         MOV       DPH,R7
   \   000028   E0           MOVX      A,@DPTR
   \   000029   54F8         ANL       A,#0xf8
   \   00002B   45..         ORL       A,?V0
   \   00002D   F5..         MOV       ?V1,A
   \   00002F   12....       LCALL     ?Subroutine43 & 0xFFFF
   2548          
   2549              pNDRsp->nodeDesc.ComplexDescAvail = ( *msg & 0x08 ) >> 3;
   \                     ??CrossCallReturnLabel_57:
   \   000032   A2E3         MOV       C,0xE0 /* A   */.3
   \   000034   E4           CLR       A
   \   000035   33           RLC       A
   \   000036   F5..         MOV       ?V0,A
   \   000038   A2E0         MOV       C,0xE0 /* A   */.0
   \   00003A   E4           CLR       A
   \   00003B   33           RLC       A
   \   00003C   33           RLC       A
   \   00003D   33           RLC       A
   \   00003E   33           RLC       A
   \   00003F   F5..         MOV       ?V0,A
   \   000041   74F7         MOV       A,#-0x9
   \   000043   55..         ANL       A,?V1
   \   000045   45..         ORL       A,?V0
   \   000047   8E82         MOV       DPL,R6
   \   000049   8F83         MOV       DPH,R7
   \   00004B   12....       LCALL     ?Subroutine43 & 0xFFFF
   2550              pNDRsp->nodeDesc.UserDescAvail = ( *msg & 0x10 ) >> 4;
   \                     ??CrossCallReturnLabel_58:
   \   00004E   A2E4         MOV       C,0xE0 /* A   */.4
   \   000050   E4           CLR       A
   \   000051   33           RLC       A
   \   000052   FA           MOV       R2,A
   \   000053   A2E0         MOV       C,0xE0 /* A   */.0
   \   000055   E4           CLR       A
   \   000056   33           RLC       A
   \   000057   C4           SWAP      A
   \   000058   FA           MOV       R2,A
   \   000059   8E82         MOV       DPL,R6
   \   00005B   8F83         MOV       DPH,R7
   \   00005D   E0           MOVX      A,@DPTR
   \   00005E   54EF         ANL       A,#0xef
   \   000060   4A           ORL       A,R2
   \   000061   F0           MOVX      @DPTR,A
   2551          
   2552              msg++;  // Reserved bits.
   2553              pNDRsp->nodeDesc.FrequencyBand = (*msg >> 3) & 0x1f;
   \   000062   E8           MOV       A,R0
   \   000063   2403         ADD       A,#0x3
   \   000065   FA           MOV       R2,A
   \   000066   E4           CLR       A
   \   000067   39           ADDC      A,R1
   \   000068   FB           MOV       R3,A
   \   000069   EC           MOV       A,R4
   \   00006A   2404         ADD       A,#0x4
   \   00006C   0E           INC       R6
   \   00006D   E4           CLR       A
   \   00006E   3D           ADDC      A,R5
   \   00006F   FF           MOV       R7,A
   \   000070   8A82         MOV       DPL,R2
   \   000072   8B83         MOV       DPH,R3
   \   000074   E0           MOVX      A,@DPTR
   \   000075   54F8         ANL       A,#0xf8
   \   000077   F5..         MOV       ?V0,A
   \   000079   8E82         MOV       DPL,R6
   \   00007B   8F83         MOV       DPH,R7
   \   00007D   E0           MOVX      A,@DPTR
   \   00007E   5407         ANL       A,#0x7
   \   000080   45..         ORL       A,?V0
   \   000082   F5..         MOV       ?V0,A
   \   000084   12....       LCALL     ?Subroutine43 & 0xFFFF
   2554              pNDRsp->nodeDesc.APSFlags = *msg++ & 0x07;
   \                     ??CrossCallReturnLabel_59:
   \   000087   5407         ANL       A,#0x7
   \   000089   FA           MOV       R2,A
   \   00008A   74F8         MOV       A,#-0x8
   \   00008C   55..         ANL       A,?V0
   \   00008E   4A           ORL       A,R2
   \   00008F   8E82         MOV       DPL,R6
   \   000091   8F83         MOV       DPH,R7
   \   000093   12....       LCALL     ?Subroutine34 & 0xFFFF
   2555              pNDRsp->nodeDesc.CapabilityFlags = *msg++;
   \                     ??CrossCallReturnLabel_48:
   \   000096   8C82         MOV       DPL,R4
   \   000098   8D83         MOV       DPH,R5
   \   00009A   A3           INC       DPTR
   \   00009B   A3           INC       DPTR
   \   00009C   A3           INC       DPTR
   \   00009D   A3           INC       DPTR
   \   00009E   A3           INC       DPTR
   \   00009F   12....       LCALL     ?Subroutine35 & 0xFFFF
   2556              pNDRsp->nodeDesc.ManufacturerCode[0] = *msg++;
   \                     ??CrossCallReturnLabel_51:
   \   0000A2   A3           INC       DPTR
   \   0000A3   12....       LCALL     ?Subroutine113 & 0xFFFF
   \                     ??CrossCallReturnLabel_679:
   \   0000A6   12....       LCALL     ?Subroutine31 & 0xFFFF
   2557              pNDRsp->nodeDesc.ManufacturerCode[1] = *msg++;
   \                     ??CrossCallReturnLabel_42:
   \   0000A9   12....       LCALL     ?Subroutine91 & 0xFFFF
   \                     ??CrossCallReturnLabel_151:
   \   0000AC   12....       LCALL     ?Subroutine31 & 0xFFFF
   2558              pNDRsp->nodeDesc.MaxBufferSize = *msg++;
   \                     ??CrossCallReturnLabel_43:
   \   0000AF   12....       LCALL     ?Subroutine113 & 0xFFFF
   \                     ??CrossCallReturnLabel_680:
   \   0000B2   12....       LCALL     ?Subroutine29 & 0xFFFF
   2559              pNDRsp->nodeDesc.MaxInTransferSize[0] = *msg++;
   \                     ??CrossCallReturnLabel_38:
   \   0000B5   12....       LCALL     ?Subroutine91 & 0xFFFF
   \                     ??CrossCallReturnLabel_152:
   \   0000B8   12....       LCALL     ?Subroutine29 & 0xFFFF
   2560              pNDRsp->nodeDesc.MaxInTransferSize[1] = *msg++;
   \                     ??CrossCallReturnLabel_39:
   \   0000BB   A3           INC       DPTR
   \   0000BC   12....       LCALL     ?Subroutine91 & 0xFFFF
   \                     ??CrossCallReturnLabel_153:
   \   0000BF   A3           INC       DPTR
   \   0000C0   A3           INC       DPTR
   \   0000C1   A3           INC       DPTR
   \   0000C2   A3           INC       DPTR
   \   0000C3   A3           INC       DPTR
   \   0000C4   A3           INC       DPTR
   \   0000C5   A3           INC       DPTR
   \   0000C6   A3           INC       DPTR
   \   0000C7   A3           INC       DPTR
   \   0000C8   F0           MOVX      @DPTR,A
   \   0000C9   E8           MOV       A,R0
   \   0000CA   240A         ADD       A,#0xa
   \   0000CC   F8           MOV       R0,A
   \   0000CD   5001         JNC       ??ZDO_ParseNodeDescRsp_1
   \   0000CF   09           INC       R1
   2561              pNDRsp->nodeDesc.ServerMask = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseNodeDescRsp_1:
   \   0000D0   8882         MOV       DPL,R0
   \   0000D2   8983         MOV       DPH,R1
   \   0000D4   E0           MOVX      A,@DPTR
   \   0000D5   FE           MOV       R6,A
   \   0000D6   A3           INC       DPTR
   \   0000D7   E0           MOVX      A,@DPTR
   \   0000D8   FB           MOV       R3,A
   \   0000D9   EE           MOV       A,R6
   \   0000DA   FA           MOV       R2,A
   \   0000DB   EC           MOV       A,R4
   \   0000DC   240B         ADD       A,#0xb
   \   0000DE   F582         MOV       DPL,A
   \   0000E0   E4           CLR       A
   \   0000E1   3D           ADDC      A,R5
   \   0000E2   F583         MOV       DPH,A
   \   0000E4   12....       LCALL     ??Subroutine224_0 & 0xFFFF
   2562              msg += 2;
   2563              pNDRsp->nodeDesc.MaxOutTransferSize[0] = *msg++;
   \                     ??CrossCallReturnLabel_395:
   \   0000E7   8882         MOV       DPL,R0
   \   0000E9   8983         MOV       DPH,R1
   \   0000EB   A3           INC       DPTR
   \   0000EC   A3           INC       DPTR
   \   0000ED   E0           MOVX      A,@DPTR
   \   0000EE   C0E0         PUSH      A
   \   0000F0   EC           MOV       A,R4
   \   0000F1   240D         ADD       A,#0xd
   \   0000F3   F582         MOV       DPL,A
   \   0000F5   E4           CLR       A
   \   0000F6   3D           ADDC      A,R5
   \   0000F7   F583         MOV       DPH,A
   \   0000F9   D0E0         POP       A
   \   0000FB   12....       LCALL     ?Subroutine35 & 0xFFFF
   2564              pNDRsp->nodeDesc.MaxOutTransferSize[1] = *msg++;
   2565              pNDRsp->nodeDesc.DescriptorCapability = *msg;
   2566            }
   \                     ??CrossCallReturnLabel_52:
   \   0000FE   E0           MOVX      A,@DPTR
   \   0000FF   C0E0         PUSH      A
   \   000101   EC           MOV       A,R4
   \   000102   12....       LCALL     ??Subroutine258_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_612:
   \   000105   3D           ADDC      A,R5
   \   000106   F583         MOV       DPH,A
   \   000108   D0E0         POP       A
   \   00010A   12....       LCALL     ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_49:
   \   00010D   C0E0         PUSH      A
   \   00010F   EC           MOV       A,R4
   \   000110   12....       LCALL     ?Subroutine187 & 0xFFFF
   \                     ??CrossCallReturnLabel_305:
   \   000113   3D           ADDC      A,R5
   \   000114   F583         MOV       DPH,A
   \   000116   D0E0         POP       A
   \   000118   F0           MOVX      @DPTR,A
   2567          }
   \                     ??ZDO_ParseNodeDescRsp_0:
   \   000119   02....       LJMP      ??Subroutine214_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine43:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8A82         MOV       DPL,R2
   \   000003   8B83         MOV       DPH,R3
   \   000005   E0           MOVX      A,@DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   12....       LCALL     ?Subroutine162 & 0xFFFF
   \                     ??CrossCallReturnLabel_273:
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   12....       LCALL     ?Subroutine156 & 0xFFFF
   \                     ??CrossCallReturnLabel_263:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine156:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   12....       LCALL     ?Subroutine197 & 0xFFFF
   \                     ??CrossCallReturnLabel_325:
   \   000009   A3           INC       DPTR
   \   00000A   A3           INC       DPTR
   \   00000B   A3           INC       DPTR
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   12....       LCALL     ?Subroutine156 & 0xFFFF
   \                     ??CrossCallReturnLabel_264:
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   12....       LCALL     ?Subroutine185 & 0xFFFF
   \                     ??CrossCallReturnLabel_685:
   \   000003   12....       LCALL     ?Subroutine180 & 0xFFFF
   \                     ??CrossCallReturnLabel_294:
   \   000006   8C82         MOV       DPL,R4
   \   000008   8D83         MOV       DPH,R5
   \   00000A   12....       LCALL     ?Subroutine198 & 0xFFFF
   \                     ??CrossCallReturnLabel_329:
   \   00000D   A3           INC       DPTR
   \   00000E   A882         MOV       R0,DPL
   \   000010   A983         MOV       R1,DPH
   \   000012   E0           MOVX      A,@DPTR
   \   000013   FE           MOV       R6,A
   \   000014   A3           INC       DPTR
   \   000015   E0           MOVX      A,@DPTR
   \   000016   FB           MOV       R3,A
   \   000017   EE           MOV       A,R6
   \   000018   8C82         MOV       DPL,R4
   \   00001A   8D83         MOV       DPH,R5
   \   00001C   A3           INC       DPTR
   \   00001D   F0           MOVX      @DPTR,A
   \   00001E   A3           INC       DPTR
   \   00001F   EB           MOV       A,R3
   \   000020   F0           MOVX      @DPTR,A
   \   000021   8C82         MOV       DPL,R4
   \   000023   8D83         MOV       DPH,R5
   \   000025   E0           MOVX      A,@DPTR
   \   000026   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine113:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine271_0
   \   000001                ; // Fall through to label ??Subroutine271_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine271_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   8C82         MOV       DPL,R4
   \   000003   8D83         MOV       DPH,R5
   \   000005   22           RET
   2568          
   2569          /*********************************************************************
   2570           * @fn          ZDO_ParesPowerDescRsp
   2571           *
   2572           * @brief       This function parses the Power_Desc_rsp message.
   2573           *
   2574           * @param       inMsg  - incoming message
   2575           * @param       pNPRsp - place to parse the message into
   2576           *
   2577           * @return      none
   2578           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2579          void ZDO_ParsePowerDescRsp( zdoIncomingMsg_t *inMsg, ZDO_PowerRsp_t *pNPRsp )
   \                     ZDO_ParsePowerDescRsp:
   2580          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   2581            uint8 *msg;
   2582          
   2583            msg = inMsg->asdu;
   \   000005   12....       LCALL     ??Subroutine272_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_684:
   \   000008   12....       LCALL     ?Subroutine107 & 0xFFFF
   2584            pNPRsp->status = *msg++;
   \                     ??CrossCallReturnLabel_172:
   \   00000B   12....       LCALL     ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_561:
   \   00000E   AA82         MOV       R2,DPL
   \   000010   AB83         MOV       R3,DPH
   2585            pNPRsp->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   \   000012   E0           MOVX      A,@DPTR
   \   000013   FE           MOV       R6,A
   \   000014   A3           INC       DPTR
   \   000015   E0           MOVX      A,@DPTR
   \   000016   F9           MOV       R1,A
   \   000017   EE           MOV       A,R6
   \   000018   8C82         MOV       DPL,R4
   \   00001A   8D83         MOV       DPH,R5
   \   00001C   A3           INC       DPTR
   \   00001D   12....       LCALL     ??Subroutine223_0 & 0xFFFF
   2586          
   2587            if ( pNPRsp->status == ZDP_SUCCESS )
   \                     ??CrossCallReturnLabel_367:
   \   000020   8C82         MOV       DPL,R4
   \   000022   8D83         MOV       DPH,R5
   \   000024   E0           MOVX      A,@DPTR
   \   000025   6003         JZ        $+5
   \   000027   02....       LJMP      ??ZDO_ParsePowerDescRsp_0 & 0xFFFF
   2588            {
   2589              msg += 2;
   2590              pNPRsp->pwrDesc.AvailablePowerSources = *msg >> 4;
   \   00002A   EA           MOV       A,R2
   \   00002B   2402         ADD       A,#0x2
   \   00002D   F8           MOV       R0,A
   \   00002E   E4           CLR       A
   \   00002F   3B           ADDC      A,R3
   \   000030   F9           MOV       R1,A
   \   000031   E8           MOV       A,R0
   \   000032   FE           MOV       R6,A
   \   000033   E9           MOV       A,R1
   \   000034   FF           MOV       R7,A
   \   000035   EC           MOV       A,R4
   \   000036   2403         ADD       A,#0x3
   \   000038   E4           CLR       A
   \   000039   3D           ADDC      A,R5
   \   00003A   0C           INC       R4
   \   00003B   0C           INC       R4
   \   00003C   0C           INC       R4
   \   00003D   FD           MOV       R5,A
   \   00003E   8C82         MOV       DPL,R4
   \   000040   8D83         MOV       DPH,R5
   \   000042   E0           MOVX      A,@DPTR
   \   000043   540F         ANL       A,#0xf
   \   000045   F5..         MOV       ?V2,A
   \   000047   A3           INC       DPTR
   \   000048   E0           MOVX      A,@DPTR
   \   000049   12....       LCALL     ?Subroutine114 & 0xFFFF
   \                     ??CrossCallReturnLabel_178:
   \   00004C   7404         MOV       A,#0x4
   \   00004E   78..         MOV       R0,#?V0
   \   000050   12....       LCALL     ?S_SHL
   \   000053   E5..         MOV       A,?V2
   \   000055   45..         ORL       A,?V0
   \   000057   F8           MOV       R0,A
   \   000058   A9..         MOV       R1,?V3
   \   00005A   8C82         MOV       DPL,R4
   \   00005C   8D83         MOV       DPH,R5
   \   00005E   12....       LCALL     ??Subroutine223_0 & 0xFFFF
   2591              pNPRsp->pwrDesc.PowerMode = *msg++ & 0x0F;
   \                     ??CrossCallReturnLabel_368:
   \   000061   E8           MOV       A,R0
   \   000062   54F0         ANL       A,#0xf0
   \   000064   F8           MOV       R0,A
   \   000065   8E82         MOV       DPL,R6
   \   000067   8F83         MOV       DPH,R7
   \   000069   E0           MOVX      A,@DPTR
   \   00006A   540F         ANL       A,#0xf
   \   00006C   FE           MOV       R6,A
   \   00006D   E8           MOV       A,R0
   \   00006E   4E           ORL       A,R6
   \   00006F   F5..         MOV       ?V0,A
   \   000071   E9           MOV       A,R1
   \   000072   F5..         MOV       ?V1,A
   \   000074   8C82         MOV       DPL,R4
   \   000076   8D83         MOV       DPH,R5
   \   000078   E5..         MOV       A,?V0
   \   00007A   12....       LCALL     ??Subroutine255_0 & 0xFFFF
   2592              pNPRsp->pwrDesc.CurrentPowerSourceLevel = *msg >> 4;
   \                     ??CrossCallReturnLabel_565:
   \   00007D   2403         ADD       A,#0x3
   \   00007F   F8           MOV       R0,A
   \   000080   E4           CLR       A
   \   000081   3B           ADDC      A,R3
   \   000082   F9           MOV       R1,A
   \   000083   E8           MOV       A,R0
   \   000084   FE           MOV       R6,A
   \   000085   E9           MOV       A,R1
   \   000086   FF           MOV       R7,A
   \   000087   E5..         MOV       A,?V0
   \   000089   F5..         MOV       ?V2,A
   \   00008B   E5..         MOV       A,?V1
   \   00008D   540F         ANL       A,#0xf
   \   00008F   12....       LCALL     ?Subroutine114 & 0xFFFF
   \                     ??CrossCallReturnLabel_179:
   \   000092   740C         MOV       A,#0xc
   \   000094   78..         MOV       R0,#?V0
   \   000096   12....       LCALL     ?S_SHL
   \   000099   E5..         MOV       A,?V3
   \   00009B   45..         ORL       A,?V1
   \   00009D   F9           MOV       R1,A
   \   00009E   8C82         MOV       DPL,R4
   \   0000A0   8D83         MOV       DPH,R5
   \   0000A2   E5..         MOV       A,?V2
   \   0000A4   12....       LCALL     ??Subroutine223_0 & 0xFFFF
   2593              pNPRsp->pwrDesc.CurrentPowerSource = *msg++ & 0x0F;
   \                     ??CrossCallReturnLabel_369:
   \   0000A7   8E82         MOV       DPL,R6
   \   0000A9   8F83         MOV       DPH,R7
   \   0000AB   E0           MOVX      A,@DPTR
   \   0000AC   540F         ANL       A,#0xf
   \   0000AE   F8           MOV       R0,A
   \   0000AF   EA           MOV       A,R2
   \   0000B0   2404         ADD       A,#0x4
   \   0000B2   8C82         MOV       DPL,R4
   \   0000B4   8D83         MOV       DPH,R5
   \   0000B6   A3           INC       DPTR
   \   0000B7   E0           MOVX      A,@DPTR
   \   0000B8   54F0         ANL       A,#0xf0
   \   0000BA   F0           MOVX      @DPTR,A
   \   0000BB   E8           MOV       A,R0
   \   0000BC   F9           MOV       R1,A
   \   0000BD   8C82         MOV       DPL,R4
   \   0000BF   8D83         MOV       DPH,R5
   \   0000C1   A3           INC       DPTR
   \   0000C2   E0           MOVX      A,@DPTR
   \   0000C3   49           ORL       A,R1
   \   0000C4   F0           MOVX      @DPTR,A
   2594            }
   2595          }
   \                     ??ZDO_ParsePowerDescRsp_0:
   \   0000C5   02....       LJMP      ??Subroutine210_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine114:
   \   000000   F5..         MOV       ?V3,A
   \   000002   8E82         MOV       DPL,R6
   \   000004   8F83         MOV       DPH,R7
   \   000006   E0           MOVX      A,@DPTR
   \   000007   C4           SWAP      A
   \   000008   540F         ANL       A,#0xf
   \   00000A   F5..         MOV       ?V0,A
   \   00000C   75..00       MOV       ?V1,#0x0
   \   00000F   22           RET
   2596          
   2597          /*********************************************************************
   2598           * @fn          ZDO_ParseSimpleDescRsp
   2599           *
   2600           * @brief       This function parse the Simple_Desc_rsp message.
   2601           *
   2602           *   NOTE: The pAppInClusterList and pAppOutClusterList fields
   2603           *         in the SimpleDescriptionFormat_t structure are allocated
   2604           *         and the calling function needs to free [osal_msg_free()]
   2605           *         these buffers.
   2606           *
   2607           * @param       inMsg  - incoming message
   2608           * @param       pSimpleDescRsp - place to parse the message into
   2609           *
   2610           * @return      none
   2611           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2612          void ZDO_ParseSimpleDescRsp( zdoIncomingMsg_t *inMsg, ZDO_SimpleDescRsp_t *pSimpleDescRsp )
   \                     ZDO_ParseSimpleDescRsp:
   2613          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   2614            uint8 *msg;
   2615          
   2616            msg = inMsg->asdu;
   \   000005   12....       LCALL     ?Subroutine10 & 0xFFFF
   2617            pSimpleDescRsp->status = *msg++;
   2618            pSimpleDescRsp->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   2619            msg += sizeof ( uint16 );
   2620            msg++; // Skip past the length field.
   2621          
   2622            if ( pSimpleDescRsp->status == ZDP_SUCCESS )
   \                     ??CrossCallReturnLabel_3:
   \   000008   7011         JNZ       ??ZDO_ParseSimpleDescRsp_0
   2623            {
   2624              ZDO_ParseSimpleDescBuf( msg, &(pSimpleDescRsp->simpleDesc) );
   \   00000A                ; Setup parameters for call to function ZDO_ParseSimpleDescBuf
   \   00000A   EC           MOV       A,R4
   \   00000B   2403         ADD       A,#0x3
   \   00000D   FC           MOV       R4,A
   \   00000E   5001         JNC       ??ZDO_ParseSimpleDescRsp_1
   \   000010   0D           INC       R5
   \                     ??ZDO_ParseSimpleDescRsp_1:
   \   000011   E8           MOV       A,R0
   \   000012   2403         ADD       A,#0x3
   \   000014   FA           MOV       R2,A
   \   000015   E4           CLR       A
   \   000016   39           ADDC      A,R1
   \   000017   FB           MOV       R3,A
   \   000018   12....       LCALL     `??ZDO_ParseSimpleDescBuf::?relay`; Banked call to: ZDO_ParseSimpleDescBuf
   2625            }
   2626          }
   \                     ??ZDO_ParseSimpleDescRsp_0:
   \   00001B   02....       LJMP      ?Subroutine1 & 0xFFFF
   2627          
   2628          /*********************************************************************
   2629           * @fn          ZDO_ParseEPListRsp
   2630           *
   2631           * @brief       This parse the Active_EP_rsp or Match_Desc_rsp message.
   2632           *
   2633           * @param       inMsg  - incoming message
   2634           *
   2635           * @return      none
   2636           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2637          ZDO_ActiveEndpointRsp_t *ZDO_ParseEPListRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseEPListRsp:
   2638          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   2639            ZDO_ActiveEndpointRsp_t *pRsp;
   2640            uint8 *msg;
   2641            uint8 Status;
   2642            uint8 cnt;
   2643          
   2644            msg = inMsg->asdu;
   \   000005   12....       LCALL     ??Subroutine263_0 & 0xFFFF
   2645            Status = *msg++;
   \                     ??CrossCallReturnLabel_639:
   \   000008   F5..         MOV       ?V3,A
   \   00000A   A3           INC       DPTR
   \   00000B   AE82         MOV       R6,DPL
   \   00000D   AF83         MOV       R7,DPH
   2646            cnt = msg[2];
   \   00000F   A3           INC       DPTR
   \   000010   A3           INC       DPTR
   \   000011   E0           MOVX      A,@DPTR
   \   000012   F5..         MOV       ?V2,A
   2647          
   2648            pRsp = (ZDO_ActiveEndpointRsp_t *)osal_mem_alloc( sizeof(  ZDO_ActiveEndpointRsp_t ) + cnt );
   \   000014                ; Setup parameters for call to function osal_mem_alloc
   \   000014   12....       LCALL     ??Subroutine269_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_663:
   \   000017   3400         ADDC      A,#0x0
   \   000019   FB           MOV       R3,A
   \   00001A   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00001D   8A..         MOV       ?V0,R2
   \   00001F   8B..         MOV       ?V1,R3
   2649            if ( pRsp )
   \   000021   EA           MOV       A,R2
   \   000022   45..         ORL       A,?V1
   \   000024   6045         JZ        ??ZDO_ParseEPListRsp_0
   2650            {
   2651              pRsp->status = Status;
   \   000026   8A82         MOV       DPL,R2
   \   000028   8B83         MOV       DPH,R3
   \   00002A   E5..         MOV       A,?V3
   \   00002C   F0           MOVX      @DPTR,A
   2652              pRsp->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   \   00002D   8E82         MOV       DPL,R6
   \   00002F   8F83         MOV       DPH,R7
   \   000031   12....       LCALL     ?Subroutine109 & 0xFFFF
   \                     ??CrossCallReturnLabel_345:
   \   000034   85..82       MOV       DPL,?V0
   \   000037   8B83         MOV       DPH,R3
   \   000039   A3           INC       DPTR
   \   00003A   12....       LCALL     ??Subroutine223_0 & 0xFFFF
   2653              msg += sizeof( uint16 );
   2654              pRsp->cnt = cnt;
   \                     ??CrossCallReturnLabel_370:
   \   00003D   85..82       MOV       DPL,?V0
   \   000040   8B83         MOV       DPH,R3
   \   000042   A3           INC       DPTR
   \   000043   A3           INC       DPTR
   \   000044   A3           INC       DPTR
   \   000045   E5..         MOV       A,?V2
   \   000047   12....       LCALL     ?Subroutine46 & 0xFFFF
   2655              msg++; // pass cnt
   2656              osal_memcpy( pRsp->epList, msg, cnt );
   2657            }
   \                     ??CrossCallReturnLabel_65:
   \   00004A   A982         MOV       R1,DPL
   \   00004C   AA83         MOV       R2,DPH
   \   00004E   89..         MOV       ?V4,R1
   \   000050   8A..         MOV       ?V5,R2
   \   000052   88..         MOV       ?V6,R0
   \   000054   78..         MOV       R0,#?V4
   \   000056   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000059   AC..         MOV       R4,?V2
   \   00005B   7D00         MOV       R5,#0x0
   \   00005D   12....       LCALL     ?Subroutine151 & 0xFFFF
   \                     ??CrossCallReturnLabel_666:
   \   000060   35..         ADDC      A,?V1
   \   000062   FB           MOV       R3,A
   \   000063   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000066   7403         MOV       A,#0x3
   \   000068   12....       LCALL     ?DEALLOC_XSTACK8
   2658          
   2659            return ( pRsp );
   \                     ??ZDO_ParseEPListRsp_0:
   \   00006B   AA..         MOV       R2,?V0
   \   00006D   AB..         MOV       R3,?V1
   \   00006F                REQUIRE ?Subroutine6
   \   00006F                ; // Fall through to label ?Subroutine6
   2660          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   7F07         MOV       R7,#0x7
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine263_0:
   \   000000   12....       LCALL     ?Subroutine185 & 0xFFFF
   \                     ??CrossCallReturnLabel_688:
   \   000003                REQUIRE ??Subroutine264_0
   \   000003                ; // Fall through to label ??Subroutine264_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine151:
   \   000000   E5..         MOV       A,?V0
   \   000002                REQUIRE ??Subroutine269_0
   \   000002                ; // Fall through to label ??Subroutine269_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine269_0:
   \   000000   2404         ADD       A,#0x4
   \   000002   FA           MOV       R2,A
   \   000003   E4           CLR       A
   \   000004   22           RET
   2661          
   2662          /*********************************************************************
   2663           * @fn          ZDO_ParseServerDiscRsp
   2664           *
   2665           * @brief       Parse the Server_Discovery_rsp message.
   2666           *
   2667           * @param       inMsg - incoming message.
   2668           * @param       pRsp - place to put the parsed information.
   2669           *
   2670           * @return      none
   2671           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2672          void ZDO_ParseServerDiscRsp( zdoIncomingMsg_t *inMsg, ZDO_ServerDiscRsp_t *pRsp )
   \                     ZDO_ParseServerDiscRsp:
   2673          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   2674            pRsp->status = inMsg->asdu[0];
   \   000005   EA           MOV       A,R2
   \   000006   2413         ADD       A,#0x13
   \   000008   F8           MOV       R0,A
   \   000009   E4           CLR       A
   \   00000A   3B           ADDC      A,R3
   \   00000B   F9           MOV       R1,A
   \   00000C   8882         MOV       DPL,R0
   \   00000E   8983         MOV       DPH,R1
   \   000010   12....       LCALL     ??Subroutine259_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_615:
   \   000013   F583         MOV       DPH,A
   \   000015   8A82         MOV       DPL,R2
   \   000017   12....       LCALL     ??Subroutine271_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_677:
   \   00001A   12....       LCALL     ?Subroutine33 & 0xFFFF
   2675            pRsp->serverMask = BUILD_UINT16( inMsg->asdu[1], inMsg->asdu[2] );
   \                     ??CrossCallReturnLabel_47:
   \   00001D   8882         MOV       DPL,R0
   \   00001F   8983         MOV       DPH,R1
   \   000021   A3           INC       DPTR
   \   000022   E0           MOVX      A,@DPTR
   \   000023   FA           MOV       R2,A
   \   000024   8882         MOV       DPL,R0
   \   000026   8983         MOV       DPH,R1
   \   000028   A3           INC       DPTR
   \   000029   12....       LCALL     ??Subroutine273_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_694:
   \   00002C   A3           INC       DPTR
   \   00002D   12....       LCALL     ??Subroutine223_0 & 0xFFFF
   2676          }
   \                     ??CrossCallReturnLabel_371:
   \   000030   02....       LJMP      ?Subroutine1 & 0xFFFF
   2677          
   2678          /*********************************************************************
   2679           * @fn          ZDO_ParseMgmtLqiRsp
   2680           *
   2681           * @brief       This function parses the incoming Management
   2682           *              LQI response
   2683           *
   2684           * @param       inMsg - incoming message
   2685           *
   2686           * @return      a pointer to parsed response structure (NULL if not allocated).
   2687           *          This structure was allocated using osal_mem_alloc, so it must be freed
   2688           *          by the calling function [osal_mem_free()].
   2689           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   AA..         MOV       R2,?V2
   \   000002   AB..         MOV       R3,?V3
   \   000004                REQUIRE ??Subroutine217_0
   \   000004                ; // Fall through to label ??Subroutine217_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2690          ZDO_MgmtLqiRsp_t *ZDO_ParseMgmtLqiRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseMgmtLqiRsp:
   2691          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   2692            ZDO_MgmtLqiRsp_t *pRsp;
   2693            uint8 status;
   2694            uint8 startIndex = 0;
   \   000005   75..00       MOV       ?V6,#0x0
   2695            uint8 neighborLqiCount = 0;
   \   000008   75..00       MOV       ?V5,#0x0
   2696            uint8 neighborLqiEntries = 0;
   \   00000B   75..00       MOV       ?V4,#0x0
   2697            uint8 *msg;
   2698          
   2699            msg = inMsg->asdu;
   \   00000E   12....       LCALL     ?Subroutine69 & 0xFFFF
   2700          
   2701            status = *msg++;
   2702            if ( status == ZSuccess )
   \                     ??CrossCallReturnLabel_112:
   \   000011   7017         JNZ       ??ZDO_ParseMgmtLqiRsp_0
   2703            {
   2704              neighborLqiEntries = *msg++;
   \   000013   E0           MOVX      A,@DPTR
   \   000014   F5..         MOV       ?V4,A
   2705              startIndex = *msg++;
   \   000016   A3           INC       DPTR
   \   000017   E0           MOVX      A,@DPTR
   \   000018   F5..         MOV       ?V6,A
   2706              neighborLqiCount = *msg++;
   \   00001A   8E82         MOV       DPL,R6
   \   00001C   8F83         MOV       DPH,R7
   \   00001E   A3           INC       DPTR
   \   00001F   A3           INC       DPTR
   \   000020   E0           MOVX      A,@DPTR
   \   000021   F5..         MOV       ?V5,A
   \   000023   EE           MOV       A,R6
   \   000024   2403         ADD       A,#0x3
   \   000026   FE           MOV       R6,A
   \   000027   5001         JNC       ??ZDO_ParseMgmtLqiRsp_0
   \   000029   0F           INC       R7
   2707            }
   2708          
   2709            // Allocate a buffer big enough to handle the list.
   2710            pRsp = (ZDO_MgmtLqiRsp_t *)osal_mem_alloc(
   2711                      sizeof( ZDO_MgmtLqiRsp_t ) + (neighborLqiCount * sizeof( neighborLqiItem_t )) );
   \                     ??ZDO_ParseMgmtLqiRsp_0:
   \   00002A                ; Setup parameters for call to function osal_mem_alloc
   \   00002A   E5..         MOV       A,?V5
   \   00002C   75F00E       MOV       B,#0xe
   \   00002F   12....       LCALL     ?Subroutine150 & 0xFFFF
   \                     ??CrossCallReturnLabel_253:
   \   000032   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000035   8A..         MOV       ?V2,R2
   \   000037   8B..         MOV       ?V3,R3
   2712            if ( pRsp )
   \   000039   EA           MOV       A,R2
   \   00003A   45..         ORL       A,?V3
   \   00003C   6054         JZ        ??ZDO_ParseMgmtLqiRsp_1
   2713            {
   2714              uint8 x;
   2715              neighborLqiItem_t *pList = pRsp->list;
   \   00003E   12....       LCALL     ?Subroutine16 & 0xFFFF
   2716              pRsp->status = status;
   2717              pRsp->neighborLqiEntries = neighborLqiEntries;
   2718              pRsp->startIndex = startIndex;
   \                     ??CrossCallReturnLabel_634:
   \   000041   E5..         MOV       A,?V6
   \   000043   12....       LCALL     ??Subroutine267_0 & 0xFFFF
   2719              pRsp->neighborLqiCount = neighborLqiCount;
   \                     ??CrossCallReturnLabel_652:
   \   000046   E5..         MOV       A,?V5
   \   000048   F0           MOVX      @DPTR,A
   2720          
   2721              for ( x = 0; x < neighborLqiCount; x++ )
   \   000049   75..00       MOV       ?V4,#0x0
   \   00004C   803D         SJMP      ??ZDO_ParseMgmtLqiRsp_2
   2722              {
   2723                osal_cpyExtAddr(pList->extPANId, msg);   //Copy extended PAN ID
   \                     ??ZDO_ParseMgmtLqiRsp_3:
   \   00004E                ; Setup parameters for call to function sAddrExtCpy
   \   00004E   EE           MOV       A,R6
   \   00004F   FC           MOV       R4,A
   \   000050   EF           MOV       A,R7
   \   000051   FD           MOV       R5,A
   \   000052   12....       LCALL     ?Subroutine151 & 0xFFFF
   \                     ??CrossCallReturnLabel_667:
   \   000055   35..         ADDC      A,?V1
   \   000057   FB           MOV       R3,A
   \   000058   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   2724                msg += Z_EXTADDR_LEN;
   2725          
   2726                msg += Z_EXTADDR_LEN;  // Throwing away IEEE.
   \   00005B   EE           MOV       A,R6
   \   00005C   2410         ADD       A,#0x10
   \   00005E   FE           MOV       R6,A
   \   00005F   5001         JNC       ??ZDO_ParseMgmtLqiRsp_4
   \   000061   0F           INC       R7
   2727                pList->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseMgmtLqiRsp_4:
   \   000062   12....       LCALL     ?Subroutine90 & 0xFFFF
   \                     ??CrossCallReturnLabel_149:
   \   000065   F0           MOVX      @DPTR,A
   \   000066   A3           INC       DPTR
   \   000067   E9           MOV       A,R1
   \   000068   12....       LCALL     ?Subroutine17 & 0xFFFF
   2728                msg += 2 + 1 + 1 + 1;      // Skip DeviceType, RxOnIdle, Rlationship, PermitJoining and Depth
   2729                pList->rxLqi = *msg++;
   \                     ??CrossCallReturnLabel_17:
   \   00006B   C0E0         PUSH      A
   \   00006D   12....       LCALL     ?Subroutine148 & 0xFFFF
   \                     ??CrossCallReturnLabel_249:
   \   000070   D0E0         POP       A
   \   000072   F0           MOVX      @DPTR,A
   \   000073   EE           MOV       A,R6
   \   000074   2406         ADD       A,#0x6
   \   000076   FE           MOV       R6,A
   \   000077   5001         JNC       ??ZDO_ParseMgmtLqiRsp_5
   \   000079   0F           INC       R7
   2730                pList->txQuality = 0;  // This is not specified OTA by ZigBee 1.1.
   \                     ??ZDO_ParseMgmtLqiRsp_5:
   \   00007A   12....       LCALL     ?Subroutine138 & 0xFFFF
   \                     ??CrossCallReturnLabel_228:
   \   00007D   E4           CLR       A
   \   00007E   F0           MOVX      @DPTR,A
   2731                pList++;
   \   00007F   E5..         MOV       A,?V0
   \   000081   240E         ADD       A,#0xe
   \   000083   F5..         MOV       ?V0,A
   \   000085   5002         JNC       ??ZDO_ParseMgmtLqiRsp_6
   \   000087   05..         INC       ?V1
   2732              }
   \                     ??ZDO_ParseMgmtLqiRsp_6:
   \   000089   05..         INC       ?V4
   \                     ??ZDO_ParseMgmtLqiRsp_2:
   \   00008B   E5..         MOV       A,?V4
   \   00008D   C3           CLR       C
   \   00008E   95..         SUBB      A,?V5
   \   000090   40BC         JC        ??ZDO_ParseMgmtLqiRsp_3
   2733            }
   2734          
   2735            return ( pRsp );
   \                     ??ZDO_ParseMgmtLqiRsp_1:
   \   000092   02....       LJMP      ?Subroutine3 & 0xFFFF
   2736          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   12....       LCALL     ?Subroutine194 & 0xFFFF
   \                     ??CrossCallReturnLabel_319:
   \   000003   8A82         MOV       DPL,R2
   \   000005   8B83         MOV       DPH,R3
   \   000007   E5..         MOV       A,?V7
   \   000009                REQUIRE ??Subroutine262_0
   \   000009                ; // Fall through to label ??Subroutine262_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine262_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   A3           INC       DPTR
   \   000002   E5..         MOV       A,?V4
   \   000004   12....       LCALL     ?Subroutine158 & 0xFFFF
   \                     ??CrossCallReturnLabel_655:
   \   000007   A3           INC       DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine194:
   \   000000   EA           MOV       A,R2
   \   000001   2404         ADD       A,#0x4
   \   000003   F5..         MOV       ?V0,A
   \   000005   E4           CLR       A
   \   000006   35..         ADDC      A,?V3
   \   000008   F5..         MOV       ?V1,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine148:
   \   000000   E5..         MOV       A,?V0
   \   000002   240D         ADD       A,#0xd
   \   000004   12....       LCALL     ??Subroutine260_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_631:
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine150:
   \   000000   A4           MUL       AB
   \   000001   A9F0         MOV       R1,B
   \   000003   2404         ADD       A,#0x4
   \   000005   FA           MOV       R2,A
   \   000006   E4           CLR       A
   \   000007   39           ADDC      A,R1
   \   000008   FB           MOV       R3,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine69:
   \   000000   12....       LCALL     ?Subroutine185 & 0xFFFF
   \                     ??CrossCallReturnLabel_687:
   \   000003   12....       LCALL     ?Subroutine166 & 0xFFFF
   \                     ??CrossCallReturnLabel_643:
   \   000006   F5..         MOV       ?V7,A
   \   000008   A3           INC       DPTR
   \   000009   AE82         MOV       R6,DPL
   \   00000B   AF83         MOV       R7,DPH
   \   00000D   22           RET
   2737          
   2738          /*********************************************************************
   2739           * @fn          ZDO_ParseMgmNwkDiscRsp
   2740           *
   2741           * @brief       This function parses the incoming Management
   2742           *              Network Discover response.
   2743           *
   2744           * @param       inMsg - incoming message
   2745           *
   2746           * @return      pointer to parsed response.  This structure was
   2747           *          allocated using osal_mem_alloc, so it must be freed
   2748           *          by the calling function [osal_mem_free()].
   2749           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2750          ZDO_MgmNwkDiscRsp_t *ZDO_ParseMgmNwkDiscRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseMgmNwkDiscRsp:
   2751          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   2752            ZDO_MgmNwkDiscRsp_t *pRsp;
   2753            uint8 status;
   2754            uint8 networkCount = 0;
   \   000005   75..00       MOV       ?V0,#0x0
   2755            uint8 startIndex = 0;
   \   000008   75..00       MOV       ?V1,#0x0
   2756            uint8 networkListCount = 0;
   \   00000B   75..00       MOV       ?V7,#0x0
   2757            uint8 *msg;
   2758          
   2759            msg = inMsg->asdu;
   \   00000E   12....       LCALL     ??Subroutine263_0 & 0xFFFF
   2760            status = *msg++;
   \                     ??CrossCallReturnLabel_640:
   \   000011   F5..         MOV       ?V6,A
   \   000013   A3           INC       DPTR
   \   000014   AE82         MOV       R6,DPL
   \   000016   AF83         MOV       R7,DPH
   2761          
   2762            if ( status == ZSuccess )
   \   000018   700F         JNZ       ??ZDO_ParseMgmNwkDiscRsp_0
   2763            {
   2764              networkCount = *msg++;
   \   00001A   E0           MOVX      A,@DPTR
   \   00001B   F5..         MOV       ?V0,A
   2765              startIndex = *msg++;
   \   00001D   12....       LCALL     ?Subroutine98 & 0xFFFF
   2766              networkListCount = *msg++;
   2767            }
   \                     ??CrossCallReturnLabel_162:
   \   000020   F5..         MOV       ?V7,A
   \   000022   EE           MOV       A,R6
   \   000023   2403         ADD       A,#0x3
   \   000025   FE           MOV       R6,A
   \   000026   5001         JNC       ??ZDO_ParseMgmNwkDiscRsp_0
   \   000028   0F           INC       R7
   2768          
   2769            // Allocate a buffer big enough to handle the list.
   2770            pRsp = (ZDO_MgmNwkDiscRsp_t *)osal_mem_alloc( sizeof( ZDO_MgmNwkDiscRsp_t )
   2771                                            + (networkListCount * sizeof( mgmtNwkDiscItem_t )) );
   \                     ??ZDO_ParseMgmNwkDiscRsp_0:
   \   000029                ; Setup parameters for call to function osal_mem_alloc
   \   000029   E5..         MOV       A,?V7
   \   00002B   F5..         MOV       ?V2,A
   \   00002D   75..00       MOV       ?V3,#0x0
   \   000030   7404         MOV       A,#0x4
   \   000032   78..         MOV       R0,#?V2
   \   000034   12....       LCALL     ?S_SHL
   \   000037   E5..         MOV       A,?V2
   \   000039   12....       LCALL     ??Subroutine269_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_664:
   \   00003C   35..         ADDC      A,?V3
   \   00003E   FB           MOV       R3,A
   \   00003F   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000042   8A..         MOV       ?V2,R2
   \   000044   8B..         MOV       ?V3,R3
   2772            if ( pRsp )
   \   000046   EA           MOV       A,R2
   \   000047   45..         ORL       A,?V3
   \   000049   7003         JNZ       $+5
   \   00004B   02....       LJMP      ??ZDO_ParseMgmNwkDiscRsp_1 & 0xFFFF
   2773            {
   2774              uint8 x;
   2775              mgmtNwkDiscItem_t *pList;
   2776          
   2777              pRsp->status = status;
   \   00004E   8A82         MOV       DPL,R2
   \   000050   8B83         MOV       DPH,R3
   \   000052   E5..         MOV       A,?V6
   \   000054   F0           MOVX      @DPTR,A
   2778              pRsp->networkCount = networkCount;
   \   000055   A3           INC       DPTR
   \   000056   E5..         MOV       A,?V0
   \   000058   12....       LCALL     ??Subroutine253_0 & 0xFFFF
   2779              pRsp->startIndex = startIndex;
   \                     ??CrossCallReturnLabel_560:
   \   00005B   A3           INC       DPTR
   \   00005C   12....       LCALL     ?Subroutine38 & 0xFFFF
   2780              pRsp->networkListCount = networkListCount;
   \                     ??CrossCallReturnLabel_649:
   \   00005F   E5..         MOV       A,?V7
   \   000061   F0           MOVX      @DPTR,A
   2781              pList = pRsp->list;
   \   000062   12....       LCALL     ?Subroutine194 & 0xFFFF
   2782          
   2783              for ( x = 0; x < networkListCount; x++ )
   \                     ??CrossCallReturnLabel_318:
   \   000065   75..00       MOV       ?V4,#0x0
   \   000068   807D         SJMP      ??ZDO_ParseMgmNwkDiscRsp_2
   2784              {
   2785                osal_cpyExtAddr(pList->extendedPANID, msg);   //Copy extended PAN ID
   \                     ??ZDO_ParseMgmNwkDiscRsp_3:
   \   00006A                ; Setup parameters for call to function sAddrExtCpy
   \   00006A   EE           MOV       A,R6
   \   00006B   FC           MOV       R4,A
   \   00006C   EF           MOV       A,R7
   \   00006D   FD           MOV       R5,A
   \   00006E   AA..         MOV       R2,?V0
   \   000070   AB..         MOV       R3,?V1
   \   000072   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   2786                pList->PANId = BUILD_UINT16( msg[0], msg[1] );
   \   000075   12....       LCALL     ?Subroutine63 & 0xFFFF
   \                     ??CrossCallReturnLabel_100:
   \   000078   A3           INC       DPTR
   \   000079   F0           MOVX      @DPTR,A
   \   00007A   A3           INC       DPTR
   \   00007B   E9           MOV       A,R1
   \   00007C   12....       LCALL     ?Subroutine28 & 0xFFFF
   2787                msg += Z_EXTADDR_LEN;
   2788          
   2789                pList->logicalChannel = *msg++;
   \                     ??CrossCallReturnLabel_37:
   \   00007F   85..82       MOV       DPL,?V0
   \   000082   85..83       MOV       DPH,?V1
   \   000085   A3           INC       DPTR
   \   000086   A3           INC       DPTR
   \   000087   A3           INC       DPTR
   \   000088   A3           INC       DPTR
   \   000089   A3           INC       DPTR
   \   00008A   A3           INC       DPTR
   \   00008B   A3           INC       DPTR
   \   00008C   A3           INC       DPTR
   \   00008D   A3           INC       DPTR
   \   00008E   A3           INC       DPTR
   \   00008F   F0           MOVX      @DPTR,A
   2790                pList->stackProfile = (*msg) & 0x0F;
   \   000090   EE           MOV       A,R6
   \   000091   2409         ADD       A,#0x9
   \   000093   F8           MOV       R0,A
   \   000094   12....       LCALL     ?Subroutine125 & 0xFFFF
   \                     ??CrossCallReturnLabel_191:
   \   000097   C0E0         PUSH      A
   \   000099   12....       LCALL     ?Subroutine142 & 0xFFFF
   \                     ??CrossCallReturnLabel_236:
   \   00009C   D0E0         POP       A
   \   00009E   12....       LCALL     ?Subroutine44 & 0xFFFF
   2791                pList->version = (*msg++ >> 4) & 0x0F;
   \                     ??CrossCallReturnLabel_60:
   \   0000A1   C0E0         PUSH      A
   \   0000A3   12....       LCALL     ?Subroutine138 & 0xFFFF
   \                     ??CrossCallReturnLabel_229:
   \   0000A6   D0E0         POP       A
   \   0000A8   F0           MOVX      @DPTR,A
   2792                pList->beaconOrder = (*msg) & 0x0F;
   \   0000A9   EE           MOV       A,R6
   \   0000AA   240A         ADD       A,#0xa
   \   0000AC   08           INC       R0
   \   0000AD   12....       LCALL     ?Subroutine125 & 0xFFFF
   \                     ??CrossCallReturnLabel_192:
   \   0000B0   C0E0         PUSH      A
   \   0000B2   12....       LCALL     ?Subroutine148 & 0xFFFF
   \                     ??CrossCallReturnLabel_250:
   \   0000B5   D0E0         POP       A
   \   0000B7   12....       LCALL     ?Subroutine44 & 0xFFFF
   2793                pList->superFrameOrder = (*msg++ >> 4) & 0x0F;
   \                     ??CrossCallReturnLabel_61:
   \   0000BA   C0E0         PUSH      A
   \   0000BC   12....       LCALL     ?Subroutine132 & 0xFFFF
   \                     ??CrossCallReturnLabel_205:
   \   0000BF   D0E0         POP       A
   \   0000C1   F0           MOVX      @DPTR,A
   2794                pList->permitJoining = *msg++;
   \   0000C2   EE           MOV       A,R6
   \   0000C3   240B         ADD       A,#0xb
   \   0000C5   F582         MOV       DPL,A
   \   0000C7   E4           CLR       A
   \   0000C8   3F           ADDC      A,R7
   \   0000C9   F583         MOV       DPH,A
   \   0000CB   E0           MOVX      A,@DPTR
   \   0000CC   C0E0         PUSH      A
   \   0000CE   12....       LCALL     ?Subroutine129 & 0xFFFF
   \                     ??CrossCallReturnLabel_199:
   \   0000D1   D0E0         POP       A
   \   0000D3   F0           MOVX      @DPTR,A
   \   0000D4   EE           MOV       A,R6
   \   0000D5   240C         ADD       A,#0xc
   \   0000D7   FE           MOV       R6,A
   \   0000D8   5001         JNC       ??ZDO_ParseMgmNwkDiscRsp_4
   \   0000DA   0F           INC       R7
   2795                pList++;
   \                     ??ZDO_ParseMgmNwkDiscRsp_4:
   \   0000DB   E5..         MOV       A,?V0
   \   0000DD   2410         ADD       A,#0x10
   \   0000DF   F5..         MOV       ?V0,A
   \   0000E1   5002         JNC       ??ZDO_ParseMgmNwkDiscRsp_5
   \   0000E3   05..         INC       ?V1
   2796              }
   \                     ??ZDO_ParseMgmNwkDiscRsp_5:
   \   0000E5   05..         INC       ?V4
   \                     ??ZDO_ParseMgmNwkDiscRsp_2:
   \   0000E7   E5..         MOV       A,?V4
   \   0000E9   C3           CLR       C
   \   0000EA   95..         SUBB      A,?V7
   \   0000EC   5003         JNC       $+5
   \   0000EE   02....       LJMP      ??ZDO_ParseMgmNwkDiscRsp_3 & 0xFFFF
   2797            }
   2798          
   2799            return ( pRsp );
   \                     ??ZDO_ParseMgmNwkDiscRsp_1:
   \   0000F1   02....       LJMP      ?Subroutine3 & 0xFFFF
   2800          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine125:
   \   000000   E4           CLR       A
   \   000001   3F           ADDC      A,R7
   \   000002   F9           MOV       R1,A
   \   000003   8882         MOV       DPL,R0
   \   000005   8983         MOV       DPH,R1
   \   000007   E0           MOVX      A,@DPTR
   \   000008   540F         ANL       A,#0xf
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine44:
   \   000000   12....       LCALL     ?Subroutine198 & 0xFFFF
   \                     ??CrossCallReturnLabel_328:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   C4           SWAP      A
   \   000005   540F         ANL       A,#0xf
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine98:
   \   000000   A3           INC       DPTR
   \   000001   E0           MOVX      A,@DPTR
   \   000002   F5..         MOV       ?V1,A
   \   000004   8E82         MOV       DPL,R6
   \   000006   8F83         MOV       DPH,R7
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   E5..         MOV       A,?V1
   \   000002                REQUIRE ??Subroutine267_0
   \   000002                ; // Fall through to label ??Subroutine267_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine63:
   \   000000   12....       LCALL     ?Subroutine165 & 0xFFFF
   \                     ??CrossCallReturnLabel_277:
   \   000003   22           RET
   2801          
   2802          /*********************************************************************
   2803           * @fn          ZDO_ParseMgmtRtgRsp
   2804           *
   2805           * @brief       This function parses the incoming Management
   2806           *              Routing response.
   2807           *
   2808           * @param       inMsg - incoming message
   2809           *
   2810           * @return      a pointer to parsed response structure (NULL if not allocated).
   2811           *          This structure was allocated using osal_mem_alloc, so it must be freed
   2812           *          by the calling function [osal_mem_free()].
   2813           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine70:
   \   000000   75..00       MOV       ?V0,#0x0
   \   000003                REQUIRE ??Subroutine263_0
   \   000003                ; // Fall through to label ??Subroutine263_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2814          ZDO_MgmtRtgRsp_t *ZDO_ParseMgmtRtgRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseMgmtRtgRsp:
   2815          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   2816            ZDO_MgmtRtgRsp_t *pRsp;
   2817            uint8 status;
   2818            uint8 rtgCount = 0;
   \   000005   75..00       MOV       ?V4,#0x0
   2819            uint8 startIndex = 0;
   \   000008   75..00       MOV       ?V1,#0x0
   2820            uint8 rtgListCount = 0;
   \   00000B   12....       LCALL     ?Subroutine70 & 0xFFFF
   2821            uint8 *msg;
   2822          
   2823            msg = inMsg->asdu;
   2824          
   2825            status = *msg++;
   \                     ??CrossCallReturnLabel_637:
   \   00000E   F5..         MOV       ?V5,A
   \   000010   A3           INC       DPTR
   \   000011   AE82         MOV       R6,DPL
   \   000013   AF83         MOV       R7,DPH
   2826            if ( status == ZSuccess )
   \   000015   700F         JNZ       ??ZDO_ParseMgmtRtgRsp_0
   2827            {
   2828              rtgCount = *msg++;
   \   000017   E0           MOVX      A,@DPTR
   \   000018   F5..         MOV       ?V4,A
   2829              startIndex = *msg++;
   \   00001A   12....       LCALL     ?Subroutine98 & 0xFFFF
   2830              rtgListCount = *msg++;
   2831            }
   \                     ??CrossCallReturnLabel_163:
   \   00001D   F5..         MOV       ?V0,A
   \   00001F   EE           MOV       A,R6
   \   000020   2403         ADD       A,#0x3
   \   000022   FE           MOV       R6,A
   \   000023   5001         JNC       ??ZDO_ParseMgmtRtgRsp_0
   \   000025   0F           INC       R7
   2832          
   2833            // Allocate a buffer big enough to handle the list
   2834            pRsp = (ZDO_MgmtRtgRsp_t *)osal_mem_alloc(
   2835                    sizeof( ZDO_MgmtRtgRsp_t ) + (rtgListCount * sizeof( rtgItem_t )) );
   \                     ??ZDO_ParseMgmtRtgRsp_0:
   \   000026                ; Setup parameters for call to function osal_mem_alloc
   \   000026   E5..         MOV       A,?V0
   \   000028   75F007       MOV       B,#0x7
   \   00002B   12....       LCALL     ?Subroutine150 & 0xFFFF
   \                     ??CrossCallReturnLabel_254:
   \   00002E   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   2836            if ( pRsp )
   \   000031   EA           MOV       A,R2
   \   000032   4B           ORL       A,R3
   \   000033   6054         JZ        ??ZDO_ParseMgmtRtgRsp_1
   2837            {
   2838              uint8 x;
   2839              rtgItem_t *pList = pRsp->list;
   \   000035   EA           MOV       A,R2
   \   000036   2404         ADD       A,#0x4
   \   000038   F8           MOV       R0,A
   \   000039   E4           CLR       A
   \   00003A   3B           ADDC      A,R3
   \   00003B   F9           MOV       R1,A
   2840              pRsp->status = status;
   \   00003C   8A82         MOV       DPL,R2
   \   00003E   8B83         MOV       DPH,R3
   \   000040   E5..         MOV       A,?V5
   \   000042   12....       LCALL     ??Subroutine262_0 & 0xFFFF
   2841              pRsp->rtgCount = rtgCount;
   2842              pRsp->startIndex = startIndex;
   \                     ??CrossCallReturnLabel_636:
   \   000045   12....       LCALL     ?Subroutine38 & 0xFFFF
   2843              pRsp->rtgListCount = rtgListCount;
   \                     ??CrossCallReturnLabel_650:
   \   000048   E5..         MOV       A,?V0
   \   00004A   F0           MOVX      @DPTR,A
   2844          
   2845              for ( x = 0; x < rtgListCount; x++ )
   \   00004B   7C00         MOV       R4,#0x0
   \   00004D   8034         SJMP      ??ZDO_ParseMgmtRtgRsp_2
   2846              {
   2847                pList->dstAddress = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseMgmtRtgRsp_3:
   \   00004F   12....       LCALL     ?Subroutine88 & 0xFFFF
   \                     ??CrossCallReturnLabel_144:
   \   000052   F0           MOVX      @DPTR,A
   \   000053   A3           INC       DPTR
   \   000054   E5..         MOV       A,?V3
   \   000056   12....       LCALL     ?Subroutine21 & 0xFFFF
   2848                msg += 2;
   2849                pList->status = *msg++;
   \                     ??CrossCallReturnLabel_20:
   \   000059   8882         MOV       DPL,R0
   \   00005B   8983         MOV       DPH,R1
   \   00005D   A3           INC       DPTR
   \   00005E   A3           INC       DPTR
   \   00005F   A3           INC       DPTR
   \   000060   A3           INC       DPTR
   \   000061   A3           INC       DPTR
   \   000062   F0           MOVX      @DPTR,A
   \   000063   EE           MOV       A,R6
   \   000064   2403         ADD       A,#0x3
   \   000066   FE           MOV       R6,A
   \   000067   5001         JNC       ??ZDO_ParseMgmtRtgRsp_4
   \   000069   0F           INC       R7
   2850                pList->nextHopAddress = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseMgmtRtgRsp_4:
   \   00006A   12....       LCALL     ?Subroutine88 & 0xFFFF
   \                     ??CrossCallReturnLabel_145:
   \   00006D   A3           INC       DPTR
   \   00006E   A3           INC       DPTR
   \   00006F   F0           MOVX      @DPTR,A
   \   000070   A3           INC       DPTR
   \   000071   E5..         MOV       A,?V3
   \   000073   F0           MOVX      @DPTR,A
   2851                msg += 2;
   \   000074   EE           MOV       A,R6
   \   000075   2402         ADD       A,#0x2
   \   000077   FE           MOV       R6,A
   \   000078   5001         JNC       ??ZDO_ParseMgmtRtgRsp_5
   \   00007A   0F           INC       R7
   2852                pList++;
   \                     ??ZDO_ParseMgmtRtgRsp_5:
   \   00007B   E8           MOV       A,R0
   \   00007C   2407         ADD       A,#0x7
   \   00007E   F8           MOV       R0,A
   \   00007F   5001         JNC       ??ZDO_ParseMgmtRtgRsp_6
   \   000081   09           INC       R1
   2853              }
   \                     ??ZDO_ParseMgmtRtgRsp_6:
   \   000082   0C           INC       R4
   \                     ??ZDO_ParseMgmtRtgRsp_2:
   \   000083   EC           MOV       A,R4
   \   000084   C3           CLR       C
   \   000085   95..         SUBB      A,?V0
   \   000087   40C6         JC        ??ZDO_ParseMgmtRtgRsp_3
   2854            }
   2855          
   2856            return ( pRsp );
   \                     ??ZDO_ParseMgmtRtgRsp_1:
   \   000089   02....       LJMP      ??Subroutine274_0 & 0xFFFF
   2857          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine88:
   \   000000   8E82         MOV       DPL,R6
   \   000002   8F83         MOV       DPH,R7
   \   000004   E0           MOVX      A,@DPTR
   \   000005   F5..         MOV       ?V4,A
   \   000007   A3           INC       DPTR
   \   000008   E0           MOVX      A,@DPTR
   \   000009   F5..         MOV       ?V3,A
   \   00000B   E5..         MOV       A,?V4
   \   00000D   8882         MOV       DPL,R0
   \   00000F   8983         MOV       DPH,R1
   \   000011   22           RET
   2858          
   2859          /*********************************************************************
   2860           * @fn          ZDO_ParseMgmtBindRsp
   2861           *
   2862           * @brief       This function parses the incoming Management
   2863           *              Binding response.
   2864           *
   2865           * @param       inMsg - pointer to message to parse
   2866           *
   2867           * @return      a pointer to parsed response structure (NULL if not allocated).
   2868           *          This structure was allocated using osal_mem_alloc, so it must be freed
   2869           *          by the calling function [osal_mem_free()].
   2870           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2871          ZDO_MgmtBindRsp_t *ZDO_ParseMgmtBindRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseMgmtBindRsp:
   2872          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   2873            ZDO_MgmtBindRsp_t *pRsp;
   2874            uint8 status;
   2875            uint8 bindingCount = 0;
   \   000005   75..00       MOV       ?V4,#0x0
   2876            uint8 startIndex = 0;
   \   000008   75..00       MOV       ?V5,#0x0
   2877            uint8 bindingListCount = 0;
   \   00000B   75..00       MOV       ?V6,#0x0
   2878            uint8 *msg;
   2879          
   2880            msg = inMsg->asdu;
   \   00000E   12....       LCALL     ?Subroutine69 & 0xFFFF
   2881          
   2882            status = *msg++;
   2883            if ( status == ZSuccess )
   \                     ??CrossCallReturnLabel_113:
   \   000011   7017         JNZ       ??ZDO_ParseMgmtBindRsp_0
   2884            {
   2885              bindingCount = *msg++;
   \   000013   E0           MOVX      A,@DPTR
   \   000014   F5..         MOV       ?V4,A
   2886              startIndex = *msg++;
   \   000016   A3           INC       DPTR
   \   000017   E0           MOVX      A,@DPTR
   \   000018   F5..         MOV       ?V5,A
   2887              bindingListCount = *msg++;
   \   00001A   8E82         MOV       DPL,R6
   \   00001C   8F83         MOV       DPH,R7
   \   00001E   A3           INC       DPTR
   \   00001F   A3           INC       DPTR
   \   000020   E0           MOVX      A,@DPTR
   \   000021   F5..         MOV       ?V6,A
   \   000023   EE           MOV       A,R6
   \   000024   2403         ADD       A,#0x3
   \   000026   FE           MOV       R6,A
   \   000027   5001         JNC       ??ZDO_ParseMgmtBindRsp_0
   \   000029   0F           INC       R7
   2888            }
   2889          
   2890            // Allocate a buffer big enough to handle the list
   2891            pRsp = (ZDO_MgmtBindRsp_t *)osal_mem_alloc(
   2892                    (sizeof ( ZDO_MgmtBindRsp_t ) + (bindingListCount * sizeof( apsBindingItem_t ))) );
   \                     ??ZDO_ParseMgmtBindRsp_0:
   \   00002A                ; Setup parameters for call to function osal_mem_alloc
   \   00002A   E5..         MOV       A,?V6
   \   00002C   75F015       MOV       B,#0x15
   \   00002F   12....       LCALL     ?Subroutine150 & 0xFFFF
   \                     ??CrossCallReturnLabel_255:
   \   000032   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000035   8A..         MOV       ?V2,R2
   \   000037   8B..         MOV       ?V3,R3
   2893            if ( pRsp )
   \   000039   EA           MOV       A,R2
   \   00003A   45..         ORL       A,?V3
   \   00003C   6074         JZ        ??ZDO_ParseMgmtBindRsp_1
   2894            {
   2895              uint8 x;
   2896              apsBindingItem_t *pList = pRsp->list;
   \   00003E   12....       LCALL     ?Subroutine16 & 0xFFFF
   2897              pRsp->status = status;
   2898              pRsp->bindingCount = bindingCount;
   2899              pRsp->startIndex = startIndex;
   \                     ??CrossCallReturnLabel_635:
   \   000041   E5..         MOV       A,?V5
   \   000043   12....       LCALL     ??Subroutine267_0 & 0xFFFF
   2900              pRsp->bindingListCount = bindingListCount;
   \                     ??CrossCallReturnLabel_653:
   \   000046   E5..         MOV       A,?V6
   \   000048   F0           MOVX      @DPTR,A
   2901          
   2902              for ( x = 0; x < bindingListCount; x++ )
   \   000049   75..00       MOV       ?V4,#0x0
   \   00004C   8015         SJMP      ??ZDO_ParseMgmtBindRsp_2
   2903              {
   2904                osal_cpyExtAddr( pList->srcAddr, msg );
   2905                msg += Z_EXTADDR_LEN;
   2906                pList->srcEP = *msg++;
   2907          
   2908                // Get the Cluster ID
   2909          
   2910                pList->clusterID = BUILD_UINT16( msg[0], msg[1] );
   2911                msg += 2;
   2912                pList->dstAddr.addrMode = *msg++;
   2913                if ( pList->dstAddr.addrMode == Addr64Bit )
   2914                {
   2915                  osal_cpyExtAddr( pList->dstAddr.addr.extAddr, msg );
   2916                  msg += Z_EXTADDR_LEN;
   2917                  pList->dstEP = *msg++;
   2918                }
   2919                else
   2920                {
   2921                  pList->dstAddr.addr.shortAddr = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseMgmtBindRsp_3:
   \   00004E   12....       LCALL     ?Subroutine62 & 0xFFFF
   2922                  msg += 2;
   2923                }
   \                     ??CrossCallReturnLabel_99:
   \   000051   12....       LCALL     ??Subroutine256_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_568:
   \   000054   5001         JNC       ??ZDO_ParseMgmtBindRsp_4
   \   000056   0F           INC       R7
   2924          
   2925                pList++;
   \                     ??ZDO_ParseMgmtBindRsp_4:
   \   000057   E5..         MOV       A,?V0
   \   000059   2415         ADD       A,#0x15
   \   00005B   F5..         MOV       ?V0,A
   \   00005D   5002         JNC       ??ZDO_ParseMgmtBindRsp_5
   \   00005F   05..         INC       ?V1
   \                     ??ZDO_ParseMgmtBindRsp_5:
   \   000061   05..         INC       ?V4
   \                     ??ZDO_ParseMgmtBindRsp_2:
   \   000063   E5..         MOV       A,?V4
   \   000065   C3           CLR       C
   \   000066   95..         SUBB      A,?V6
   \   000068   5048         JNC       ??ZDO_ParseMgmtBindRsp_1
   \   00006A                ; Setup parameters for call to function sAddrExtCpy
   \   00006A   EE           MOV       A,R6
   \   00006B   FC           MOV       R4,A
   \   00006C   EF           MOV       A,R7
   \   00006D   FD           MOV       R5,A
   \   00006E   AA..         MOV       R2,?V0
   \   000070   AB..         MOV       R3,?V1
   \   000072   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   000075   12....       LCALL     ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_648:
   \   000078   5001         JNC       ??ZDO_ParseMgmtBindRsp_6
   \   00007A   0F           INC       R7
   \                     ??ZDO_ParseMgmtBindRsp_6:
   \   00007B   12....       LCALL     ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   00007E   5001         JNC       ??ZDO_ParseMgmtBindRsp_7
   \   000080   0F           INC       R7
   \                     ??ZDO_ParseMgmtBindRsp_7:
   \   000081   7403         MOV       A,#0x3
   \   000083   68           XRL       A,R0
   \   000084   70C8         JNZ       ??ZDO_ParseMgmtBindRsp_3
   \   000086                ; Setup parameters for call to function sAddrExtCpy
   \   000086   EE           MOV       A,R6
   \   000087   FC           MOV       R4,A
   \   000088   EF           MOV       A,R7
   \   000089   FD           MOV       R5,A
   \   00008A   E5..         MOV       A,?V0
   \   00008C   240B         ADD       A,#0xb
   \   00008E   FA           MOV       R2,A
   \   00008F   E4           CLR       A
   \   000090   35..         ADDC      A,?V1
   \   000092   FB           MOV       R3,A
   \   000093   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   000096   8E82         MOV       DPL,R6
   \   000098   8F83         MOV       DPH,R7
   \   00009A   A3           INC       DPTR
   \   00009B   A3           INC       DPTR
   \   00009C   A3           INC       DPTR
   \   00009D   A3           INC       DPTR
   \   00009E   A3           INC       DPTR
   \   00009F   A3           INC       DPTR
   \   0000A0   A3           INC       DPTR
   \   0000A1   A3           INC       DPTR
   \   0000A2   E0           MOVX      A,@DPTR
   \   0000A3   C0E0         PUSH      A
   \   0000A5   12....       LCALL     ?Subroutine136 & 0xFFFF
   2926              }
   2927            }
   \                     ??CrossCallReturnLabel_224:
   \   0000A8   D0E0         POP       A
   \   0000AA   12....       LCALL     ??Subroutine266_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_646:
   \   0000AD   50A8         JNC       ??ZDO_ParseMgmtBindRsp_4
   \   0000AF   0F           INC       R7
   \                     ??ZDO_ParseMgmtBindRsp_8:
   \   0000B0   80A5         SJMP      ??ZDO_ParseMgmtBindRsp_4
   2928          
   2929            return ( pRsp );
   \                     ??ZDO_ParseMgmtBindRsp_1:
   \   0000B2   02....       LJMP      ?Subroutine3 & 0xFFFF
   2930          }
   2931          
   2932          /*********************************************************************
   2933           * @fn          ZDO_ParseUserDescRsp
   2934           *
   2935           * @brief       This function parses the incoming User
   2936           *              Descriptor Response.
   2937           *
   2938           * @param       inMsg - incoming response message
   2939           *
   2940           * @return      a pointer to parsed response structure (NULL if not allocated).
   2941           *          This structure was allocated using osal_mem_alloc, so it must be freed
   2942           *          by the calling function [osal_mem_free()].
   2943           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2944          ZDO_UserDescRsp_t *ZDO_ParseUserDescRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseUserDescRsp:
   2945          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   2946            ZDO_UserDescRsp_t *pRsp;
   2947            uint8 *msg;
   2948            uint8 descLen = 0;
   \   000005   12....       LCALL     ?Subroutine70 & 0xFFFF
   2949          
   2950            msg = inMsg->asdu;
   2951          
   2952            if ( msg[0] == ZSuccess )
   \                     ??CrossCallReturnLabel_638:
   \   000008   7006         JNZ       ??ZDO_ParseUserDescRsp_0
   2953              descLen = msg[3];
   \   00000A   A3           INC       DPTR
   \   00000B   A3           INC       DPTR
   \   00000C   A3           INC       DPTR
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   F5..         MOV       ?V0,A
   2954          
   2955            pRsp = (ZDO_UserDescRsp_t *)osal_mem_alloc( sizeof ( ZDO_UserDescRsp_t ) + descLen );
   \                     ??ZDO_ParseUserDescRsp_0:
   \   000010                ; Setup parameters for call to function osal_mem_alloc
   \   000010   12....       LCALL     ?Subroutine151 & 0xFFFF
   \                     ??CrossCallReturnLabel_668:
   \   000013   3400         ADDC      A,#0x0
   \   000015   FB           MOV       R3,A
   \   000016   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000019   8A..         MOV       ?V2,R2
   \   00001B   8B..         MOV       ?V3,R3
   2956            if ( pRsp )
   \   00001D   EA           MOV       A,R2
   \   00001E   45..         ORL       A,?V3
   \   000020   6047         JZ        ??ZDO_ParseUserDescRsp_1
   2957            {
   2958              pRsp->status = msg[0];
   \   000022   12....       LCALL     ?Subroutine97 & 0xFFFF
   2959              pRsp->nwkAddr = BUILD_UINT16( msg[1], msg[2] );
   \                     ??CrossCallReturnLabel_161:
   \   000025   E0           MOVX      A,@DPTR
   \   000026   FA           MOV       R2,A
   \   000027   8E82         MOV       DPL,R6
   \   000029   8F83         MOV       DPH,R7
   \   00002B   A3           INC       DPTR
   \   00002C   12....       LCALL     ??Subroutine215_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_343:
   \   00002F   85..82       MOV       DPL,?V2
   \   000032   8B83         MOV       DPH,R3
   \   000034   A3           INC       DPTR
   \   000035   12....       LCALL     ??Subroutine223_0 & 0xFFFF
   2960              pRsp->length = descLen;
   \                     ??CrossCallReturnLabel_372:
   \   000038   85..82       MOV       DPL,?V2
   \   00003B   8B83         MOV       DPH,R3
   \   00003D   A3           INC       DPTR
   \   00003E   A3           INC       DPTR
   \   00003F   A3           INC       DPTR
   \   000040   E5..         MOV       A,?V0
   \   000042   F0           MOVX      @DPTR,A
   2961              if ( descLen )
   \   000043   6024         JZ        ??ZDO_ParseUserDescRsp_1
   2962                osal_memcpy( pRsp->desc, &msg[4], descLen );
   \   000045                ; Setup parameters for call to function osal_memcpy
   \   000045   EE           MOV       A,R6
   \   000046   2404         ADD       A,#0x4
   \   000048   F5..         MOV       ?V4,A
   \   00004A   E4           CLR       A
   \   00004B   3F           ADDC      A,R7
   \   00004C   F5..         MOV       ?V5,A
   \   00004E   88..         MOV       ?V6,R0
   \   000050   78..         MOV       R0,#?V4
   \   000052   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000055   AC..         MOV       R4,?V0
   \   000057   7D00         MOV       R5,#0x0
   \   000059   E5..         MOV       A,?V2
   \   00005B   12....       LCALL     ??Subroutine269_0 & 0xFFFF
   2963            }
   \                     ??CrossCallReturnLabel_665:
   \   00005E   35..         ADDC      A,?V3
   \   000060   FB           MOV       R3,A
   \   000061   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000064   7403         MOV       A,#0x3
   \   000066   12....       LCALL     ?DEALLOC_XSTACK8
   2964          
   2965            return ( pRsp );
   \                     ??ZDO_ParseUserDescRsp_1:
   \   000069   AA..         MOV       R2,?V2
   \   00006B   AB..         MOV       R3,?V3
   \   00006D   02....       LJMP      ?Subroutine6 & 0xFFFF
   2966          }
   2967          
   2968          /*********************************************************************
   2969           * @fn          ZDO_ParseSimpleDescBuf
   2970           *
   2971           * @brief       Parse a byte sequence representation of a Simple Descriptor.
   2972           *
   2973           * @param       buf  - pointer to a byte array representing a Simple Desc.
   2974           * @param       desc - SimpleDescriptionFormat_t *
   2975           *
   2976           *              This routine allocates storage for the cluster IDs because
   2977           *              they are 16-bit and need to be aligned to be properly processed.
   2978           *              This routine returns non-zero if an allocation fails.
   2979           *
   2980           *              NOTE: This means that the caller or user of the input structure
   2981           *                    is responsible for freeing the memory
   2982           *
   2983           * @return      0: success
   2984           *              1: failure due to malloc failure.
   2985           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2986          uint8 ZDO_ParseSimpleDescBuf( uint8 *buf, SimpleDescriptionFormat_t *desc )
   \                     ZDO_ParseSimpleDescBuf:
   2987          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   8C..         MOV       ?V0,R4
   \   00000B   8D..         MOV       ?V1,R5
   2988            uint8 num, i;
   2989          
   2990            desc->EndPoint = *buf++;
   \   00000D   8E82         MOV       DPL,R6
   \   00000F   8F83         MOV       DPH,R7
   \   000011   12....       LCALL     ??Subroutine271_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_678:
   \   000014   12....       LCALL     ?Subroutine22 & 0xFFFF
   2991            desc->AppProfId = BUILD_UINT16( buf[0], buf[1] );
   \                     ??CrossCallReturnLabel_24:
   \   000017   12....       LCALL     ?Subroutine99 & 0xFFFF
   \                     ??CrossCallReturnLabel_164:
   \   00001A   12....       LCALL     ?Subroutine20 & 0xFFFF
   2992            buf += 2;
   \                     ??CrossCallReturnLabel_567:
   \   00001D   5001         JNC       ??ZDO_ParseSimpleDescBuf_0
   \   00001F   0F           INC       R7
   2993            desc->AppDeviceId = BUILD_UINT16( buf[0], buf[1] );
   \                     ??ZDO_ParseSimpleDescBuf_0:
   \   000020   8E82         MOV       DPL,R6
   \   000022   8F83         MOV       DPH,R7
   \   000024   12....       LCALL     ?Subroutine99 & 0xFFFF
   \                     ??CrossCallReturnLabel_165:
   \   000027   A3           INC       DPTR
   \   000028   A3           INC       DPTR
   \   000029   A3           INC       DPTR
   \   00002A   F0           MOVX      @DPTR,A
   \   00002B   A3           INC       DPTR
   \   00002C   E9           MOV       A,R1
   \   00002D   12....       LCALL     ?Subroutine21 & 0xFFFF
   2994            buf += 2;
   2995            desc->AppDevVer = *buf >> 4;
   \                     ??CrossCallReturnLabel_21:
   \   000030   C4           SWAP      A
   \   000031   540F         ANL       A,#0xf
   2996          
   2997            desc->Reserved = 0;
   \   000033   8C82         MOV       DPL,R4
   \   000035   8D83         MOV       DPH,R5
   \   000037   A3           INC       DPTR
   \   000038   A3           INC       DPTR
   \   000039   A3           INC       DPTR
   \   00003A   A3           INC       DPTR
   \   00003B   A3           INC       DPTR
   \   00003C   12....       LCALL     ?Subroutine41 & 0xFFFF
   2998            buf++;
   2999          
   3000            // move in input cluster list (if any). allocate aligned memory.
   3001            num = desc->AppNumInClusters = *buf++;
   \                     ??CrossCallReturnLabel_56:
   \   00003F   F5..         MOV       ?V4,A
   \   000041   EE           MOV       A,R6
   \   000042   2404         ADD       A,#0x4
   \   000044   FE           MOV       R6,A
   \   000045   5001         JNC       ??ZDO_ParseSimpleDescBuf_1
   \   000047   0F           INC       R7
   \                     ??ZDO_ParseSimpleDescBuf_1:
   \   000048   8C82         MOV       DPL,R4
   \   00004A   8D83         MOV       DPH,R5
   \   00004C   A3           INC       DPTR
   \   00004D   A3           INC       DPTR
   \   00004E   A3           INC       DPTR
   \   00004F   A3           INC       DPTR
   \   000050   A3           INC       DPTR
   \   000051   A3           INC       DPTR
   \   000052   E5..         MOV       A,?V4
   \   000054   F0           MOVX      @DPTR,A
   3002            if ( num )
   \   000055   6036         JZ        ??ZDO_ParseSimpleDescBuf_2
   3003            {
   3004              if (!(desc->pAppInClusterList = (uint16 *)osal_mem_alloc(num*sizeof(uint16))))
   \   000057                ; Setup parameters for call to function osal_mem_alloc
   \   000057   12....       LCALL     ??Subroutine270_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_673:
   \   00005A   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00005D   8A..         MOV       ?V2,R2
   \   00005F   8B..         MOV       ?V3,R3
   \   000061   A8..         MOV       R0,?V2
   \   000063   A9..         MOV       R1,?V3
   \   000065   E5..         MOV       A,?V0
   \   000067   2407         ADD       A,#0x7
   \   000069   F5..         MOV       ?V2,A
   \   00006B   E4           CLR       A
   \   00006C   35..         ADDC      A,?V1
   \   00006E   85..82       MOV       DPL,?V2
   \   000071   12....       LCALL     ??Subroutine246_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_534:
   \   000074   7003         JNZ       $+5
   \   000076   02....       LJMP      ??ZDO_ParseSimpleDescBuf_3 & 0xFFFF
   3005              {
   3006                // malloc failed. we're done.
   3007                return 1;
   3008              }
   3009              for (i=0; i<num; ++i)
   \   000079   7800         MOV       R0,#0x0
   \   00007B   800A         SJMP      ??ZDO_ParseSimpleDescBuf_4
   3010              {
   3011                desc->pAppInClusterList[i] = BUILD_UINT16( buf[0], buf[1] );
   \                     ??ZDO_ParseSimpleDescBuf_5:
   \   00007D   12....       LCALL     ?Subroutine52 & 0xFFFF
   3012                buf += 2;
   3013              }
   \                     ??CrossCallReturnLabel_76:
   \   000080   12....       LCALL     ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_62:
   \   000083   5001         JNC       ??ZDO_ParseSimpleDescBuf_6
   \   000085   0F           INC       R7
   \                     ??ZDO_ParseSimpleDescBuf_6:
   \   000086   08           INC       R0
   \                     ??ZDO_ParseSimpleDescBuf_4:
   \   000087   E8           MOV       A,R0
   \   000088   C3           CLR       C
   \   000089   95..         SUBB      A,?V4
   \   00008B   40F0         JC        ??ZDO_ParseSimpleDescBuf_5
   3014            }
   3015          
   3016            // move in output cluster list (if any). allocate aligned memory.
   3017            num = desc->AppNumOutClusters = *buf++;
   \                     ??ZDO_ParseSimpleDescBuf_2:
   \   00008D   8E82         MOV       DPL,R6
   \   00008F   8F83         MOV       DPH,R7
   \   000091   E0           MOVX      A,@DPTR
   \   000092   F5..         MOV       ?V2,A
   \   000094   A3           INC       DPTR
   \   000095   AE82         MOV       R6,DPL
   \   000097   AF83         MOV       R7,DPH
   \   000099   85..82       MOV       DPL,?V0
   \   00009C   85..83       MOV       DPH,?V1
   \   00009F   A3           INC       DPTR
   \   0000A0   A3           INC       DPTR
   \   0000A1   A3           INC       DPTR
   \   0000A2   A3           INC       DPTR
   \   0000A3   A3           INC       DPTR
   \   0000A4   A3           INC       DPTR
   \   0000A5   A3           INC       DPTR
   \   0000A6   A3           INC       DPTR
   \   0000A7   A3           INC       DPTR
   \   0000A8   F0           MOVX      @DPTR,A
   3018            if (num)
   \   0000A9   606E         JZ        ??ZDO_ParseSimpleDescBuf_7
   3019            {
   3020              if (!(desc->pAppOutClusterList = (uint16 *)osal_mem_alloc(num*sizeof(uint16))))
   \   0000AB                ; Setup parameters for call to function osal_mem_alloc
   \   0000AB   12....       LCALL     ??Subroutine270_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_674:
   \   0000AE   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   0000B1   8A..         MOV       ?V4,R2
   \   0000B3   8B..         MOV       ?V5,R3
   \   0000B5   A8..         MOV       R0,?V4
   \   0000B7   A9..         MOV       R1,?V5
   \   0000B9   85..82       MOV       DPL,?V0
   \   0000BC   85..83       MOV       DPH,?V1
   \   0000BF   A3           INC       DPTR
   \   0000C0   A3           INC       DPTR
   \   0000C1   A3           INC       DPTR
   \   0000C2   A3           INC       DPTR
   \   0000C3   A3           INC       DPTR
   \   0000C4   A3           INC       DPTR
   \   0000C5   A3           INC       DPTR
   \   0000C6   A3           INC       DPTR
   \   0000C7   A3           INC       DPTR
   \   0000C8   A3           INC       DPTR
   \   0000C9   12....       LCALL     ??Subroutine247_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_533:
   \   0000CC   7034         JNZ       ??ZDO_ParseSimpleDescBuf_8
   3021              {
   3022                // malloc failed. free input cluster list memory if there is any
   3023                if ( desc->pAppInClusterList != NULL )
   \   0000CE   85..82       MOV       DPL,?V0
   \   0000D1   85..83       MOV       DPH,?V1
   \   0000D4   A3           INC       DPTR
   \   0000D5   A3           INC       DPTR
   \   0000D6   A3           INC       DPTR
   \   0000D7   A3           INC       DPTR
   \   0000D8   A3           INC       DPTR
   \   0000D9   A3           INC       DPTR
   \   0000DA   A3           INC       DPTR
   \   0000DB   12....       LCALL     ??Subroutine239_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_497:
   \   0000DE   601E         JZ        ??ZDO_ParseSimpleDescBuf_3
   3024                {
   3025                  osal_mem_free(desc->pAppInClusterList);
   \   0000E0   E5..         MOV       A,?V0
   \   0000E2   2407         ADD       A,#0x7
   \   0000E4   F5..         MOV       ?V2,A
   \   0000E6   E4           CLR       A
   \   0000E7   35..         ADDC      A,?V1
   \   0000E9   F5..         MOV       ?V3,A
   \   0000EB                ; Setup parameters for call to function osal_mem_free
   \   0000EB   85..82       MOV       DPL,?V2
   \   0000EE   12....       LCALL     ??Subroutine235_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_473:
   \   0000F1   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   3026                  
   3027                  desc->pAppInClusterList = NULL;
   \   0000F4   85..82       MOV       DPL,?V2
   \   0000F7   85..83       MOV       DPH,?V3
   \   0000FA   E4           CLR       A
   \   0000FB   F0           MOVX      @DPTR,A
   \   0000FC   A3           INC       DPTR
   \   0000FD   F0           MOVX      @DPTR,A
   3028                }
   3029                return 1;
   \                     ??ZDO_ParseSimpleDescBuf_3:
   \   0000FE   7901         MOV       R1,#0x1
   \   000100   8019         SJMP      ??ZDO_ParseSimpleDescBuf_9
   3030              }
   3031              for (i=0; i<num; ++i)
   \                     ??ZDO_ParseSimpleDescBuf_8:
   \   000102   7800         MOV       R0,#0x0
   \   000104   800D         SJMP      ??ZDO_ParseSimpleDescBuf_10
   3032              {
   3033                desc->pAppOutClusterList[i] = BUILD_UINT16( buf[0], buf[1] );
   \                     ??ZDO_ParseSimpleDescBuf_11:
   \   000106   12....       LCALL     ?Subroutine52 & 0xFFFF
   3034                buf += 2;
   3035              }
   \                     ??CrossCallReturnLabel_77:
   \   000109   A3           INC       DPTR
   \   00010A   A3           INC       DPTR
   \   00010B   A3           INC       DPTR
   \   00010C   12....       LCALL     ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_63:
   \   00010F   5001         JNC       ??ZDO_ParseSimpleDescBuf_12
   \   000111   0F           INC       R7
   \                     ??ZDO_ParseSimpleDescBuf_12:
   \   000112   08           INC       R0
   \                     ??ZDO_ParseSimpleDescBuf_10:
   \   000113   E8           MOV       A,R0
   \   000114   C3           CLR       C
   \   000115   95..         SUBB      A,?V2
   \   000117   40ED         JC        ??ZDO_ParseSimpleDescBuf_11
   3036            }
   3037            return 0;
   \                     ??ZDO_ParseSimpleDescBuf_7:
   \   000119   7900         MOV       R1,#0x0
   \                     ??ZDO_ParseSimpleDescBuf_9:
   \   00011B   02....       LJMP      ??Subroutine274_0 & 0xFFFF
   3038          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine99:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   12....       LCALL     ?Subroutine176 & 0xFFFF
   \                     ??CrossCallReturnLabel_696:
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine52:
   \   000000   8E82         MOV       DPL,R6
   \   000002   8F83         MOV       DPH,R7
   \   000004   E0           MOVX      A,@DPTR
   \   000005   FC           MOV       R4,A
   \   000006   A3           INC       DPTR
   \   000007   E0           MOVX      A,@DPTR
   \   000008   FA           MOV       R2,A
   \   000009   E4           CLR       A
   \   00000A   CA           XCH       A,R2
   \   00000B   FB           MOV       R3,A
   \   00000C   EC           MOV       A,R4
   \   00000D   2A           ADD       A,R2
   \   00000E   E4           CLR       A
   \   00000F   3B           ADDC      A,R3
   \   000010   FD           MOV       R5,A
   \   000011   E8           MOV       A,R0
   \   000012   25E0         ADD       A,0xE0 /* A   */
   \   000014   FA           MOV       R2,A
   \   000015   E4           CLR       A
   \   000016   33           RLC       A
   \   000017   FB           MOV       R3,A
   \   000018   85..82       MOV       DPL,?V0
   \   00001B   85..83       MOV       DPH,?V1
   \   00001E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine45:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   E0           MOVX      A,@DPTR
   \   000008   2A           ADD       A,R2
   \   000009   F9           MOV       R1,A
   \   00000A   A3           INC       DPTR
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   3B           ADDC      A,R3
   \   00000D   8982         MOV       DPL,R1
   \   00000F   F583         MOV       DPH,A
   \   000011   EC           MOV       A,R4
   \   000012   F0           MOVX      @DPTR,A
   \   000013   A3           INC       DPTR
   \   000014   ED           MOV       A,R5
   \   000015   F0           MOVX      @DPTR,A
   \   000016   EE           MOV       A,R6
   \   000017   2402         ADD       A,#0x2
   \   000019   FE           MOV       R6,A
   \   00001A   22           RET
   3039          
   3040          /*********************************************************************
   3041           * @fn          ZDO_ParseDeviceAnnce
   3042           *
   3043           * @brief       Parse a Device Announce message.
   3044           *
   3045           * @param       inMsg - Incoming message
   3046           * @param       pAnnce - place to put the parsed information
   3047           *
   3048           * @return      none
   3049           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3050          void ZDO_ParseDeviceAnnce( zdoIncomingMsg_t *inMsg, ZDO_DeviceAnnce_t *pAnnce )
   \                     ZDO_ParseDeviceAnnce:
   3051          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL     ?Subroutine119 & 0xFFFF
   3052            uint8 *msg;
   3053          
   3054            // Parse incoming message
   3055            msg = inMsg->asdu;
   \                     ??CrossCallReturnLabel_682:
   \   000008   F583         MOV       DPH,A
   \   00000A   12....       LCALL     ?Subroutine58 & 0xFFFF
   3056            pAnnce->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   \                     ??CrossCallReturnLabel_91:
   \   00000D   12....       LCALL     ??Subroutine256_0 & 0xFFFF
   3057            msg += 2;
   \                     ??CrossCallReturnLabel_569:
   \   000010   5001         JNC       ??ZDO_ParseDeviceAnnce_0
   \   000012   0F           INC       R7
   3058            osal_cpyExtAddr( pAnnce->extAddr, msg );
   \                     ??ZDO_ParseDeviceAnnce_0:
   \   000013                ; Setup parameters for call to function sAddrExtCpy
   \   000013   FC           MOV       R4,A
   \   000014   EF           MOV       A,R7
   \   000015   FD           MOV       R5,A
   \   000016   E5..         MOV       A,?V0
   \   000018   2402         ADD       A,#0x2
   \   00001A   FA           MOV       R2,A
   \   00001B   E4           CLR       A
   \   00001C   35..         ADDC      A,?V1
   \   00001E   FB           MOV       R3,A
   \   00001F   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   3059            msg += Z_EXTADDR_LEN;
   3060            pAnnce->capabilities = *msg;
   \   000022   8E82         MOV       DPL,R6
   \   000024   8F83         MOV       DPH,R7
   \   000026   A3           INC       DPTR
   \   000027   A3           INC       DPTR
   \   000028   A3           INC       DPTR
   \   000029   12....       LCALL     ?Subroutine89 & 0xFFFF
   \                     ??CrossCallReturnLabel_146:
   \   00002C   A3           INC       DPTR
   \   00002D   A3           INC       DPTR
   \   00002E   A3           INC       DPTR
   \   00002F   A3           INC       DPTR
   \   000030   F0           MOVX      @DPTR,A
   3061          }
   \   000031   02....       LJMP      ??Subroutine214_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine89:
   \   000000   12....       LCALL     ?Subroutine175 & 0xFFFF
   \                     ??CrossCallReturnLabel_292:
   \   000003   22           RET
   3062          
   3063          /*********************************************************************
   3064           * @fn          ZDO_ParseMgmtNwkUpdateNotify
   3065           *
   3066           * @brief       This function handles parsing of the incoming Management
   3067           *              Network Update notify.
   3068           *
   3069           * @param       inMsg - incoming message (request)
   3070           *
   3071           * @return      a pointer to parsed response structure (NULL if not allocated).
   3072           *          This structure was allocated using osal_mem_alloc, so it must be freed
   3073           *          by the calling function [osal_mem_free()].
   3074           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   F8           MOV       R0,A
   \   000001   A3           INC       DPTR
   \   000002   E0           MOVX      A,@DPTR
   \   000003   3400         ADDC      A,#0x0
   \   000005   F9           MOV       R1,A
   \   000006   85..82       MOV       DPL,?XSP + 0
   \   000009   85..83       MOV       DPH,?XSP + 1
   \   00000C                REQUIRE ??Subroutine222_0
   \   00000C                ; // Fall through to label ??Subroutine222_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3075          ZDO_MgmtNwkUpdateNotify_t *ZDO_ParseMgmtNwkUpdateNotify( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseMgmtNwkUpdateNotify:
   3076          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 6
   \   000005   74FA         MOV       A,#-0x6
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   3077            uint8 status;
   3078            uint32 scannedChannels = 0;
   \   00000A   75..00       MOV       ?V0,#0x0
   \   00000D   75..00       MOV       ?V1,#0x0
   \   000010   75..00       MOV       ?V2,#0x0
   \   000013   75..00       MOV       ?V3,#0x0
   3079            uint16 totalTransmissions = 0;
   \   000016   75..00       MOV       ?V4,#0x0
   \   000019   75..00       MOV       ?V5,#0x0
   3080            uint16 transmissionFailures = 0;
   \   00001C   7E00         MOV       R6,#0x0
   \   00001E   7F00         MOV       R7,#0x0
   3081            uint8 listCount = 0;
   \   000020   7402         MOV       A,#0x2
   \   000022   12....       LCALL     ?XSTACK_DISP0_8
   \   000025   E4           CLR       A
   \   000026   12....       LCALL     ?Subroutine32 & 0xFFFF
   3082            uint8 *msg = inMsg->asdu;
   \                     ??CrossCallReturnLabel_45:
   \   000029   12....       LCALL     ?Subroutine26 & 0xFFFF
   3083            ZDO_MgmtNwkUpdateNotify_t *pRsp;
   3084          
   3085            status = *msg++;
   \                     ??CrossCallReturnLabel_30:
   \   00002C   F583         MOV       DPH,A
   \   00002E   8882         MOV       DPL,R0
   \   000030   E0           MOVX      A,@DPTR
   \   000031   C0E0         PUSH      A
   \   000033   7405         MOV       A,#0x5
   \   000035   12....       LCALL     ?XSTACK_DISP0_8
   \   000038   D0E0         POP       A
   \   00003A   12....       LCALL     ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   00003D   2401         ADD       A,#0x1
   \   00003F   12....       LCALL     ?Subroutine37 & 0xFFFF
   3086            if ( status == ZSuccess )
   \                     ??CrossCallReturnLabel_381:
   \   000042   7405         MOV       A,#0x5
   \   000044   12....       LCALL     ?XSTACK_DISP0_8
   \   000047   E0           MOVX      A,@DPTR
   \   000048   704E         JNZ       ??CrossCallReturnLabel_382
   3087            {
   3088              scannedChannels = osal_build_uint32( msg, 4 );
   \   00004A                ; Setup parameters for call to function osal_build_uint32
   \   00004A   7904         MOV       R1,#0x4
   \   00004C   85..82       MOV       DPL,?XSP + 0
   \   00004F   85..83       MOV       DPH,?XSP + 1
   \   000052   12....       LCALL     ??Subroutine236_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_470:
   \   000055   12....       LCALL     `??osal_build_uint32::?relay`; Banked call to: osal_build_uint32
   \   000058   8A..         MOV       ?V0,R2
   \   00005A   8B..         MOV       ?V1,R3
   \   00005C   8C..         MOV       ?V2,R4
   \   00005E   8D..         MOV       ?V3,R5
   3089              msg += 4;
   \   000060   85..82       MOV       DPL,?XSP + 0
   \   000063   85..83       MOV       DPH,?XSP + 1
   \   000066   E0           MOVX      A,@DPTR
   \   000067   2404         ADD       A,#0x4
   \   000069   12....       LCALL     ?Subroutine9 & 0xFFFF
   3090              totalTransmissions = BUILD_UINT16( msg[0], msg[1] );
   \                     ??CrossCallReturnLabel_0:
   \   00006C   F5..         MOV       ?V4,A
   \   00006E   E4           CLR       A
   \   00006F   39           ADDC      A,R1
   \   000070   F5..         MOV       ?V5,A
   3091              msg += 2;
   \   000072   85..82       MOV       DPL,?XSP + 0
   \   000075   85..83       MOV       DPH,?XSP + 1
   \   000078   E0           MOVX      A,@DPTR
   \   000079   2402         ADD       A,#0x2
   \   00007B   12....       LCALL     ?Subroutine9 & 0xFFFF
   3092              transmissionFailures = BUILD_UINT16( msg[0], msg[1] );
   \                     ??CrossCallReturnLabel_1:
   \   00007E   FE           MOV       R6,A
   \   00007F   E4           CLR       A
   \   000080   39           ADDC      A,R1
   \   000081   FF           MOV       R7,A
   3093              msg += 2;
   3094              listCount = *msg++;
   \   000082   12....       LCALL     ?Subroutine101 & 0xFFFF
   3095            }
   \                     ??CrossCallReturnLabel_350:
   \   000085   A3           INC       DPTR
   \   000086   E0           MOVX      A,@DPTR
   \   000087   C0E0         PUSH      A
   \   000089   7402         MOV       A,#0x2
   \   00008B   12....       LCALL     ?XSTACK_DISP0_8
   \   00008E   D0E0         POP       A
   \   000090   12....       LCALL     ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   000093   2403         ADD       A,#0x3
   \   000095   12....       LCALL     ?Subroutine37 & 0xFFFF
   3096          
   3097            pRsp = (ZDO_MgmtNwkUpdateNotify_t *)osal_mem_alloc( sizeof ( ZDO_MgmtNwkUpdateNotify_t ) + listCount );
   \                     ??CrossCallReturnLabel_382:
   \   000098                ; Setup parameters for call to function osal_mem_alloc
   \   000098   7402         MOV       A,#0x2
   \   00009A   12....       LCALL     ?XSTACK_DISP0_8
   \   00009D   E0           MOVX      A,@DPTR
   \   00009E   240A         ADD       A,#0xa
   \   0000A0   FA           MOV       R2,A
   \   0000A1   E4           CLR       A
   \   0000A2   3400         ADDC      A,#0x0
   \   0000A4   FB           MOV       R3,A
   \   0000A5   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   0000A8   7403         MOV       A,#0x3
   \   0000AA   12....       LCALL     ?XSTACK_DISP0_8
   \   0000AD   12....       LCALL     ??Subroutine224_0 & 0xFFFF
   3098          
   3099            if ( pRsp )
   \                     ??CrossCallReturnLabel_396:
   \   0000B0   7403         MOV       A,#0x3
   \   0000B2   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B5   12....       LCALL     ??Subroutine239_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_498:
   \   0000B8   7003         JNZ       $+5
   \   0000BA   02....       LJMP      ??ZDO_ParseMgmtNwkUpdateNotify_0 & 0xFFFF
   3100            {
   3101              pRsp->status = status;
   \   0000BD   7405         MOV       A,#0x5
   \   0000BF   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C2   E0           MOVX      A,@DPTR
   \   0000C3   C0E0         PUSH      A
   \   0000C5   7403         MOV       A,#0x3
   \   0000C7   12....       LCALL     ?XSTACK_DISP0_8
   \   0000CA   12....       LCALL     ?Subroutine208 & 0xFFFF
   \                     ??CrossCallReturnLabel_412:
   \   0000CD   D0E0         POP       A
   \   0000CF   F0           MOVX      @DPTR,A
   3102              pRsp->scannedChannels = scannedChannels;
   \   0000D0   7403         MOV       A,#0x3
   \   0000D2   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D5   E0           MOVX      A,@DPTR
   \   0000D6   F8           MOV       R0,A
   \   0000D7   12....       LCALL     ??Subroutine216_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_348:
   \   0000DA   78..         MOV       R0,#?V0
   \   0000DC   12....       LCALL     ?L_MOV_TO_X
   3103              pRsp->totalTransmissions = totalTransmissions;
   \   0000DF   7403         MOV       A,#0x3
   \   0000E1   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E4   12....       LCALL     ?Subroutine83 & 0xFFFF
   \                     ??CrossCallReturnLabel_135:
   \   0000E7   E5..         MOV       A,?V4
   \   0000E9   F0           MOVX      @DPTR,A
   \   0000EA   A3           INC       DPTR
   \   0000EB   E5..         MOV       A,?V5
   \   0000ED   F0           MOVX      @DPTR,A
   3104              pRsp->transmissionFailures = transmissionFailures;
   \   0000EE   7403         MOV       A,#0x3
   \   0000F0   12....       LCALL     ?XSTACK_DISP0_8
   \   0000F3   12....       LCALL     ??Subroutine257_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_576:
   \   0000F6   12....       LCALL     ?Subroutine140 & 0xFFFF
   \                     ??CrossCallReturnLabel_231:
   \   0000F9   EE           MOV       A,R6
   \   0000FA   F0           MOVX      @DPTR,A
   \   0000FB   A3           INC       DPTR
   \   0000FC   EF           MOV       A,R7
   \   0000FD   F0           MOVX      @DPTR,A
   3105              pRsp->listCount = listCount;
   \   0000FE   7402         MOV       A,#0x2
   \   000100   12....       LCALL     ?XSTACK_DISP0_8
   \   000103   E0           MOVX      A,@DPTR
   \   000104   C0E0         PUSH      A
   \   000106   7403         MOV       A,#0x3
   \   000108   12....       LCALL     ?XSTACK_DISP0_8
   \   00010B   12....       LCALL     ?Subroutine84 & 0xFFFF
   \                     ??CrossCallReturnLabel_137:
   \   00010E   D0E0         POP       A
   \   000110   F0           MOVX      @DPTR,A
   3106          
   3107              // Allocate a buffer big enough to handle the list.
   3108              if ( listCount > 0 )
   \   000111   7402         MOV       A,#0x2
   \   000113   12....       LCALL     ?XSTACK_DISP0_8
   \   000116   E0           MOVX      A,@DPTR
   \   000117   602B         JZ        ??ZDO_ParseMgmtNwkUpdateNotify_0
   3109                osal_memcpy( pRsp->energyValues, msg, listCount );
   \   000119                ; Setup parameters for call to function osal_memcpy
   \   000119   85..82       MOV       DPL,?XSP + 0
   \   00011C   85..83       MOV       DPH,?XSP + 1
   \   00011F   12....       LCALL     ?Subroutine57 & 0xFFFF
   3110            }
   \                     ??CrossCallReturnLabel_89:
   \   000122   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000125   7405         MOV       A,#0x5
   \   000127   12....       LCALL     ?XSTACK_DISP0_8
   \   00012A   E0           MOVX      A,@DPTR
   \   00012B   FC           MOV       R4,A
   \   00012C   7D00         MOV       R5,#0x0
   \   00012E   7406         MOV       A,#0x6
   \   000130   12....       LCALL     ?XSTACK_DISP0_8
   \   000133   E0           MOVX      A,@DPTR
   \   000134   240A         ADD       A,#0xa
   \   000136   FA           MOV       R2,A
   \   000137   A3           INC       DPTR
   \   000138   E0           MOVX      A,@DPTR
   \   000139   3400         ADDC      A,#0x0
   \   00013B   FB           MOV       R3,A
   \   00013C   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00013F   7403         MOV       A,#0x3
   \   000141   12....       LCALL     ?DEALLOC_XSTACK8
   3111          
   3112            return ( pRsp );
   \                     ??ZDO_ParseMgmtNwkUpdateNotify_0:
   \   000144   7403         MOV       A,#0x3
   \   000146   12....       LCALL     ?XSTACK_DISP0_8
   \   000149   12....       LCALL     ??Subroutine236_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_471:
   \   00014C   7406         MOV       A,#0x6
   \   00014E                REQUIRE ?Subroutine5
   \   00014E                ; // Fall through to label ?Subroutine5
   3113          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   F8           MOV       R0,A
   \   000001   A3           INC       DPTR
   \   000002   E0           MOVX      A,@DPTR
   \   000003   3400         ADDC      A,#0x0
   \   000005   12....       LCALL     ?Subroutine152 & 0xFFFF
   \                     ??CrossCallReturnLabel_257:
   \   000008   F583         MOV       DPH,A
   \   00000A   8882         MOV       DPL,R0
   \   00000C   E0           MOVX      A,@DPTR
   \   00000D   FA           MOV       R2,A
   \   00000E   85..82       MOV       DPL,?XSP + 0
   \   000011   85..83       MOV       DPH,?XSP + 1
   \   000014   12....       LCALL     ?Subroutine183 & 0xFFFF
   \                     ??CrossCallReturnLabel_351:
   \   000017   E0           MOVX      A,@DPTR
   \   000018   F9           MOV       R1,A
   \   000019   EA           MOV       A,R2
   \   00001A   2E           ADD       A,R6
   \   00001B   22           RET
   3114          
   3115          /*********************************************************************
   3116           * @fn          ZDO_ParseMgmtNwkUpdateReq
   3117           *
   3118           * @brief       This function handles parsing the incoming Management
   3119           *              Network Update request and starts the request (if needed).
   3120           *
   3121           * @param       inMsg - incoming message (request)
   3122           * @param       pReq - pointer to place to parse message to
   3123           *
   3124           * @return      none
   3125           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3126          void ZDO_ParseMgmtNwkUpdateReq( zdoIncomingMsg_t *inMsg, ZDO_MgmtNwkUpdateReq_t *pReq )
   \                     ZDO_ParseMgmtNwkUpdateReq:
   3127          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL     ?Subroutine119 & 0xFFFF
   3128            uint8 *msg = inMsg->asdu;
   \                     ??CrossCallReturnLabel_683:
   \   000008   12....       LCALL     ?Subroutine92 & 0xFFFF
   3129          
   3130            pReq->channelMask = osal_build_uint32( msg, 4 );
   \                     ??CrossCallReturnLabel_155:
   \   00000B   12....       LCALL     `??osal_build_uint32::?relay`; Banked call to: osal_build_uint32
   \   00000E   EA           MOV       A,R2
   \   00000F   F8           MOV       R0,A
   \   000010   EB           MOV       A,R3
   \   000011   F9           MOV       R1,A
   \   000012   EC           MOV       A,R4
   \   000013   FA           MOV       R2,A
   \   000014   ED           MOV       A,R5
   \   000015   FB           MOV       R3,A
   \   000016   85..82       MOV       DPL,?V0
   \   000019   85..83       MOV       DPH,?V1
   \   00001C   12....       LCALL     ?XSTORE_R0123
   3131            msg += 4;
   3132            pReq->scanDuration = *msg++;
   \   00001F   8E82         MOV       DPL,R6
   \   000021   8F83         MOV       DPH,R7
   \   000023   A3           INC       DPTR
   \   000024   A3           INC       DPTR
   \   000025   A3           INC       DPTR
   \   000026   A3           INC       DPTR
   \   000027   E0           MOVX      A,@DPTR
   \   000028   F8           MOV       R0,A
   \   000029   85..82       MOV       DPL,?V0
   \   00002C   85..83       MOV       DPH,?V1
   \   00002F   A3           INC       DPTR
   \   000030   A3           INC       DPTR
   \   000031   A3           INC       DPTR
   \   000032   A3           INC       DPTR
   \   000033   F0           MOVX      @DPTR,A
   3133          
   3134            if ( pReq->scanDuration <= 0x05 )
   \   000034   C3           CLR       C
   \   000035   9406         SUBB      A,#0x6
   \   000037   5009         JNC       ??ZDO_ParseMgmtNwkUpdateReq_0
   3135            {
   3136              // Request is to scan over channelMask
   3137              pReq->scanCount = *msg;
   \   000039   8E82         MOV       DPL,R6
   \   00003B   8F83         MOV       DPH,R7
   \   00003D   12....       LCALL     ?Subroutine203 & 0xFFFF
   3138            }
   \                     ??CrossCallReturnLabel_334:
   \   000040   8040         SJMP      ??ZDO_ParseMgmtNwkUpdateReq_1
   3139            else if ( ( pReq->scanDuration == 0xFE ) || ( pReq->scanDuration == 0xFF ) )
   \                     ??ZDO_ParseMgmtNwkUpdateReq_0:
   \   000042   85..82       MOV       DPL,?V0
   \   000045   85..83       MOV       DPH,?V1
   \   000048   A3           INC       DPTR
   \   000049   A3           INC       DPTR
   \   00004A   A3           INC       DPTR
   \   00004B   A3           INC       DPTR
   \   00004C   E0           MOVX      A,@DPTR
   \   00004D   64FE         XRL       A,#0xfe
   \   00004F   600E         JZ        ??ZDO_ParseMgmtNwkUpdateReq_2
   \   000051   85..82       MOV       DPL,?V0
   \   000054   85..83       MOV       DPH,?V1
   \   000057   A3           INC       DPTR
   \   000058   A3           INC       DPTR
   \   000059   A3           INC       DPTR
   \   00005A   A3           INC       DPTR
   \   00005B   E0           MOVX      A,@DPTR
   \   00005C   F4           CPL       A
   \   00005D   7024         JNZ       ??ZDO_ParseMgmtNwkUpdateReq_3
   3140            {
   3141              // Request is to change Channel (0xFE) or apsChannelMask and NwkManagerAddr (0xFF)
   3142              pReq->nwkUpdateId = *msg++;
   \                     ??ZDO_ParseMgmtNwkUpdateReq_2:
   \   00005F   8E82         MOV       DPL,R6
   \   000061   8F83         MOV       DPH,R7
   \   000063   12....       LCALL     ?Subroutine89 & 0xFFFF
   \                     ??CrossCallReturnLabel_147:
   \   000066   F0           MOVX      @DPTR,A
   \   000067   EE           MOV       A,R6
   \   000068   2406         ADD       A,#0x6
   \   00006A   FE           MOV       R6,A
   \   00006B   5001         JNC       ??ZDO_ParseMgmtNwkUpdateReq_4
   \   00006D   0F           INC       R7
   3143          
   3144              if ( pReq->scanDuration == 0xFF )
   \                     ??ZDO_ParseMgmtNwkUpdateReq_4:
   \   00006E   85..82       MOV       DPL,?V0
   \   000071   85..83       MOV       DPH,?V1
   \   000074   A3           INC       DPTR
   \   000075   A3           INC       DPTR
   \   000076   A3           INC       DPTR
   \   000077   A3           INC       DPTR
   \   000078   E0           MOVX      A,@DPTR
   \   000079   F4           CPL       A
   \   00007A   7007         JNZ       ??ZDO_ParseMgmtNwkUpdateReq_3
   3145              {
   3146                pReq->nwkManagerAddr = BUILD_UINT16( msg[0], msg[1] );
   \   00007C   12....       LCALL     ?Subroutine63 & 0xFFFF
   3147              }
   3148            }
   \                     ??CrossCallReturnLabel_101:
   \   00007F   F0           MOVX      @DPTR,A
   \   000080   A3           INC       DPTR
   \   000081   E9           MOV       A,R1
   \                     ??ZDO_ParseMgmtNwkUpdateReq_1:
   \   000082   F0           MOVX      @DPTR,A
   3149          }
   \                     ??ZDO_ParseMgmtNwkUpdateReq_3:
   \   000083   02....       LJMP      ??Subroutine214_0 & 0xFFFF

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_Init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_StartDevice::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_StartDevice

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_UpdateNwkStatus::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_UpdateNwkStatus

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_CompareClusterLists::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_CompareClusterLists

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_AnyClusterMatches::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_AnyClusterMatches

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessNodeDescReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessNodeDescReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessPowerDescReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessPowerDescReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessSimpleDescReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessSimpleDescReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessActiveEPReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessActiveEPReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ConvertOTAClusters::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ConvertOTAClusters

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessMatchDescReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMatchDescReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessBindUnbindReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessBindUnbindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_UpdateAddrManager::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_UpdateAddrManager

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessServerDiscReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessServerDiscReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_EndDeviceTimeoutCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_EndDeviceTimeoutCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessMgmtLqiReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtLqiReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessMgmtNwkDiscReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtNwkDiscReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessMgmtRtgReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtRtgReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessMgmtBindReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtBindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessMgmtDirectJoinReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtDirectJoinReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessMgmtLeaveReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtLeaveReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessMgmtPermitJoinReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtPermitJoinReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??NLME_PermitJoiningTimeout::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    NLME_PermitJoiningTimeout

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessUserDescReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessUserDescReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessUserDescSet::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessUserDescSet

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessDeviceAnnce::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessDeviceAnnce

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_BuildSimpleDescBuf::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_BuildSimpleDescBuf

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_MatchEndDeviceBind::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_MatchEndDeviceBind

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_RemoveMatchMemory::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_RemoveMatchMemory

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_CopyMatchInfo::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_CopyMatchInfo

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDMatchSendState::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDMatchSendState

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_EndDeviceBindMatchTimeoutCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_EndDeviceBindMatchTimeoutCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseEndDeviceBindReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseEndDeviceBindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseBindUnbindReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseBindUnbindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseAddrRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseAddrRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseNodeDescRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseNodeDescRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParsePowerDescRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParsePowerDescRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseSimpleDescRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseSimpleDescRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseEPListRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseEPListRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseServerDiscRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseServerDiscRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseMgmtLqiRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseMgmtLqiRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseMgmNwkDiscRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseMgmNwkDiscRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseMgmtRtgRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseMgmtRtgRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseMgmtBindRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseMgmtBindRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseUserDescRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseUserDescRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseSimpleDescBuf::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseSimpleDescBuf

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseDeviceAnnce::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseDeviceAnnce

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseMgmtNwkUpdateNotify::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseMgmtNwkUpdateNotify

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseMgmtNwkUpdateReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseMgmtNwkUpdateReq
   3150          
   3151          /*********************************************************************
   3152          *********************************************************************/
   3153          
   3154          

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0      0   NLME_PermitJoiningTimeout
      1     69   ZDMatchSendState
        0     37   -> APS_SetEndDeviceBindTimeout
        0     37   -> ZDO_RemoveMatchMemory
        0     45   -> ZDP_BindUnbindReq
        0     42   -> ZDP_SendData
        0     37   -> sAddrExtCpy
      0     41   ZDO_AnyClusterMatches
      1     10   ZDO_BuildSimpleDescBuf
      0     44   ZDO_CompareClusterLists
      0     37   ZDO_ConvertOTAClusters
      0     41   ZDO_CopyMatchInfo
        0     14   -> osal_mem_alloc
        0     14   -> osal_mem_free
        0     17   -> osal_memcpy
      2      0   ZDO_EndDeviceBindMatchTimeoutCB
        2      0   -> ZDMatchSendState
      1     17   ZDO_EndDeviceTimeoutCB
        0     17   -> ZDP_SendData
        0     12   -> osal_mem_free
      2      0   ZDO_Init
        2      0   -> APS_ReflectorInit
        2      0   -> NLME_DeviceJoiningInit
        2      0   -> sAddrExtCpy
      1     29   ZDO_MatchEndDeviceBind
        0     24   -> APS_SetEndDeviceBindTimeout
        0     24   -> ZDMatchSendState
        0     28   -> ZDO_CompareClusterLists
        0     24   -> ZDO_CopyMatchInfo
        0     24   -> ZDO_RemoveMatchMemory
        0     29   -> ZDP_SendData
        0     24   -> osal_mem_alloc
        0     27   -> osal_memcpy
        0     24   -> osal_memset
      1     14   ZDO_ParseAddrRsp
        0     14   -> osal_mem_alloc
        0     14   -> sAddrExtCpy
      1     10   ZDO_ParseBindUnbindReq
        0     10   -> sAddrExtCpy
      1     52   ZDO_ParseDeviceAnnce
        0     10   -> sAddrExtCpy
      1     18   ZDO_ParseEPListRsp
        0     15   -> osal_mem_alloc
        0     18   -> osal_memcpy
      1     12   ZDO_ParseEndDeviceBindReq
        0     12   -> ZDO_ConvertOTAClusters
        0     12   -> osal_mem_alloc
        0     12   -> sAddrExtCpy
      1     16   ZDO_ParseMgmNwkDiscRsp
        0     16   -> osal_mem_alloc
        0     16   -> sAddrExtCpy
      1     16   ZDO_ParseMgmtBindRsp
        0     16   -> osal_mem_alloc
        0     16   -> sAddrExtCpy
      1     16   ZDO_ParseMgmtLqiRsp
        0     16   -> osal_mem_alloc
        0     16   -> sAddrExtCpy
      1     23   ZDO_ParseMgmtNwkUpdateNotify
        0     20   -> osal_build_uint32
        0     20   -> osal_mem_alloc
        0     23   -> osal_memcpy
      1     10   ZDO_ParseMgmtNwkUpdateReq
        0     10   -> osal_build_uint32
      1     14   ZDO_ParseMgmtRtgRsp
        0     14   -> osal_mem_alloc
      1     10   ZDO_ParseNodeDescRsp
      1     12   ZDO_ParsePowerDescRsp
      1      9   ZDO_ParseServerDiscRsp
      1     23   ZDO_ParseSimpleDescBuf
        0     14   -> osal_mem_alloc
        0     14   -> osal_mem_free
      1      9   ZDO_ParseSimpleDescRsp
        0      9   -> ZDO_ParseSimpleDescBuf
      1     18   ZDO_ParseUserDescRsp
        0     15   -> osal_mem_alloc
        0     18   -> osal_memcpy
      0     21   ZDO_ProcessActiveEPReq
        0     14   -> NLME_GetShortAddr
        0     21   -> ZDP_EPRsp
        0     14   -> afEndPoints
        0     14   -> afNumEndPoints
      0     29   ZDO_ProcessBindUnbindReq
        0     25   -> APSME_BindRequest
        0     24   -> APSME_LookupNwkAddr
        0     25   -> APSME_UnBindRequest
        0     24   -> NLME_GetExtAddr
        0     24   -> ZDApp_NVUpdate
        0     24   -> ZDP_NwkAddrReq
        0     29   -> ZDP_SendData
        0     24   -> bindNumOfEntries
        0     24   -> sAddrExtCmp
        0     24   -> sAddrExtCpy
      0     42   ZDO_ProcessDeviceAnnce
        0     42   -> AddrMgrEntryLookupNwk
        0     42   -> AddrMgrEntryUpdate
        0     42   -> AddrMgrExtAddrSet
        0     42   -> NLME_CheckNewAddrSet
        0     42   -> NLME_GetCoordExtAddr
        0     42   -> NLME_GetCoordShortAddr
        0     42   -> NLME_GetExtAddr
        0     42   -> NLME_GetShortAddr
        0     42   -> RTG_RemoveRtgEntry
        0     42   -> ZDO_ParseDeviceAnnce
        0     42   -> ZMacSetReq
        0     42   -> nwkNeighborRemoveAllStranded
        0     42   -> osal_memset
        0     42   -> sAddrExtCmp
      1     34   ZDO_ProcessMatchDescReq
        0     27   -> NLME_IsAddressBroadcast
        0     29   -> ZDO_AnyClusterMatches
        0     27   -> ZDO_ConvertOTAClusters
        0     34   -> ZDP_EPRsp
        0     27   -> osal_mem_alloc
        0     27   -> osal_mem_free
        0     30   -> osal_memcpy
        0     27   -> osal_msg_allocate
        0     27   -> osal_msg_send
      0     25   ZDO_ProcessMgmtBindReq
        0     20   -> APSME_GetRequest
        0     25   -> ZDP_MgmtBindRsp
        0     20   -> osal_mem_alloc
        0     20   -> osal_mem_free
      1     16   ZDO_ProcessMgmtDirectJoinReq
        0     11   -> NLME_DirectJoinRequest
        0     16   -> ZDP_SendData
      1     23   ZDO_ProcessMgmtLeaveReq
        0     18   -> AddrMgrExtAddrValid
        0     18   -> NLME_GetExtAddr
        0     18   -> NLME_LeaveReq
        0     23   -> ZDP_SendData
        0     18   -> sAddrExtCmp
      1     63   ZDO_ProcessMgmtLqiReq
        0     58   -> AddrMgrEntryLookupNwk
        0     58   -> AssocCount
        0     58   -> AssocFindDevice
        0     58   -> NLME_GetRequest
        0     63   -> ZDP_MgmtLqiRsp
        0     58   -> osal_mem_alloc
        0     58   -> osal_mem_free
        0     58   -> osal_memset
        0     58   -> sAddrExtCpy
      1     17   ZDO_ProcessMgmtNwkDiscReq
        0     17   -> NLME_NwkDiscReq2
        0     17   -> NLME_NwkDiscTerm
        0     17   -> osal_build_uint32
      1     16   ZDO_ProcessMgmtPermitJoinReq
        0     11   -> NLME_PermitJoiningRequest
        0     16   -> ZDP_SendData
      0     22   ZDO_ProcessMgmtRtgReq
        0     17   -> NLME_GetRequest
        0     22   -> ZDP_MgmtRtgRsp
        0     17   -> osal_mem_alloc
        0     17   -> osal_mem_free
      0     14   ZDO_ProcessNodeDescReq
        0     14   -> ZDP_GenericRsp
        0     12   -> ZDP_NodeDescMsg
      0     14   ZDO_ProcessPowerDescReq
        0     14   -> ZDP_GenericRsp
        0     12   -> ZDP_PowerDescMsg
      0     14   ZDO_ProcessServerDiscReq
        0     14   -> ZDP_ServerDiscRsp
      0     12   ZDO_ProcessSimpleDescReq
        0     12   -> ZDP_SimpleDescMsg
        0     12   -> afFindSimpleDesc
        0     12   -> osal_mem_free
      0     33   ZDO_ProcessUserDescReq
        0     33   -> ZDP_GenericRsp
        0     32   -> ZDP_UserDescRsp
        0     33   -> osal_nv_read
      1     40   ZDO_ProcessUserDescSet
        0     40   -> ZDP_SendData
        0     38   -> osal_memcpy
        0     39   -> osal_nv_write
      2     37   ZDO_RemoveMatchMemory
        2      0   -> osal_mem_free
      0     20   ZDO_StartDevice
        0     20   -> NLME_NetworkDiscoveryRequest
        0     20   -> NLME_OrphanJoinRequest
        0     20   -> nwk_ScanJoiningOrphan
        0     20   -> osal_start_timerEx
      2     13   ZDO_UpdateAddrManager
        2     13   -> AddrMgrEntryUpdate
        2     13   -> AddrMgrExtAddrSet
      1     12   ZDO_UpdateNwkStatus
        0     12   -> NLME_GetExtAddr
        0     12   -> NLME_GetShortAddr
        0     12   -> osal_msg_allocate
        0     12   -> osal_msg_find
        0     12   -> osal_msg_send
        0     12   -> osal_set_event


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       5  ??Subroutine210_0
       8  ??Subroutine211_0
       4  ??Subroutine212_0
       3  ??Subroutine213_0
       5  ??Subroutine214_0
       8  ??Subroutine215_0
       4  ??Subroutine216_0
       5  ??Subroutine217_0
       8  ??Subroutine218_0
       8  ??Subroutine219_0
       2  ??Subroutine220_0
       9  ??Subroutine221_0
       1  ??Subroutine222_0
       4  ??Subroutine223_0
       1  ??Subroutine224_0
       5  ??Subroutine225_0
       4  ??Subroutine226_0
       5  ??Subroutine227_0
       5  ??Subroutine228_0
       6  ??Subroutine229_0
       5  ??Subroutine230_0
       6  ??Subroutine231_0
       4  ??Subroutine232_0
       6  ??Subroutine233_0
       4  ??Subroutine234_0
       2  ??Subroutine235_0
       4  ??Subroutine236_0
       6  ??Subroutine237_0
       2  ??Subroutine238_0
       6  ??Subroutine239_0
       5  ??Subroutine240_0
       9  ??Subroutine241_0
       2  ??Subroutine242_0
       5  ??Subroutine243_0
       8  ??Subroutine244_0
       7  ??Subroutine245_0
       2  ??Subroutine246_0
       6  ??Subroutine247_0
       4  ??Subroutine248_0
       1  ??Subroutine249_0
       1  ??Subroutine250_0
       4  ??Subroutine251_0
       7  ??Subroutine252_0
       4  ??Subroutine253_0
       1  ??Subroutine254_0
       5  ??Subroutine255_0
       8  ??Subroutine256_0
       4  ??Subroutine257_0
       6  ??Subroutine258_0
       5  ??Subroutine259_0
       3  ??Subroutine260_0
       5  ??Subroutine261_0
       9  ??Subroutine262_0
       3  ??Subroutine263_0
       4  ??Subroutine264_0
      11  ??Subroutine265_0
       6  ??Subroutine266_0
       6  ??Subroutine267_0
       5  ??Subroutine268_0
       5  ??Subroutine269_0
       7  ??Subroutine270_0
       6  ??Subroutine271_0
       4  ??Subroutine272_0
       9  ??Subroutine273_0
       5  ??Subroutine274_0
       7  ?Subroutine0
       5  ?Subroutine1
      39  ?Subroutine10
      10  ?Subroutine100
       6  ?Subroutine101
       2  ?Subroutine102
       8  ?Subroutine103
       7  ?Subroutine104
      11  ?Subroutine105
       2  ?Subroutine106
       8  ?Subroutine107
       3  ?Subroutine108
       2  ?Subroutine109
      31  ?Subroutine11
      10  ?Subroutine110
       2  ?Subroutine111
      13  ?Subroutine112
       1  ?Subroutine113
      16  ?Subroutine114
       1  ?Subroutine115
       7  ?Subroutine116
       3  ?Subroutine117
       7  ?Subroutine118
       4  ?Subroutine119
      20  ?Subroutine12
       4  ?Subroutine120
       4  ?Subroutine121
       4  ?Subroutine122
       4  ?Subroutine123
       1  ?Subroutine124
      11  ?Subroutine125
      17  ?Subroutine126
       3  ?Subroutine127
      21  ?Subroutine128
       9  ?Subroutine129
      19  ?Subroutine13
      14  ?Subroutine130
       4  ?Subroutine131
       8  ?Subroutine132
       2  ?Subroutine133
       8  ?Subroutine134
       7  ?Subroutine135
       8  ?Subroutine136
       5  ?Subroutine137
       4  ?Subroutine138
       6  ?Subroutine139
      17  ?Subroutine14
       9  ?Subroutine140
       9  ?Subroutine141
       8  ?Subroutine142
       6  ?Subroutine143
       8  ?Subroutine144
       4  ?Subroutine145
      10  ?Subroutine146
       6  ?Subroutine147
       8  ?Subroutine148
       4  ?Subroutine149
       9  ?Subroutine15
      10  ?Subroutine150
       2  ?Subroutine151
      18  ?Subroutine152
       1  ?Subroutine153
       8  ?Subroutine154
       8  ?Subroutine155
      13  ?Subroutine156
       6  ?Subroutine157
       7  ?Subroutine158
       1  ?Subroutine159
       9  ?Subroutine16
       4  ?Subroutine160
       7  ?Subroutine161
       4  ?Subroutine162
       5  ?Subroutine163
      13  ?Subroutine164
      11  ?Subroutine165
       2  ?Subroutine166
       6  ?Subroutine167
      14  ?Subroutine168
       4  ?Subroutine169
       5  ?Subroutine17
      16  ?Subroutine170
      13  ?Subroutine171
      10  ?Subroutine172
       7  ?Subroutine173
       3  ?Subroutine174
       5  ?Subroutine175
       1  ?Subroutine176
       2  ?Subroutine177
       2  ?Subroutine178
       4  ?Subroutine179
       5  ?Subroutine18
       4  ?Subroutine180
       6  ?Subroutine181
       6  ?Subroutine182
       5  ?Subroutine183
      19  ?Subroutine184
       6  ?Subroutine185
      12  ?Subroutine186
       6  ?Subroutine187
       8  ?Subroutine188
       1  ?Subroutine189
       5  ?Subroutine19
       9  ?Subroutine190
       4  ?Subroutine191
       8  ?Subroutine192
      10  ?Subroutine193
      11  ?Subroutine194
       9  ?Subroutine195
       9  ?Subroutine196
       9  ?Subroutine197
       6  ?Subroutine198
       9  ?Subroutine199
       3  ?Subroutine2
       1  ?Subroutine20
       6  ?Subroutine200
       6  ?Subroutine201
      16  ?Subroutine202
      18  ?Subroutine203
      13  ?Subroutine204
       1  ?Subroutine205
       6  ?Subroutine206
       9  ?Subroutine207
       7  ?Subroutine208
       7  ?Subroutine209
       6  ?Subroutine21
       8  ?Subroutine22
      16  ?Subroutine23
      22  ?Subroutine24
       6  ?Subroutine25
       8  ?Subroutine26
       4  ?Subroutine27
       8  ?Subroutine28
       8  ?Subroutine29
       4  ?Subroutine3
       6  ?Subroutine30
       4  ?Subroutine31
       7  ?Subroutine32
       7  ?Subroutine33
       6  ?Subroutine34
       4  ?Subroutine35
       6  ?Subroutine36
      12  ?Subroutine37
       2  ?Subroutine38
      10  ?Subroutine39
       2  ?Subroutine4
      12  ?Subroutine40
       5  ?Subroutine41
       5  ?Subroutine42
       7  ?Subroutine43
       8  ?Subroutine44
      27  ?Subroutine45
       4  ?Subroutine46
       4  ?Subroutine47
       4  ?Subroutine48
       6  ?Subroutine49
       3  ?Subroutine5
       9  ?Subroutine50
      21  ?Subroutine51
      31  ?Subroutine52
      29  ?Subroutine53
       4  ?Subroutine54
       7  ?Subroutine55
       9  ?Subroutine56
       9  ?Subroutine57
       7  ?Subroutine58
       4  ?Subroutine59
       5  ?Subroutine6
       8  ?Subroutine60
      38  ?Subroutine61
      12  ?Subroutine62
       4  ?Subroutine63
      17  ?Subroutine64
       9  ?Subroutine65
       9  ?Subroutine66
       9  ?Subroutine67
       9  ?Subroutine68
      14  ?Subroutine69
       6  ?Subroutine7
       3  ?Subroutine70
       8  ?Subroutine71
       7  ?Subroutine72
      10  ?Subroutine73
      10  ?Subroutine74
       7  ?Subroutine75
       4  ?Subroutine76
       6  ?Subroutine77
       5  ?Subroutine78
       7  ?Subroutine79
       5  ?Subroutine8
       2  ?Subroutine80
       7  ?Subroutine81
       5  ?Subroutine82
       7  ?Subroutine83
      12  ?Subroutine84
      12  ?Subroutine85
      12  ?Subroutine86
      12  ?Subroutine87
      18  ?Subroutine88
       4  ?Subroutine89
      28  ?Subroutine9
       4  ?Subroutine90
       7  ?Subroutine91
      10  ?Subroutine92
      13  ?Subroutine93
       3  ?Subroutine94
       3  ?Subroutine95
      12  ?Subroutine96
      11  ?Subroutine97
      12  ?Subroutine98
       5  ?Subroutine99
       3  NLME_PermitJoiningTimeout
       6  NLME_PermitJoiningTimeout::?relay
     664  ZDMatchSendState
       6  ZDMatchSendState::?relay
      52  ZDOBuildBuf
      90  ZDO_AnyClusterMatches
       6  ZDO_AnyClusterMatches::?relay
     191  ZDO_BuildSimpleDescBuf
       6  ZDO_BuildSimpleDescBuf::?relay
     129  ZDO_CompareClusterLists
       6  ZDO_CompareClusterLists::?relay
      66  ZDO_ConvertOTAClusters
       6  ZDO_ConvertOTAClusters::?relay
     231  ZDO_CopyMatchInfo
       6  ZDO_CopyMatchInfo::?relay
       2  ZDO_EDBind
      16  ZDO_EndDeviceBindMatchTimeoutCB
       6  ZDO_EndDeviceBindMatchTimeoutCB::?relay
     214  ZDO_EndDeviceTimeoutCB
       6  ZDO_EndDeviceTimeoutCB::?relay
      43  ZDO_Init
       6  ZDO_Init::?relay
     595  ZDO_MatchEndDeviceBind
       6  ZDO_MatchEndDeviceBind::?relay
     211  ZDO_ParseAddrRsp
       6  ZDO_ParseAddrRsp::?relay
      86  ZDO_ParseBindUnbindReq
       6  ZDO_ParseBindUnbindReq::?relay
      52  ZDO_ParseDeviceAnnce
       6  ZDO_ParseDeviceAnnce::?relay
     111  ZDO_ParseEPListRsp
       6  ZDO_ParseEPListRsp::?relay
     265  ZDO_ParseEndDeviceBindReq
       6  ZDO_ParseEndDeviceBindReq::?relay
     244  ZDO_ParseMgmNwkDiscRsp
       6  ZDO_ParseMgmNwkDiscRsp::?relay
     181  ZDO_ParseMgmtBindRsp
       6  ZDO_ParseMgmtBindRsp::?relay
     149  ZDO_ParseMgmtLqiRsp
       6  ZDO_ParseMgmtLqiRsp::?relay
     334  ZDO_ParseMgmtNwkUpdateNotify
       6  ZDO_ParseMgmtNwkUpdateNotify::?relay
     134  ZDO_ParseMgmtNwkUpdateReq
       6  ZDO_ParseMgmtNwkUpdateReq::?relay
     140  ZDO_ParseMgmtRtgRsp
       6  ZDO_ParseMgmtRtgRsp::?relay
     284  ZDO_ParseNodeDescRsp
       6  ZDO_ParseNodeDescRsp::?relay
     200  ZDO_ParsePowerDescRsp
       6  ZDO_ParsePowerDescRsp::?relay
      51  ZDO_ParseServerDiscRsp
       6  ZDO_ParseServerDiscRsp::?relay
     286  ZDO_ParseSimpleDescBuf
       6  ZDO_ParseSimpleDescBuf::?relay
      30  ZDO_ParseSimpleDescRsp
       6  ZDO_ParseSimpleDescRsp::?relay
     112  ZDO_ParseUserDescRsp
       6  ZDO_ParseUserDescRsp::?relay
     123  ZDO_ProcessActiveEPReq
       6  ZDO_ProcessActiveEPReq::?relay
     330  ZDO_ProcessBindUnbindReq
       6  ZDO_ProcessBindUnbindReq::?relay
     288  ZDO_ProcessDeviceAnnce
       6  ZDO_ProcessDeviceAnnce::?relay
     990  ZDO_ProcessMatchDescReq
       6  ZDO_ProcessMatchDescReq::?relay
     272  ZDO_ProcessMgmtBindReq
       6  ZDO_ProcessMgmtBindReq::?relay
      81  ZDO_ProcessMgmtDirectJoinReq
       6  ZDO_ProcessMgmtDirectJoinReq::?relay
     169  ZDO_ProcessMgmtLeaveReq
       6  ZDO_ProcessMgmtLeaveReq::?relay
     655  ZDO_ProcessMgmtLqiReq
       6  ZDO_ProcessMgmtLqiReq::?relay
     133  ZDO_ProcessMgmtNwkDiscReq
       6  ZDO_ProcessMgmtNwkDiscReq::?relay
      85  ZDO_ProcessMgmtPermitJoinReq
       6  ZDO_ProcessMgmtPermitJoinReq::?relay
     298  ZDO_ProcessMgmtRtgReq
       6  ZDO_ProcessMgmtRtgReq::?relay
      71  ZDO_ProcessNodeDescReq
       6  ZDO_ProcessNodeDescReq::?relay
      71  ZDO_ProcessPowerDescReq
       6  ZDO_ProcessPowerDescReq::?relay
      70  ZDO_ProcessServerDiscReq
       6  ZDO_ProcessServerDiscReq::?relay
     149  ZDO_ProcessSimpleDescReq
       6  ZDO_ProcessSimpleDescReq::?relay
     155  ZDO_ProcessUserDescReq
       6  ZDO_ProcessUserDescReq::?relay
     300  ZDO_ProcessUserDescSet
       6  ZDO_ProcessUserDescSet::?relay
     129  ZDO_RemoveMatchMemory
       6  ZDO_RemoveMatchMemory::?relay
     186  ZDO_StartDevice
       6  ZDO_StartDevice::?relay
      51  ZDO_UpdateAddrManager
       6  ZDO_UpdateAddrManager::?relay
     125  ZDO_UpdateNwkStatus
       6  ZDO_UpdateNwkStatus::?relay
       4  apsChannelMask
       2  matchED
       1  scanCnt

 
 11 919 bytes in segment BANKED_CODE
    294 bytes in segment BANK_RELAYS
     61 bytes in segment XDATA_Z
 
    294 bytes of CODE     memory
 11 919 bytes of HUGECODE memory
     61 bytes of XDATA    memory

Errors: none
Warnings: none
