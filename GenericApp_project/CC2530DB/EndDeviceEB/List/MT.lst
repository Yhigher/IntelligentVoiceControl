###############################################################################
#
# IAR C/C++ Compiler V10.10.1.4655 for 8051               29/Apr/2024  11:26:03
# Copyright 2004-2017 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Components\mt\MT.c
#    Command line       =  
#        -f C:\Users\Ñî\AppData\Local\Temp\EW56E0.tmp
#        (D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Components\mt\MT.c
#        -D xNWK_AUTO_POLL -D ZTOOL_P1 -D xMT_TASK -D xMT_SYS_FUNC -D
#        xMT_ZDO_FUNC -D xLCD_SUPPORTED=DEBUG -D xPOWER_SAVING -lC
#        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\CC2530DB\EndDeviceEB\List
#        -lA
#        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\CC2530DB\EndDeviceEB\List
#        --diag_suppress Pe001,Pa010 -o
#        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\CC2530DB\EndDeviceEB\Obj
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 8 -f
#        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f
#        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0x520
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=TRUE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440) -I
#        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\CC2530DB\
#        -I
#        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\CC2530DB\..\Source\
#        -I
#        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\CC2530DB\..\..\..\ZMain\TI2530DB\
#        -I
#        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\CC2530DB\..\..\..\..\..\Components\hal\include\
#        -I
#        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
#        -I
#        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\CC2530DB\..\..\..\..\..\Components\mac\include\
#        -I
#        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\CC2530DB\..\..\..\..\..\Components\mac\high_level\
#        -I
#        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
#        -I
#        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
#        -I
#        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\CC2530DB\..\..\..\..\..\Components\mt\
#        -I
#        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\CC2530DB\..\..\..\..\..\Components\osal\include\
#        -I
#        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\CC2530DB\..\..\..\..\..\Components\osal\mcu\ccsoc\
#        -I
#        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\CC2530DB\..\..\..\..\..\Components\services\saddr\
#        -I
#        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\CC2530DB\..\..\..\..\..\Components\services\sdata\
#        -I
#        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\CC2530DB\..\..\..\..\..\Components\stack\af\
#        -I
#        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\CC2530DB\..\..\..\..\..\Components\stack\nwk\
#        -I
#        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\CC2530DB\..\..\..\..\..\Components\stack\sapi\
#        -I
#        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\CC2530DB\..\..\..\..\..\Components\stack\sec\
#        -I
#        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\CC2530DB\..\..\..\..\..\Components\stack\sys\
#        -I
#        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\CC2530DB\..\..\..\..\..\Components\stack\zdo\
#        -I
#        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\CC2530DB\..\..\..\..\..\Components\zmac\
#        -I
#        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
#        -Ohz --require_prototypes --no_code_motion)
#    Locale             =  Chinese (Simplified)_China.936
#    List file          =  
#        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\CC2530DB\EndDeviceEB\List\MT.lst
#    Object file        =  
#        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\CC2530DB\EndDeviceEB\Obj\MT.r51
#
###############################################################################

D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Components\mt\MT.c
      1          /***************************************************************************************************
      2            Filename:       MTEL.c
      3            Revised:        $Date: 2010-10-07 03:59:08 -0700 (Thu, 07 Oct 2010) $
      4            Revision:       $Revision: 24053 $
      5          
      6            Description:    MonitorTest Event Loop functions.  Everything in the
      7                            MonitorTest Task (except the serial driver).
      8          
      9            Copyright 2007 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          
     39           ***************************************************************************************************/
     40          
     41          
     42          /***************************************************************************************************
     43           * INCLUDES
     44           ***************************************************************************************************/
     45          #include "ZComDef.h"
     46          #include "MT.h"
     47          #include "MT_APP.h"
     48          #include "MT_DEBUG.h"
     49          #include "MT_UTIL.h"
     50          #include "MT_SYS.h"
     51          
     52          #include "OnBoard.h"
     53          #include "OSAL.h"
     54          #include "OSAL_Memory.h"
     55          #include "OSAL_Nv.h"
     56          
     57          #include "DebugTrace.h"
     58          #include "ZMAC.h"
     59          
     60          #if !defined ( NONWK )
     61            #include "NLMEDE.h"
     62            #include "nwk_bufs.h"
     63            #include "ZDObject.h"
     64            #include "ssp.h"
     65            #include "nwk_util.h"
     66            #include "AF.h"
     67            #include "MT_SAPI.h"
     68          #endif
     69          
     70          #if defined( MT_MAC_FUNC ) || defined( MT_MAC_CB_FUNC )
     71            #include "MT_MAC.h"
     72          #endif
     73          #if defined( MT_NWK_FUNC ) || defined( MT_NWK_CB_FUNC )
     74            #include "MT_NWK.h"
     75            #include "nwk.h"
     76            #include "nwk_bufs.h"
     77          #endif
     78          #if defined( MT_AF_FUNC ) || defined( MT_AF_CB_FUNC )
     79            #include "MT_AF.h"
     80          #endif
     81          #if defined( MT_USER_TEST_FUNC )
     82            #include "AF.h"
     83          #endif
     84          #if defined( MT_ZDO_FUNC )
     85            #include "MT_ZDO.h"
     86          #endif
     87          #if defined (MT_SAPI_FUNC)
     88          	#include "MT_SAPI.h"
     89          #endif
     90          #if defined (MT_OTA_FUNC)
     91            #include "MT_OTA.h"
     92          #endif
     93          
     94          #if defined( APP_TP )
     95           #include "TestProfile.h"
     96          #endif
     97          #if defined( APP_TP2 )
     98           #include "TestProfile2.h"
     99          #endif
    100          
    101          #if defined(APP_TGEN)
    102            #include "TrafficGenApp.h"
    103          #endif
    104          #if defined(APP_DEBUG)
    105          	#include "DebugApp.h"
    106          #endif
    107          #if defined (NWK_TEST)
    108          	#include "HWTTApp.h"
    109          #endif
    110          
    111          /* HAL */
    112          #include "hal_uart.h"
    113          #include "hal_led.h"
    114          #include "hal_key.h"
    115          #include "MT_UART.h"
    116          
    117          /***************************************************************************************************
    118           * MACROS
    119           ***************************************************************************************************/
    120          #define MTEL_DEBUG_INFO( nParams, p1, p2, p3 ) DEBUG_INFO( COMPID_MTEL, nParams, p1, p2, p3 )
    121          
    122          #define MT_ERROR_SRSP_LEN   3
    123          
    124          /***************************************************************************************************
    125           * CONSTANTS
    126           ***************************************************************************************************/

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    127          mtProcessMsg_t mtProcessIncoming[] =
   \                     mtProcessIncoming:
   \   000000                DS 22
   \   000016                REQUIRE __INIT_XDATA_Z
    128          {
    129            NULL,
    130          
    131          #if defined (MT_SYS_FUNC)
    132            MT_SysCommandProcessing,
    133          #else
    134            NULL,
    135          #endif
    136          
    137          #if defined (MT_MAC_FUNC)
    138            MT_MacCommandProcessing,
    139          #else
    140            NULL,
    141          #endif
    142          
    143          #if defined (MT_NWK_FUNC)
    144            MT_NwkCommandProcessing,
    145          #else
    146            NULL,
    147          #endif
    148          
    149          #if defined (MT_AF_FUNC)
    150            MT_AfCommandProcessing,
    151          #else
    152            NULL,
    153          #endif
    154          
    155          #if defined (MT_ZDO_FUNC)
    156            MT_ZdoCommandProcessing,
    157          #else
    158            NULL,
    159          #endif
    160          
    161          #if defined (MT_SAPI_FUNC)
    162            MT_SapiCommandProcessing,
    163          #else
    164            NULL,
    165          #endif
    166          
    167          #if defined (MT_UTIL_FUNC)
    168            MT_UtilCommandProcessing,
    169          #else
    170            NULL,
    171          #endif
    172          
    173          #if defined (MT_DEBUG_FUNC)
    174            MT_DebugCommandProcessing,
    175          #else
    176            NULL,
    177          #endif
    178          
    179          #if defined (MT_APP_FUNC)
    180            MT_AppCommandProcessing,
    181          #else
    182            NULL,
    183          #endif
    184          
    185          #if defined (MT_OTA_FUNC)
    186            MT_OtaCommandProcessing,
    187          #else
    188            NULL,
    189          #endif
    190          };
    191          
    192          /***************************************************************************************************
    193           * TYPEDEFS
    194           ***************************************************************************************************/
    195          
    196          /***************************************************************************************************
    197           * GLOBAL VARIABLES
    198           ***************************************************************************************************/

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    199          UINT16 save_cmd;
   \                     save_cmd:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    200          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    201          byte MT_TaskID;
   \                     MT_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    202          byte debugThreshold;
   \                     debugThreshold:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    203          byte debugCompId;
   \                     debugCompId:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    204          
    205          /***************************************************************************************************
    206           * EXTERNAL FUNCTIONS
    207           ***************************************************************************************************/
    208          extern unsigned int mac_sim_eventLoop( void );
    209          
    210          #ifdef MACSIM
    211          extern void MACSIM_TranslateMsg( byte *buf, byte bLen );  /*  Used to pass Zignet message */
    212          #endif
    213          
    214          
    215          /***************************************************************************************************
    216           * LOCAL VARIABLES
    217           ***************************************************************************************************/
    218          
    219          /***************************************************************************************************
    220           * LOCAL FUNCTIONS
    221           ***************************************************************************************************/
    222          void MT_MsgQueueInit( void );
    223          void MT_ResetMsgQueue( void );
    224          byte MT_QueueMsg( byte *msg , byte len );
    225          void MT_ProcessQueue( void );
    226          
    227          #if defined ( MT_USER_TEST_FUNC )
    228          void MT_ProcessAppUserCmd( byte *pData );
    229          #endif
    230          
    231          /***************************************************************************************************
    232           * @fn      MT_Init()
    233           *
    234           * @brief   Initialize MT.
    235           *
    236           * @param   uint8 taskId - taskId
    237           *
    238           * @return  void
    239           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    240          void MT_Init(uint8 taskID)
   \                     MT_Init:
    241          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
    242            MT_TaskID = taskID;
   \   000006   90....       MOV       DPTR,#MT_TaskID
   \   000009   F0           MOVX      @DPTR,A
    243            debugThreshold = 0;
   \   00000A   90....       MOV       DPTR,#debugThreshold
   \   00000D   E4           CLR       A
   \   00000E   F0           MOVX      @DPTR,A
    244            debugCompId = 0;
   \   00000F   90....       MOV       DPTR,#debugCompId
   \   000012   F0           MOVX      @DPTR,A
    245            
    246          #if defined (MT_ZDO_FUNC)
    247            MT_ZdoInit();
    248          #endif
    249            MT_SysResetInd();
   \   000013                ; Setup parameters for call to function MT_SysResetInd
   \   000013   12....       LCALL     `??MT_SysResetInd::?relay`; Banked call to: MT_SysResetInd
    250          }
   \   000016                REQUIRE ?Subroutine0
   \   000016                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F01         MOV       R7,#0x1
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    251          
    252          /***************************************************************************************************
    253           * @fn      MT_BuildSPIMsg
    254           *
    255           * @brief
    256           *
    257           *   Format an SPI message.
    258           *
    259           * @param   UINT16 cmd - command id
    260           * @param   byte *msg - pointer to message buffer
    261           * @param   byte dataLen - length of data field
    262           * @param   byte *pData - pointer to data field
    263           *
    264           * @return  void
    265           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    266          void MT_BuildSPIMsg( uint8 cmdType, uint8 cmdId, byte *msg, byte dataLen, byte *pData )
   \                     MT_BuildSPIMsg:
    267          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FF           MOV       R7,A
   \   000007   8C..         MOV       ?V4,R4
   \   000009   8D..         MOV       ?V5,R5
   \   00000B   EB           MOV       A,R3
   \   00000C   FE           MOV       R6,A
    268            /* Fill in the CMD and Data Length */
    269            *msg++ = dataLen;
   \   00000D   8C82         MOV       DPL,R4
   \   00000F   8D83         MOV       DPH,R5
   \   000011   F0           MOVX      @DPTR,A
    270            *msg++ = cmdType;
   \   000012   A3           INC       DPTR
   \   000013   E9           MOV       A,R1
   \   000014   F0           MOVX      @DPTR,A
    271            *msg++ = cmdId;
   \   000015   EF           MOV       A,R7
   \   000016   8C82         MOV       DPL,R4
   \   000018   8D83         MOV       DPH,R5
   \   00001A   A3           INC       DPTR
   \   00001B   A3           INC       DPTR
   \   00001C   F0           MOVX      @DPTR,A
   \   00001D   740E         MOV       A,#0xe
   \   00001F   12....       LCALL     ?XSTACK_DISP0_8
   \   000022   E0           MOVX      A,@DPTR
   \   000023   F5..         MOV       ?V0,A
   \   000025   A3           INC       DPTR
   \   000026   E0           MOVX      A,@DPTR
   \   000027   F5..         MOV       ?V1,A
    272          
    273            /* Fill in the data */
    274            if ( pData )
   \   000029   E5..         MOV       A,?V0
   \   00002B   45..         ORL       A,?V1
   \   00002D   601D         JZ        ??MT_BuildSPIMsg_0
    275            {
    276              osal_memcpy( msg, pData, dataLen );
   \   00002F                ; Setup parameters for call to function osal_memcpy
   \   00002F   75..00       MOV       ?V2,#0x0
   \   000032   78..         MOV       R0,#?V0
   \   000034   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000037   EE           MOV       A,R6
   \   000038   FC           MOV       R4,A
   \   000039   7D00         MOV       R5,#0x0
   \   00003B   E5..         MOV       A,?V4
   \   00003D   2403         ADD       A,#0x3
   \   00003F   FA           MOV       R2,A
   \   000040   E4           CLR       A
   \   000041   35..         ADDC      A,?V5
   \   000043   FB           MOV       R3,A
   \   000044   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000047   7403         MOV       A,#0x3
   \   000049   12....       LCALL     ?DEALLOC_XSTACK8
    277            }
    278          }
   \                     ??MT_BuildSPIMsg_0:
   \   00004C   7F06         MOV       R7,#0x6
   \   00004E   02....       LJMP      ?BANKED_LEAVE_XDATA
    279          
    280          /***************************************************************************************************
    281           * @fn      MT_BuildAndSendZToolResponse
    282           *
    283           * @brief   Build and send a ZTOOL msg
    284           * @param   uint8 cmdType - include type and subsystem
    285           *          uint8 cmdId - command ID
    286           *          byte dataLen
    287           *          byte *pData
    288           *
    289           * @return  void
    290           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    291          void MT_BuildAndSendZToolResponse(uint8 cmdType, uint8 cmdId, uint8 dataLen, uint8 *pData)
   \                     MT_BuildAndSendZToolResponse:
    292          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FF           MOV       R7,A
   \   000007   8A..         MOV       ?V0,R2
   \   000009   EB           MOV       A,R3
   \   00000A   FE           MOV       R6,A
   \   00000B   8C..         MOV       ?V6,R4
   \   00000D   8D..         MOV       ?V7,R5
    293            uint8 *msg_ptr;
    294          
    295            /* Allocate memory including SOP and FCS */
    296            msg_ptr = MT_TransportAlloc((mtRpcCmdType_t)(cmdType & 0xE0), dataLen);
   \   00000F                ; Setup parameters for call to function MT_TransportAlloc
   \   00000F   FA           MOV       R2,A
   \   000010   74E0         MOV       A,#-0x20
   \   000012   5F           ANL       A,R7
   \   000013   F9           MOV       R1,A
   \   000014   12....       LCALL     `??MT_TransportAlloc::?relay`; Banked call to: MT_TransportAlloc
   \   000017   8A..         MOV       ?V4,R2
   \   000019   8B..         MOV       ?V5,R3
    297          
    298            if (msg_ptr)
   \   00001B   EA           MOV       A,R2
   \   00001C   45..         ORL       A,?V5
   \   00001E   6024         JZ        ??MT_BuildAndSendZToolResponse_0
    299            {
    300              /* Build the message */
    301              MT_BuildSPIMsg(cmdType, cmdId, msg_ptr, dataLen, pData);
   \   000020                ; Setup parameters for call to function MT_BuildSPIMsg
   \   000020   85....       MOV       ?V2,?V6
   \   000023   85....       MOV       ?V3,?V7
   \   000026   78..         MOV       R0,#?V2
   \   000028   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002B   EE           MOV       A,R6
   \   00002C   FB           MOV       R3,A
   \   00002D   AC..         MOV       R4,?V4
   \   00002F   AD..         MOV       R5,?V5
   \   000031   AA..         MOV       R2,?V0
   \   000033   EF           MOV       A,R7
   \   000034   F9           MOV       R1,A
   \   000035   12....       LCALL     `??MT_BuildSPIMsg::?relay`; Banked call to: MT_BuildSPIMsg
   \   000038   7402         MOV       A,#0x2
   \   00003A   12....       LCALL     ?DEALLOC_XSTACK8
    302              /* Send out the msg */
    303              MT_TransportSend(msg_ptr);
   \   00003D                ; Setup parameters for call to function MT_TransportSend
   \   00003D   AA..         MOV       R2,?V4
   \   00003F   AB..         MOV       R3,?V5
   \   000041   12....       LCALL     `??MT_TransportSend::?relay`; Banked call to: MT_TransportSend
    304            }
    305          }
   \                     ??MT_BuildAndSendZToolResponse_0:
   \   000044   7F08         MOV       R7,#0x8
   \   000046   02....       LJMP      ?BANKED_LEAVE_XDATA
    306          
    307          /***************************************************************************************************
    308           * @fn      MT_ProcessIncoming
    309           *
    310           * @brief  Process Incoming Message.
    311           *
    312           * @param   byte *pBuf - pointer to event message
    313           *
    314           * @return  void
    315           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    316          void MT_ProcessIncoming(uint8 *pBuf)
   \                     MT_ProcessIncoming:
    317          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 3
   \   000004   74FD         MOV       A,#-0x3
   \   000006   12....       LCALL     ?ALLOC_XSTACK8
    318            mtProcessMsg_t  func;
    319            uint8           rsp[MT_ERROR_SRSP_LEN];
    320          
    321            /* pre-build response message:  | status | cmd0 | cmd1 | */
    322            rsp[1] = pBuf[MT_RPC_POS_CMD0];
   \   000009   8A82         MOV       DPL,R2
   \   00000B   8B83         MOV       DPH,R3
   \   00000D   A3           INC       DPTR
   \   00000E   E0           MOVX      A,@DPTR
   \   00000F   C0E0         PUSH      A
   \   000011   7401         MOV       A,#0x1
   \   000013   12....       LCALL     ?XSTACK_DISP0_8
   \   000016   D0E0         POP       A
   \   000018   F0           MOVX      @DPTR,A
    323            rsp[2] = pBuf[MT_RPC_POS_CMD1];
   \   000019   8A82         MOV       DPL,R2
   \   00001B   8B83         MOV       DPH,R3
   \   00001D   A3           INC       DPTR
   \   00001E   A3           INC       DPTR
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   C0E0         PUSH      A
   \   000022   7402         MOV       A,#0x2
   \   000024   12....       LCALL     ?XSTACK_DISP0_8
   \   000027   D0E0         POP       A
   \   000029   F0           MOVX      @DPTR,A
    324          
    325            /* check length */
    326            if (pBuf[MT_RPC_POS_LEN] > MT_RPC_DATA_MAX)
   \   00002A   8A82         MOV       DPL,R2
   \   00002C   8B83         MOV       DPH,R3
   \   00002E   E0           MOVX      A,@DPTR
   \   00002F   C3           CLR       C
   \   000030   94FB         SUBB      A,#-0x5
   \   000032   400A         JC        ??MT_ProcessIncoming_0
    327            {
    328              rsp[0] = MT_RPC_ERR_LENGTH;
   \   000034   85..82       MOV       DPL,?XSP + 0
   \   000037   85..83       MOV       DPH,?XSP + 1
   \   00003A   7404         MOV       A,#0x4
   \   00003C   8043         SJMP      ??MT_ProcessIncoming_1
    329            }
    330            /* check subsystem range */
    331            else if ((rsp[1] & MT_RPC_SUBSYSTEM_MASK) < MT_RPC_SYS_MAX)
   \                     ??MT_ProcessIncoming_0:
   \   00003E   7401         MOV       A,#0x1
   \   000040   12....       LCALL     ?XSTACK_DISP0_8
   \   000043   E0           MOVX      A,@DPTR
   \   000044   541F         ANL       A,#0x1f
   \   000046   C3           CLR       C
   \   000047   940B         SUBB      A,#0xb
   \   000049   502E         JNC       ??MT_ProcessIncoming_2
    332            {
    333              /* look up processing function */
    334              func = mtProcessIncoming[rsp[1] & MT_RPC_SUBSYSTEM_MASK];
   \   00004B   E0           MOVX      A,@DPTR
   \   00004C   541F         ANL       A,#0x1f
   \   00004E   25E0         ADD       A,0xE0 /* A   */
   \   000050   F8           MOV       R0,A
   \   000051   74..         MOV       A,#mtProcessIncoming & 0xff
   \   000053   28           ADD       A,R0
   \   000054   F582         MOV       DPL,A
   \   000056   E4           CLR       A
   \   000057   34..         ADDC      A,#(mtProcessIncoming >> 8) & 0xff
   \   000059   F583         MOV       DPH,A
   \   00005B   E0           MOVX      A,@DPTR
   \   00005C   F8           MOV       R0,A
   \   00005D   A3           INC       DPTR
   \   00005E   E0           MOVX      A,@DPTR
   \   00005F   F9           MOV       R1,A
   \   000060   8882         MOV       DPL,R0
   \   000062   8983         MOV       DPH,R1
    335              if (func)
   \   000064   E582         MOV       A,DPL
   \   000066   4583         ORL       A,DPH
   \   000068   600F         JZ        ??MT_ProcessIncoming_2
    336              {
    337                /* execute processing function */
    338                rsp[0] = (*func)(pBuf);
   \   00006A                ; Setup parameters for indirect call
   \   00006A   12....       LCALL     ?CALL_IND
   \   00006D   E9           MOV       A,R1
   \   00006E   85..82       MOV       DPL,?XSP + 0
   \   000071   85..83       MOV       DPH,?XSP + 1
   \   000074   F0           MOVX      @DPTR,A
    339              }
    340              else
    341              {
    342                rsp[0] = MT_RPC_ERR_SUBSYSTEM;
    343              }
    344            }
    345            else
    346            {
    347              rsp[0] = MT_RPC_ERR_SUBSYSTEM;
    348            }
    349          
    350            /* if error and this was an SREQ, send error message */
    351            if ((rsp[0] != MT_RPC_SUCCESS) && ((rsp[1] & MT_RPC_CMD_TYPE_MASK) == MT_RPC_CMD_SREQ))
   \   000075   700B         JNZ       ??MT_ProcessIncoming_3
   \   000077   8022         SJMP      ??MT_ProcessIncoming_4
   \                     ??MT_ProcessIncoming_2:
   \   000079   85..82       MOV       DPL,?XSP + 0
   \   00007C   85..83       MOV       DPH,?XSP + 1
   \   00007F   7401         MOV       A,#0x1
   \                     ??MT_ProcessIncoming_1:
   \   000081   F0           MOVX      @DPTR,A
   \                     ??MT_ProcessIncoming_3:
   \   000082   7401         MOV       A,#0x1
   \   000084   12....       LCALL     ?XSTACK_DISP0_8
   \   000087   E0           MOVX      A,@DPTR
   \   000088   54E0         ANL       A,#0xe0
   \   00008A   6420         XRL       A,#0x20
   \   00008C   700D         JNZ       ??MT_ProcessIncoming_4
    352            {
    353              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_RES0), 0, MT_ERROR_SRSP_LEN, rsp);
   \   00008E                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00008E   AC..         MOV       R4,?XSP + 0
   \   000090   AD..         MOV       R5,?XSP + 1
   \   000092   7B03         MOV       R3,#0x3
   \   000094   7A00         MOV       R2,#0x0
   \   000096   7960         MOV       R1,#0x60
   \   000098   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    354            }
    355          }
   \                     ??MT_ProcessIncoming_4:
   \   00009B   7403         MOV       A,#0x3
   \   00009D   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000A0   D083         POP       DPH
   \   0000A2   D082         POP       DPL
   \   0000A4   02....       LJMP      ?BRET
    356          
    357          
    358          /***************************************************************************************************
    359           * @fn      MTProcessAppRspMsg
    360           *
    361           * @brief   Process the User App Response Message
    362           *
    363           * @param   data - output serial buffer.  The first byte must be the
    364           *          endpoint that send this message.
    365           * @param   len - data length
    366           *
    367           * @return  none
    368           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    369          void MTProcessAppRspMsg( byte *pData, byte len )
   \                     MTProcessAppRspMsg:
    370          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FC           MOV       R4,A
   \   000007   EB           MOV       A,R3
   \   000008   FD           MOV       R5,A
   \   000009   E9           MOV       A,R1
    371            /* Send out Reset Response message */
    372            MT_BuildAndSendZToolResponse( ((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_APP), MT_APP_RSP, len, pData );
   \   00000A                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00000A   FB           MOV       R3,A
   \   00000B   7A80         MOV       R2,#-0x80
   \   00000D   7969         MOV       R1,#0x69
   \   00000F   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    373          }
   \   000012   02....       LJMP      ?Subroutine0 & 0xFFFF
    374          
    375          
    376          /***************************************************************************************************
    377           * @fn      MT_ReverseBytes
    378           *
    379           * @brief
    380           *
    381           *   Reverses bytes within an array
    382           *
    383           * @param   data - ptr to data buffer to reverse
    384           * @param    len - number of bytes in buffer
    385           *
    386           * @return  void
    387           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    388          void MT_ReverseBytes( byte *pData, byte len )
   \                     MT_ReverseBytes:
    389          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV       A,#-0xb
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
    390            byte i,j;
    391            byte temp;
    392          
    393            for ( i = 0, j = len-1; len > 1; len-=2 )
   \   000007   7F00         MOV       R7,#0x0
   \   000009   74FF         MOV       A,#-0x1
   \   00000B   29           ADD       A,R1
   \   00000C   F5..         MOV       ?V0,A
   \   00000E   802D         SJMP      ??MT_ReverseBytes_0
    394            {
    395              temp = pData[i];
   \                     ??MT_ReverseBytes_1:
   \   000010   EF           MOV       A,R7
   \   000011   F8           MOV       R0,A
   \   000012   EA           MOV       A,R2
   \   000013   28           ADD       A,R0
   \   000014   F8           MOV       R0,A
   \   000015   E4           CLR       A
   \   000016   3B           ADDC      A,R3
   \   000017   F9           MOV       R1,A
   \   000018   8882         MOV       DPL,R0
   \   00001A   8983         MOV       DPH,R1
   \   00001C   E0           MOVX      A,@DPTR
   \   00001D   F5..         MOV       ?V1,A
    396              pData[i++] = pData[j];
   \   00001F   AC..         MOV       R4,?V0
   \   000021   EA           MOV       A,R2
   \   000022   2C           ADD       A,R4
   \   000023   FC           MOV       R4,A
   \   000024   E4           CLR       A
   \   000025   3B           ADDC      A,R3
   \   000026   FD           MOV       R5,A
   \   000027   8C82         MOV       DPL,R4
   \   000029   8D83         MOV       DPH,R5
   \   00002B   E0           MOVX      A,@DPTR
   \   00002C   8882         MOV       DPL,R0
   \   00002E   8983         MOV       DPH,R1
   \   000030   F0           MOVX      @DPTR,A
   \   000031   0F           INC       R7
    397              pData[j--] = temp;
   \   000032   8C82         MOV       DPL,R4
   \   000034   8D83         MOV       DPH,R5
   \   000036   E5..         MOV       A,?V1
   \   000038   F0           MOVX      @DPTR,A
   \   000039   15..         DEC       ?V0
    398            }
   \   00003B   1E           DEC       R6
   \   00003C   1E           DEC       R6
   \                     ??MT_ReverseBytes_0:
   \   00003D   EE           MOV       A,R6
   \   00003E   C3           CLR       C
   \   00003F   9402         SUBB      A,#0x2
   \   000041   50CD         JNC       ??MT_ReverseBytes_1
    399          }
   \   000043   7F03         MOV       R7,#0x3
   \   000045   02....       LJMP      ?BANKED_LEAVE_XDATA
    400          
    401          
    402          /***************************************************************************************************
    403           * @fn      MT_Word2Buf
    404           *
    405           * @brief   Copy a uint16 array to a byte array, little endian.
    406           *
    407           * @param   pBuf - byte array
    408           * @param   pWord - uint16 array
    409           * @param   len - length of uint16 array
    410           *
    411           * @return  pointer to end of byte array
    412           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    413          uint8 *MT_Word2Buf( uint8 *pBuf, uint16 *pWord, uint8 len )
   \                     MT_Word2Buf:
    414          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   8024         SJMP      ??MT_Word2Buf_0
    415            while ( len-- > 0 )
    416            {
    417              *pBuf++ = LO_UINT16( *pWord );
   \                     ??MT_Word2Buf_1:
   \   000007   8C82         MOV       DPL,R4
   \   000009   8D83         MOV       DPH,R5
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   8A82         MOV       DPL,R2
   \   00000E   8B83         MOV       DPH,R3
   \   000010   F0           MOVX      @DPTR,A
    418              *pBuf++ = HI_UINT16( *pWord );
   \   000011   8C82         MOV       DPL,R4
   \   000013   8D83         MOV       DPH,R5
   \   000015   A3           INC       DPTR
   \   000016   E0           MOVX      A,@DPTR
   \   000017   8A82         MOV       DPL,R2
   \   000019   8B83         MOV       DPH,R3
   \   00001B   A3           INC       DPTR
   \   00001C   F0           MOVX      @DPTR,A
   \   00001D   EA           MOV       A,R2
   \   00001E   2402         ADD       A,#0x2
   \   000020   FA           MOV       R2,A
   \   000021   5001         JNC       ??MT_Word2Buf_2
   \   000023   0B           INC       R3
    419              pWord++;
   \                     ??MT_Word2Buf_2:
   \   000024   EC           MOV       A,R4
   \   000025   2402         ADD       A,#0x2
   \   000027   FC           MOV       R4,A
   \   000028   5001         JNC       ??MT_Word2Buf_0
   \   00002A   0D           INC       R5
    420            }
   \                     ??MT_Word2Buf_0:
   \   00002B   E9           MOV       A,R1
   \   00002C   F8           MOV       R0,A
   \   00002D   74FF         MOV       A,#-0x1
   \   00002F   28           ADD       A,R0
   \   000030   F9           MOV       R1,A
   \   000031   04           INC       A
   \   000032   70D3         JNZ       ??MT_Word2Buf_1
    421          
    422            return pBuf;
   \   000034   02....       LJMP      ?Subroutine0 & 0xFFFF
    423          }
    424          #if !defined(NONWK)
    425          /***************************************************************************************************
    426           * @fn      MT_BuildEndpointDesc
    427           *
    428           * @brief   Build endpoint descriptor and simple descriptor structure from incoming buffer
    429           *
    430           * @param   pBuf - byte array
    431           *
    432           * @return  epDesc - pointer to the endpoint descriptor
    433           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    434          uint8 MT_BuildEndpointDesc( uint8 *pBuf, void *param )
   \                     MT_BuildEndpointDesc:
    435          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   8C..         MOV       ?V2,R4
   \   00000B   8D..         MOV       ?V3,R5
    436            uint8 i;
    437            uint8 ret = ZSuccess;
   \   00000D   75..00       MOV       ?V6,#0x0
    438            endPointDesc_t *epDesc;
    439          
    440            epDesc = (endPointDesc_t *)param;
    441            /* check if this endpoint is already registered */
    442            if ( afFindEndPointDesc( *pBuf ) != NULL )
   \   000010                ; Setup parameters for call to function afFindEndPointDesc
   \   000010   8E82         MOV       DPL,R6
   \   000012   8F83         MOV       DPH,R7
   \   000014   E0           MOVX      A,@DPTR
   \   000015   F9           MOV       R1,A
   \   000016   12....       LCALL     `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
   \   000019   8B..         MOV       ?V1,R3
   \   00001B   EA           MOV       A,R2
   \   00001C   45..         ORL       A,?V1
   \   00001E   6006         JZ        ??MT_BuildEndpointDesc_0
    443            {
    444              ret = ZApsDuplicateEntry;
   \   000020   75..B8       MOV       ?V6,#-0x48
   \   000023   02....       LJMP      ??MT_BuildEndpointDesc_1 & 0xFFFF
    445            }
    446            else if ( epDesc )
   \                     ??MT_BuildEndpointDesc_0:
   \   000026   E5..         MOV       A,?V2
   \   000028   45..         ORL       A,?V3
   \   00002A   7003         JNZ       $+5
   \   00002C   02....       LJMP      ??MT_BuildEndpointDesc_1 & 0xFFFF
    447            {
    448              epDesc->endPoint = *pBuf;
   \   00002F   8E82         MOV       DPL,R6
   \   000031   8F83         MOV       DPH,R7
   \   000033   E0           MOVX      A,@DPTR
   \   000034   85..82       MOV       DPL,?V2
   \   000037   85..83       MOV       DPH,?V3
   \   00003A   F0           MOVX      @DPTR,A
    449          
    450              /* Ignore the latency reqs */
    451              epDesc->latencyReq = noLatencyReqs;
   \   00003B   A3           INC       DPTR
   \   00003C   A3           INC       DPTR
   \   00003D   A3           INC       DPTR
   \   00003E   A3           INC       DPTR
   \   00003F   A3           INC       DPTR
   \   000040   E4           CLR       A
   \   000041   F0           MOVX      @DPTR,A
    452          
    453              /* allocate memory for the simple descriptor */
    454              epDesc->simpleDesc = (SimpleDescriptionFormat_t *) osal_mem_alloc(sizeof(SimpleDescriptionFormat_t));
   \   000042                ; Setup parameters for call to function osal_mem_alloc
   \   000042   7A0C         MOV       R2,#0xc
   \   000044   FB           MOV       R3,A
   \   000045   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000048   8A..         MOV       ?V0,R2
   \   00004A   8B..         MOV       ?V1,R3
   \   00004C   A8..         MOV       R0,?V0
   \   00004E   A9..         MOV       R1,?V1
   \   000050   E5..         MOV       A,?V2
   \   000052   2403         ADD       A,#0x3
   \   000054   F5..         MOV       ?V0,A
   \   000056   E4           CLR       A
   \   000057   35..         ADDC      A,?V3
   \   000059   F5..         MOV       ?V1,A
   \   00005B   85..82       MOV       DPL,?V0
   \   00005E   F583         MOV       DPH,A
   \   000060   E8           MOV       A,R0
   \   000061   F0           MOVX      @DPTR,A
   \   000062   A3           INC       DPTR
   \   000063   E9           MOV       A,R1
   \   000064   F0           MOVX      @DPTR,A
    455              if (epDesc->simpleDesc)
   \   000065   E8           MOV       A,R0
   \   000066   49           ORL       A,R1
   \   000067   7003         JNZ       $+5
   \   000069   02....       LJMP      ??MT_BuildEndpointDesc_2 & 0xFFFF
    456              {
    457                /* Endpoint */
    458                epDesc->simpleDesc->EndPoint = *pBuf++;
   \   00006C   8E82         MOV       DPL,R6
   \   00006E   8F83         MOV       DPH,R7
   \   000070   E0           MOVX      A,@DPTR
   \   000071   C0E0         PUSH      A
   \   000073   12....       LCALL     ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   000076   D0E0         POP       A
   \   000078   12....       LCALL     ?Subroutine2 & 0xFFFF
    459          
    460                /* AppProfId */
    461                epDesc->simpleDesc->AppProfId = BUILD_UINT16(pBuf[0], pBuf[1]);
   \                     ??CrossCallReturnLabel_2:
   \   00007B   12....       LCALL     ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   00007E   EA           MOV       A,R2
   \   00007F   F0           MOVX      @DPTR,A
   \   000080   A3           INC       DPTR
   \   000081   EB           MOV       A,R3
   \   000082   F0           MOVX      @DPTR,A
    462                pBuf += sizeof(uint16);
   \   000083   EE           MOV       A,R6
   \   000084   2402         ADD       A,#0x2
   \   000086   FE           MOV       R6,A
   \   000087   5001         JNC       ??MT_BuildEndpointDesc_3
   \   000089   0F           INC       R7
    463          
    464                /* AppDeviceId */
    465                epDesc->simpleDesc->AppDeviceId = BUILD_UINT16(pBuf[0],pBuf[1]);
   \                     ??MT_BuildEndpointDesc_3:
   \   00008A   8E82         MOV       DPL,R6
   \   00008C   8F83         MOV       DPH,R7
   \   00008E   12....       LCALL     ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   000091   A3           INC       DPTR
   \   000092   A3           INC       DPTR
   \   000093   EA           MOV       A,R2
   \   000094   F0           MOVX      @DPTR,A
   \   000095   A3           INC       DPTR
   \   000096   EB           MOV       A,R3
   \   000097   12....       LCALL     ?Subroutine13 & 0xFFFF
    466                pBuf += sizeof(uint16);
    467          
    468                /* AppDevVer */
    469                epDesc->simpleDesc->AppDevVer = (*pBuf++) & AF_APP_DEV_VER_MASK ;
   \                     ??CrossCallReturnLabel_18:
   \   00009A   A3           INC       DPTR
   \   00009B   E0           MOVX      A,@DPTR
   \   00009C   540F         ANL       A,#0xf
   \   00009E   FA           MOV       R2,A
   \   00009F   85..82       MOV       DPL,?V0
   \   0000A2   85..83       MOV       DPH,?V1
   \   0000A5   E0           MOVX      A,@DPTR
   \   0000A6   2405         ADD       A,#0x5
   \   0000A8   F8           MOV       R0,A
   \   0000A9   A3           INC       DPTR
   \   0000AA   E0           MOVX      A,@DPTR
   \   0000AB   3400         ADDC      A,#0x0
   \   0000AD   F9           MOV       R1,A
   \   0000AE   8882         MOV       DPL,R0
   \   0000B0   8983         MOV       DPH,R1
   \   0000B2   E0           MOVX      A,@DPTR
   \   0000B3   54F0         ANL       A,#0xf0
   \   0000B5   4A           ORL       A,R2
   \   0000B6   12....       LCALL     ?Subroutine13 & 0xFFFF
    470          
    471                /* LatencyReq */
    472                pBuf++;
    473          
    474                /* AppNumInClusters */
    475                epDesc->simpleDesc->AppNumInClusters = *pBuf++;
   \                     ??CrossCallReturnLabel_19:
   \   0000B9   A3           INC       DPTR
   \   0000BA   A3           INC       DPTR
   \   0000BB   A3           INC       DPTR
   \   0000BC   E0           MOVX      A,@DPTR
   \   0000BD   C0E0         PUSH      A
   \   0000BF   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   0000C2   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   0000C5   D0E0         POP       A
   \   0000C7   F0           MOVX      @DPTR,A
   \   0000C8   EE           MOV       A,R6
   \   0000C9   2405         ADD       A,#0x5
   \   0000CB   FE           MOV       R6,A
   \   0000CC   5001         JNC       ??MT_BuildEndpointDesc_4
   \   0000CE   0F           INC       R7
    476                if (epDesc->simpleDesc->AppNumInClusters)
   \                     ??MT_BuildEndpointDesc_4:
   \   0000CF   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   0000D2   6040         JZ        ??MT_BuildEndpointDesc_5
    477                {
    478                  epDesc->simpleDesc->pAppInClusterList = (uint16 *)
    479                            osal_mem_alloc((epDesc->simpleDesc->AppNumInClusters)*sizeof(uint16));
   \   0000D4                ; Setup parameters for call to function osal_mem_alloc
   \   0000D4   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   0000D7   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   0000DA   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   0000DD   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   0000E0   2407         ADD       A,#0x7
   \   0000E2   12....       LCALL     ?Subroutine1 & 0xFFFF
    480                  if ( epDesc->simpleDesc->pAppInClusterList )
   \                     ??CrossCallReturnLabel_0:
   \   0000E5   2407         ADD       A,#0x7
   \   0000E7   12....       LCALL     ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   0000EA   6025         JZ        ??MT_BuildEndpointDesc_6
    481                  {
    482                    for (i=0; i<(epDesc->simpleDesc->AppNumInClusters); i++)
   \   0000EC   7800         MOV       R0,#0x0
   \                     ??MT_BuildEndpointDesc_7:
   \   0000EE   85..82       MOV       DPL,?V2
   \   0000F1   85..83       MOV       DPH,?V3
   \   0000F4   A3           INC       DPTR
   \   0000F5   A3           INC       DPTR
   \   0000F6   A3           INC       DPTR
   \   0000F7   E0           MOVX      A,@DPTR
   \   0000F8   F9           MOV       R1,A
   \   0000F9   A3           INC       DPTR
   \   0000FA   E0           MOVX      A,@DPTR
   \   0000FB   C9           XCH       A,R1
   \   0000FC   2406         ADD       A,#0x6
   \   0000FE   12....       LCALL     ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   000101   5011         JNC       ??MT_BuildEndpointDesc_5
    483                    {
    484                      epDesc->simpleDesc->pAppInClusterList[i] = BUILD_UINT16(*pBuf, *(pBuf+1));
   \   000103   12....       LCALL     ?Subroutine4 & 0xFFFF
    485                      pBuf += 2;
    486                    }
   \                     ??CrossCallReturnLabel_6:
   \   000106   2407         ADD       A,#0x7
   \   000108   12....       LCALL     ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   00010B   5001         JNC       ??MT_BuildEndpointDesc_8
   \   00010D   0F           INC       R7
   \                     ??MT_BuildEndpointDesc_8:
   \   00010E   08           INC       R0
   \   00010F   80DD         SJMP      ??MT_BuildEndpointDesc_7
    487                  }
    488                  else
    489                  {
    490                    ret = ZMemError;
   \                     ??MT_BuildEndpointDesc_6:
   \   000111   75..10       MOV       ?V6,#0x10
    491                  }
    492                }
    493          
    494                /* AppNumOutClusters */
    495                epDesc->simpleDesc->AppNumOutClusters = *pBuf++;
   \                     ??MT_BuildEndpointDesc_5:
   \   000114   8E82         MOV       DPL,R6
   \   000116   8F83         MOV       DPH,R7
   \   000118   E0           MOVX      A,@DPTR
   \   000119   C0E0         PUSH      A
   \   00011B   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   00011E   12....       LCALL     ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   000121   D0E0         POP       A
   \   000123   12....       LCALL     ?Subroutine2 & 0xFFFF
    496                if (epDesc->simpleDesc->AppNumOutClusters)
   \                     ??CrossCallReturnLabel_3:
   \   000126   12....       LCALL     ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   000129   6042         JZ        ??MT_BuildEndpointDesc_9
    497                {
    498                  epDesc->simpleDesc->pAppOutClusterList = (uint16 *)
    499                                    osal_mem_alloc((epDesc->simpleDesc->AppNumOutClusters)*sizeof(uint16));
   \   00012B                ; Setup parameters for call to function osal_mem_alloc
   \   00012B   12....       LCALL     ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   00012E   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   000131   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000134   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   000137   240A         ADD       A,#0xa
   \   000139   12....       LCALL     ?Subroutine1 & 0xFFFF
    500                  if (epDesc->simpleDesc->pAppOutClusterList)
   \                     ??CrossCallReturnLabel_1:
   \   00013C   240A         ADD       A,#0xa
   \   00013E   12....       LCALL     ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   000141   6025         JZ        ??MT_BuildEndpointDesc_10
    501                  {
    502                    for (i=0; i<(epDesc->simpleDesc->AppNumOutClusters); i++)
   \   000143   7800         MOV       R0,#0x0
   \                     ??MT_BuildEndpointDesc_11:
   \   000145   85..82       MOV       DPL,?V2
   \   000148   85..83       MOV       DPH,?V3
   \   00014B   A3           INC       DPTR
   \   00014C   A3           INC       DPTR
   \   00014D   A3           INC       DPTR
   \   00014E   E0           MOVX      A,@DPTR
   \   00014F   F9           MOV       R1,A
   \   000150   A3           INC       DPTR
   \   000151   E0           MOVX      A,@DPTR
   \   000152   C9           XCH       A,R1
   \   000153   2409         ADD       A,#0x9
   \   000155   12....       LCALL     ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   000158   5013         JNC       ??MT_BuildEndpointDesc_9
    503                    {
    504                      epDesc->simpleDesc->pAppOutClusterList[i] = BUILD_UINT16(*pBuf, *(pBuf+1));
   \   00015A   12....       LCALL     ?Subroutine4 & 0xFFFF
    505                      pBuf += 2;
    506                    }
   \                     ??CrossCallReturnLabel_7:
   \   00015D   240A         ADD       A,#0xa
   \   00015F   12....       LCALL     ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   000162   5001         JNC       ??MT_BuildEndpointDesc_12
   \   000164   0F           INC       R7
   \                     ??MT_BuildEndpointDesc_12:
   \   000165   08           INC       R0
   \   000166   80DD         SJMP      ??MT_BuildEndpointDesc_11
    507                  }
    508                  else
    509                  {
    510                    ret = ZMemError;
   \                     ??MT_BuildEndpointDesc_10:
   \   000168   75..10       MOV       ?V6,#0x10
   \   00016B   8006         SJMP      ??MT_BuildEndpointDesc_13
    511                  }
    512                }
    513          
    514                /* if any list cannot be allocated...free all */
    515                if ( ret == ZMemError )
   \                     ??MT_BuildEndpointDesc_9:
   \   00016D   7410         MOV       A,#0x10
   \   00016F   65..         XRL       A,?V6
   \   000171   7055         JNZ       ??MT_BuildEndpointDesc_1
    516                {
    517                  if (epDesc->simpleDesc->pAppInClusterList)
   \                     ??MT_BuildEndpointDesc_13:
   \   000173   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   000176   F8           MOV       R0,A
   \   000177   A3           INC       DPTR
   \   000178   E0           MOVX      A,@DPTR
   \   000179   F9           MOV       R1,A
   \   00017A   E8           MOV       A,R0
   \   00017B   49           ORL       A,R1
   \   00017C   600A         JZ        ??MT_BuildEndpointDesc_14
    518                  {
    519                    osal_mem_free(epDesc->simpleDesc->pAppInClusterList);
   \   00017E                ; Setup parameters for call to function osal_mem_free
   \   00017E   12....       LCALL     ?Subroutine8 & 0xFFFF
    520                  }
   \                     ??CrossCallReturnLabel_13:
   \   000181   FA           MOV       R2,A
   \   000182   A3           INC       DPTR
   \   000183   E0           MOVX      A,@DPTR
   \   000184   FB           MOV       R3,A
   \   000185   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    521          
    522                  if (epDesc->simpleDesc->AppNumOutClusters)
   \                     ??MT_BuildEndpointDesc_14:
   \   000188   85..82       MOV       DPL,?V2
   \   00018B   85..83       MOV       DPH,?V3
   \   00018E   A3           INC       DPTR
   \   00018F   A3           INC       DPTR
   \   000190   A3           INC       DPTR
   \   000191   12....       LCALL     ??Subroutine19_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   000194   601C         JZ        ??MT_BuildEndpointDesc_15
    523                  {
    524                    osal_mem_free(epDesc->simpleDesc->pAppOutClusterList);
   \   000196                ; Setup parameters for call to function osal_mem_free
   \   000196   85..82       MOV       DPL,?V2
   \   000199   85..83       MOV       DPH,?V3
   \   00019C   A3           INC       DPTR
   \   00019D   A3           INC       DPTR
   \   00019E   A3           INC       DPTR
   \   00019F   12....       LCALL     ??Subroutine18_0 & 0xFFFF
    525                  }
   \                     ??CrossCallReturnLabel_28:
   \   0001A2   240A         ADD       A,#0xa
   \   0001A4   F582         MOV       DPL,A
   \   0001A6   E4           CLR       A
   \   0001A7   38           ADDC      A,R0
   \   0001A8   F583         MOV       DPH,A
   \   0001AA   E0           MOVX      A,@DPTR
   \   0001AB   FA           MOV       R2,A
   \   0001AC   A3           INC       DPTR
   \   0001AD   E0           MOVX      A,@DPTR
   \   0001AE   FB           MOV       R3,A
   \   0001AF   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    526          
    527                  osal_mem_free(epDesc->simpleDesc);
   \                     ??MT_BuildEndpointDesc_15:
   \   0001B2                ; Setup parameters for call to function osal_mem_free
   \   0001B2   85..82       MOV       DPL,?V2
   \   0001B5   85..83       MOV       DPH,?V3
   \   0001B8   A3           INC       DPTR
   \   0001B9   A3           INC       DPTR
   \   0001BA   A3           INC       DPTR
   \   0001BB   E0           MOVX      A,@DPTR
   \   0001BC   FA           MOV       R2,A
   \   0001BD   A3           INC       DPTR
   \   0001BE   E0           MOVX      A,@DPTR
   \   0001BF   FB           MOV       R3,A
   \   0001C0   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0001C3   8003         SJMP      ??MT_BuildEndpointDesc_1
    528                }
    529              }
    530              else
    531              {
    532                ret = ZMemError;
   \                     ??MT_BuildEndpointDesc_2:
   \   0001C5   75..10       MOV       ?V6,#0x10
    533              }
    534            }
    535          
    536            return ret;
   \                     ??MT_BuildEndpointDesc_1:
   \   0001C8   A9..         MOV       R1,?V6
   \   0001CA   7F07         MOV       R7,#0x7
   \   0001CC   02....       LJMP      ?BANKED_LEAVE_XDATA
    537          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003   39           ADDC      A,R1
   \   000004   F583         MOV       DPH,A
   \   000006   E0           MOVX      A,@DPTR
   \   000007   F9           MOV       R1,A
   \   000008   E8           MOV       A,R0
   \   000009   C3           CLR       C
   \   00000A   99           SUBB      A,R1
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003   38           ADDC      A,R0
   \   000004   F583         MOV       DPH,A
   \   000006   E0           MOVX      A,@DPTR
   \   000007   F8           MOV       R0,A
   \   000008   A3           INC       DPTR
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   F9           MOV       R1,A
   \   00000B   E8           MOV       A,R0
   \   00000C   49           ORL       A,R1
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   85..82       MOV       DPL,?V0
   \   000003   85..83       MOV       DPH,?V1
   \   000006                REQUIRE ??Subroutine18_0
   \   000006                ; // Fall through to label ??Subroutine18_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine18_0:
   \   000000   12....       LCALL     ??Subroutine20_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_41:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   85..82       MOV       DPL,?V2
   \   000003   85..83       MOV       DPH,?V3
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   12....       LCALL     ??Subroutine20_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   00000C   2407         ADD       A,#0x7
   \   00000E   F582         MOV       DPL,A
   \   000010   E4           CLR       A
   \   000011   38           ADDC      A,R0
   \   000012   F583         MOV       DPH,A
   \   000014   E0           MOVX      A,@DPTR
   \   000015   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   12....       LCALL     ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   000003   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   000006   E0           MOVX      A,@DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   2406         ADD       A,#0x6
   \   000002   F582         MOV       DPL,A
   \   000004   E4           CLR       A
   \   000005   38           ADDC      A,R0
   \   000006   F583         MOV       DPH,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   85..82       MOV       DPL,?V0
   \   000003   85..83       MOV       DPH,?V1
   \   000006                REQUIRE ??Subroutine19_0
   \   000006                ; // Fall through to label ??Subroutine19_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine19_0:
   \   000000   12....       LCALL     ??Subroutine20_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   000003   12....       LCALL     ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_37:
   \   000006   E0           MOVX      A,@DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   2409         ADD       A,#0x9
   \   000002   F582         MOV       DPL,A
   \   000004   E4           CLR       A
   \   000005   38           ADDC      A,R0
   \   000006   F583         MOV       DPH,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F8           MOV       R0,A
   \   000005   E4           CLR       A
   \   000006   C8           XCH       A,R0
   \   000007   F9           MOV       R1,A
   \   000008   EA           MOV       A,R2
   \   000009   28           ADD       A,R0
   \   00000A   E4           CLR       A
   \   00000B   39           ADDC      A,R1
   \   00000C   FB           MOV       R3,A
   \   00000D   12....       LCALL     ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   000010   A3           INC       DPTR
   \   000011   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   85..82       MOV       DPL,?V0
   \   000003   85..83       MOV       DPH,?V1
   \   000006   E0           MOVX      A,@DPTR
   \   000007   F8           MOV       R0,A
   \   000008   A3           INC       DPTR
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   F583         MOV       DPH,A
   \   00000C   8882         MOV       DPL,R0
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   8E82         MOV       DPL,R6
   \   000002   8F83         MOV       DPH,R7
   \   000004   E0           MOVX      A,@DPTR
   \   000005   FC           MOV       R4,A
   \   000006   A3           INC       DPTR
   \   000007   E0           MOVX      A,@DPTR
   \   000008   FA           MOV       R2,A
   \   000009   E4           CLR       A
   \   00000A   CA           XCH       A,R2
   \   00000B   FB           MOV       R3,A
   \   00000C   EC           MOV       A,R4
   \   00000D   2A           ADD       A,R2
   \   00000E   E4           CLR       A
   \   00000F   3B           ADDC      A,R3
   \   000010   FD           MOV       R5,A
   \   000011   E8           MOV       A,R0
   \   000012   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   000015   85..82       MOV       DPL,?V2
   \   000018   85..83       MOV       DPH,?V3
   \   00001B   A3           INC       DPTR
   \   00001C   A3           INC       DPTR
   \   00001D   A3           INC       DPTR
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   F9           MOV       R1,A
   \   000020   A3           INC       DPTR
   \   000021   E0           MOVX      A,@DPTR
   \   000022   C9           XCH       A,R1
   \   000023   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   25E0         ADD       A,0xE0 /* A   */
   \   000002   FA           MOV       R2,A
   \   000003   E4           CLR       A
   \   000004   33           RLC       A
   \   000005   FB           MOV       R3,A
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003   39           ADDC      A,R1
   \   000004   F583         MOV       DPH,A
   \   000006   E0           MOVX      A,@DPTR
   \   000007   2A           ADD       A,R2
   \   000008   F9           MOV       R1,A
   \   000009   A3           INC       DPTR
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   3B           ADDC      A,R3
   \   00000C   8982         MOV       DPL,R1
   \   00000E   F583         MOV       DPH,A
   \   000010   EC           MOV       A,R4
   \   000011   F0           MOVX      @DPTR,A
   \   000012   A3           INC       DPTR
   \   000013   ED           MOV       A,R5
   \   000014   F0           MOVX      @DPTR,A
   \   000015   EE           MOV       A,R6
   \   000016   2402         ADD       A,#0x2
   \   000018   FE           MOV       R6,A
   \   000019   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   12....       LCALL     ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   000003   AE82         MOV       R6,DPL
   \   000005   AF83         MOV       R7,DPH
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8E82         MOV       DPL,R6
   \   000003   8F83         MOV       DPH,R7
   \   000005   A3           INC       DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003   38           ADDC      A,R0
   \   000004   F583         MOV       DPH,A
   \   000006   EA           MOV       A,R2
   \   000007   F0           MOVX      @DPTR,A
   \   000008   A3           INC       DPTR
   \   000009   EB           MOV       A,R3
   \   00000A   F0           MOVX      @DPTR,A
   \   00000B   12....       LCALL     ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   85..82       MOV       DPL,?V0
   \   000003   85..83       MOV       DPH,?V1
   \   000006                REQUIRE ??Subroutine20_0
   \   000006                ; // Fall through to label ??Subroutine20_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine20_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   C8           XCH       A,R0
   \   000005   22           RET

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_Init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_BuildSPIMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_BuildSPIMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_BuildAndSendZToolResponse::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_BuildAndSendZToolResponse

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ProcessIncoming::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ProcessIncoming

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MTProcessAppRspMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MTProcessAppRspMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ReverseBytes::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ReverseBytes

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_Word2Buf::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_Word2Buf

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_BuildEndpointDesc::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_BuildEndpointDesc
    538          #endif
    539          /***************************************************************************************************
    540          ***************************************************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0      9   MTProcessAppRspMsg
        0      9   -> MT_BuildAndSendZToolResponse
      0     27   MT_BuildAndSendZToolResponse
        0     18   -> MT_BuildSPIMsg
        0     16   -> MT_TransportAlloc
        0     16   -> MT_TransportSend
      1     15   MT_BuildEndpointDesc
        0     15   -> afFindEndPointDesc
        0     15   -> osal_mem_alloc
        0     15   -> osal_mem_free
      1     35   MT_BuildSPIMsg
        0     17   -> osal_memcpy
      0      9   MT_Init
        0      9   -> MT_SysResetInd
      3      3   MT_ProcessIncoming
        2      3   -> MT_BuildAndSendZToolResponse
      1     11   MT_ReverseBytes
      1      9   MT_Word2Buf


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??Subroutine18_0
       8  ??Subroutine19_0
       6  ??Subroutine20_0
       5  ?Subroutine0
      15  ?Subroutine1
      14  ?Subroutine10
      12  ?Subroutine11
       6  ?Subroutine12
       7  ?Subroutine13
       7  ?Subroutine14
      15  ?Subroutine15
       9  ?Subroutine16
       9  ?Subroutine17
       8  ?Subroutine2
      26  ?Subroutine3
      36  ?Subroutine4
      18  ?Subroutine5
       6  ?Subroutine6
       8  ?Subroutine7
      22  ?Subroutine8
       6  ?Subroutine9
      21  MTProcessAppRspMsg
       6  MTProcessAppRspMsg::?relay
      73  MT_BuildAndSendZToolResponse
       6  MT_BuildAndSendZToolResponse::?relay
     463  MT_BuildEndpointDesc
       6  MT_BuildEndpointDesc::?relay
      81  MT_BuildSPIMsg
       6  MT_BuildSPIMsg::?relay
      22  MT_Init
       6  MT_Init::?relay
     167  MT_ProcessIncoming
       6  MT_ProcessIncoming::?relay
      72  MT_ReverseBytes
       6  MT_ReverseBytes::?relay
       1  MT_TaskID
      55  MT_Word2Buf
       6  MT_Word2Buf::?relay
       1  debugCompId
       1  debugThreshold
      22  mtProcessIncoming
       2  save_cmd

 
 1 201 bytes in segment BANKED_CODE
    48 bytes in segment BANK_RELAYS
    27 bytes in segment XDATA_Z
 
    48 bytes of CODE     memory
 1 201 bytes of HUGECODE memory
    27 bytes of XDATA    memory

Errors: none
Warnings: none
