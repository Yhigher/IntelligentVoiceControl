###############################################################################
#
# IAR C/C++ Compiler V10.10.1.4655 for 8051               29/Apr/2024  11:26:05
# Copyright 2004-2017 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Components\stack\zdo\ZDApp.c
#    Command line       =  
#        -f C:\Users\Ñî\AppData\Local\Temp\EW5C95.tmp
#        (D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Components\stack\zdo\ZDApp.c
#        -D xNWK_AUTO_POLL -D ZTOOL_P1 -D xMT_TASK -D xMT_SYS_FUNC -D
#        xMT_ZDO_FUNC -D xLCD_SUPPORTED=DEBUG -D xPOWER_SAVING -lC
#        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\CC2530DB\EndDeviceEB\List
#        -lA
#        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\CC2530DB\EndDeviceEB\List
#        --diag_suppress Pe001,Pa010 -o
#        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\CC2530DB\EndDeviceEB\Obj
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 8 -f
#        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f
#        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0x520
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=TRUE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440) -I
#        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\CC2530DB\
#        -I
#        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\CC2530DB\..\Source\
#        -I
#        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\CC2530DB\..\..\..\ZMain\TI2530DB\
#        -I
#        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\CC2530DB\..\..\..\..\..\Components\hal\include\
#        -I
#        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
#        -I
#        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\CC2530DB\..\..\..\..\..\Components\mac\include\
#        -I
#        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\CC2530DB\..\..\..\..\..\Components\mac\high_level\
#        -I
#        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
#        -I
#        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
#        -I
#        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\CC2530DB\..\..\..\..\..\Components\mt\
#        -I
#        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\CC2530DB\..\..\..\..\..\Components\osal\include\
#        -I
#        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\CC2530DB\..\..\..\..\..\Components\osal\mcu\ccsoc\
#        -I
#        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\CC2530DB\..\..\..\..\..\Components\services\saddr\
#        -I
#        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\CC2530DB\..\..\..\..\..\Components\services\sdata\
#        -I
#        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\CC2530DB\..\..\..\..\..\Components\stack\af\
#        -I
#        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\CC2530DB\..\..\..\..\..\Components\stack\nwk\
#        -I
#        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\CC2530DB\..\..\..\..\..\Components\stack\sapi\
#        -I
#        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\CC2530DB\..\..\..\..\..\Components\stack\sec\
#        -I
#        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\CC2530DB\..\..\..\..\..\Components\stack\sys\
#        -I
#        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\CC2530DB\..\..\..\..\..\Components\stack\zdo\
#        -I
#        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\CC2530DB\..\..\..\..\..\Components\zmac\
#        -I
#        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
#        -Ohz --require_prototypes --no_code_motion)
#    Locale             =  Chinese (Simplified)_China.936
#    List file          =  
#        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\CC2530DB\EndDeviceEB\List\ZDApp.lst
#    Object file        =  
#        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\CC2530DB\EndDeviceEB\Obj\ZDApp.r51
#
###############################################################################

D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Components\stack\zdo\ZDApp.c
      1          /**************************************************************************************************
      2            Filename:       ZDApp.c
      3            Revised:        $Date: 2010-09-17 16:25:30 -0700 (Fri, 17 Sep 2010) $
      4            Revision:       $Revision: 23835 $
      5          
      6            Description:    This file contains the interface to the Zigbee Device Application. This is the
      7                            Application part that the user can change. This also contains the Task functions.
      8          
      9          
     10            Copyright 2004-2010 Texas Instruments Incorporated. All rights reserved.
     11          
     12            IMPORTANT: Your use of this Software is limited to those specific rights
     13            granted under the terms of a software license agreement between the user
     14            who downloaded the software, his/her employer (which must be your employer)
     15            and Texas Instruments Incorporated (the "License").  You may not use this
     16            Software unless you agree to abide by the terms of the License. The License
     17            limits your use, and you acknowledge, that the Software may not be modified,
     18            copied or distributed unless embedded on a Texas Instruments microcontroller
     19            or used solely and exclusively in conjunction with a Texas Instruments radio
     20            frequency transceiver, which is integrated into your product.  Other than for
     21            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     22            works of, modify, distribute, perform, display or sell this Software and/or
     23            its documentation for any purpose.
     24          
     25            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     26            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     27            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE, 
     28            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     29            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     30            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     31            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     32            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     33            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     34            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     35            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     36          
     37            Should you have any questions regarding your right to use this Software,
     38            contact Texas Instruments Incorporated at www.TI.com. 
     39          **************************************************************************************************/
     40          
     41          /*********************************************************************
     42           * INCLUDES
     43           */
     44          
     45          #include "ZComDef.h"
     46          #include "ZMac.h"
     47          #include "OSAL.h"
     48          #include "OSAL_Tasks.h"
     49          #include "OSAL_PwrMgr.h"
     50          #include "OSAL_Nv.h"
     51          #include "AF.h"
     52          #include "APSMEDE.h"
     53          #include "NLMEDE.h"
     54          #include "AddrMgr.h"
     55          #include "ZDProfile.h"
     56          #include "ZDObject.h"
     57          #include "ZDConfig.h"
     58          #include "ZDSecMgr.h"
     59          #include "ZDApp.h"
     60          #include "DebugTrace.h"
     61          #include "nwk_util.h"
     62          #include "OnBoard.h"
     63          #include "ZGlobals.h"
     64          #include "ZDNwkMgr.h"
     65          #include "rtg.h"
     66          
     67          #include "ssp.h"
     68          
     69          /* HAL */
     70          #include "hal_led.h"
     71          #include "hal_lcd.h"
     72          #include "hal_key.h"
     73          
     74          #if defined( MT_MAC_FUNC ) || defined( MT_MAC_CB_FUNC )
     75            #error "ERROR! MT_MAC functionalities should be disabled on ZDO devices"
     76          #endif
     77          
     78          /*********************************************************************
     79           * CONSTANTS
     80           */
     81          
     82          #if !defined( NWK_START_DELAY )
     83            #define NWK_START_DELAY             100   // in milliseconds
     84          #endif
     85          
     86          // Init ZDO, but hold and wait for application to start the joining or 
     87          // forming network
     88          #define ZDO_INIT_HOLD_NWK_START       0xFFFF  
     89          
     90          #if !defined( EXTENDED_JOINING_RANDOM_MASK )
     91            #define EXTENDED_JOINING_RANDOM_MASK 0x007F
     92          #endif
     93          
     94          #if !defined( BEACON_REQUEST_DELAY )
     95            #define BEACON_REQUEST_DELAY        100   // in milliseconds
     96          #endif
     97          
     98          #if !defined( BEACON_REQ_DELAY_MASK )
     99            #define BEACON_REQ_DELAY_MASK       0x007F
    100          #endif
    101          
    102          #define MAX_RESUME_RETRY            3
    103          
    104          #define MAX_DEVICE_UNAUTH_TIMEOUT   5000  // 5 seconds
    105          
    106          // Beacon Order Settings (see NLMEDE.h)
    107          #define DEFAULT_BEACON_ORDER        BEACON_ORDER_NO_BEACONS
    108          #define DEFAULT_SUPERFRAME_ORDER    DEFAULT_BEACON_ORDER
    109          
    110          #if !defined( MAX_NWK_FRAMECOUNTER_CHANGES )
    111            // The number of times the frame counter can change before
    112            // saving to NV
    113            #define MAX_NWK_FRAMECOUNTER_CHANGES    1000
    114          #endif
    115          
    116          // Leave control bits
    117          #define ZDAPP_LEAVE_CTRL_INIT 0
    118          #define ZDAPP_LEAVE_CTRL_SET  1
    119          #define ZDAPP_LEAVE_CTRL_RA   2
    120          
    121          // Address Manager Stub Implementation
    122          #define ZDApp_NwkWriteNVRequest AddrMgrWriteNVRequest
    123          
    124          
    125          #if !defined ZDO_NV_SAVE_RFDs
    126          #define ZDO_NV_SAVE_RFDs  TRUE
    127          #endif
    128          
    129          // Delay time before updating NWK NV data to force fewer writes during high activity.
    130          #if ZDO_NV_SAVE_RFDs
    131          #define ZDAPP_UPDATE_NWK_NV_TIME 700
    132          #else
    133          #define ZDAPP_UPDATE_NWK_NV_TIME 65000
    134          #endif
    135          
    136          /*********************************************************************
    137           * GLOBAL VARIABLES
    138           */
    139          
    140          #if defined( LCD_SUPPORTED )
    141            uint8 MatchRsps = 0;
    142          #endif
    143          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    144          uint8 zdoDiscCounter = 1;
   \                     zdoDiscCounter:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zdoDiscCounter>`
   \   000001                REQUIRE __INIT_XDATA_I
    145          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    146          zAddrType_t ZDAppNwkAddr;
   \                     ZDAppNwkAddr:
   \   000000                DS 9
   \   000009                REQUIRE __INIT_XDATA_Z
    147          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    148          uint8 zdappMgmtNwkDiscRspTransSeq;
   \                     zdappMgmtNwkDiscRspTransSeq:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    149          uint8 zdappMgmtNwkDiscReqInProgress = FALSE;
   \                     zdappMgmtNwkDiscReqInProgress:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    150          zAddrType_t zdappMgmtNwkDiscRspAddr;
   \                     zdappMgmtNwkDiscRspAddr:
   \   000000                DS 9
   \   000009                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    151          uint8 zdappMgmtNwkDiscStartIndex;
   \                     zdappMgmtNwkDiscStartIndex:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    152          uint8 zdappMgmtSavedNwkState;
   \                     zdappMgmtSavedNwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    153          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    154          uint16 nwkFrameCounterChanges = 0;
   \                     nwkFrameCounterChanges:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_I, align 1, keep-with-next
    155          uint8 continueJoining = TRUE;
   \                     continueJoining:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for continueJoining>`
   \   000001                REQUIRE __INIT_XDATA_I
    156          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    157          uint8  _tmpRejoinState;
   \                     _tmpRejoinState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    158          
    159          // The extended PanID used in ZDO layer for rejoin.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    160          uint8 ZDO_UseExtendedPANID[Z_EXTADDR_LEN];
   \                     ZDO_UseExtendedPANID:
   \   000000                DS 8
   \   000008                REQUIRE __INIT_XDATA_Z
    161          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    162          pfnZdoCb zdoCBFunc[MAX_ZDO_CB_FUNC];
   \                     zdoCBFunc:
   \   000000                DS 10
   \   00000A                REQUIRE __INIT_XDATA_Z
    163          
    164          /*********************************************************************
    165           * EXTERNAL VARIABLES
    166           */
    167          
    168          /*********************************************************************
    169           * EXTERNAL FUNCTIONS
    170           */
    171          
    172          /*********************************************************************
    173           * LOCAL FUNCTIONS
    174           */
    175          
    176          void ZDApp_NetworkStartEvt( void );
    177          void ZDApp_DeviceAuthEvt( void );
    178          void ZDApp_SaveNetworkStateEvt( void );
    179          
    180          uint8 ZDApp_ReadNetworkRestoreState( void );
    181          uint8 ZDApp_RestoreNetworkState( void );
    182          void ZDAppDetermineDeviceType( void );
    183          void ZDApp_InitUserDesc( void );
    184          void ZDAppCheckForHoldKey( void );
    185          void ZDApp_ProcessOSALMsg( osal_event_hdr_t *msgPtr );
    186          void ZDApp_ProcessNetworkJoin( void );
    187          void ZDApp_SetCoordAddress( uint8 endPoint, uint8 dstEP );
    188          void ZDApp_SaveNwkKey( void );
    189          uint8 ZDApp_RestoreNwkKey( void );
    190          networkDesc_t* ZDApp_NwkDescListProcessing(void);  
    191          
    192          void ZDApp_SecInit( uint8 state );
    193          UINT16 ZDApp_ProcessSecEvent( uint8 task_id, UINT16 events );
    194          void ZDApp_ProcessSecMsg( osal_event_hdr_t *msgPtr );
    195          
    196          void ZDApp_SendMsg( uint8 taskID, uint8 cmd, uint8 len, uint8 *buf );
    197          
    198          void ZDApp_ResetTimerStart( uint16 delay );
    199          void ZDApp_ResetTimerCancel( void );
    200          void ZDApp_LeaveCtrlInit( void );
    201          void ZDApp_LeaveCtrlSet( uint8 ra );
    202          uint8 ZDApp_LeaveCtrlBypass( void );
    203          void ZDApp_LeaveCtrlStartup( devStates_t* state, uint16* startDelay );
    204          void ZDApp_LeaveReset( uint8 ra );
    205          void ZDApp_LeaveUpdate( uint16 nwkAddr, uint8* extAddr,
    206                                  uint8 removeChildren );
    207          void ZDApp_NodeProfileSync( uint8 stackProfile );
    208          void ZDApp_ProcessMsgCBs( zdoIncomingMsg_t *inMsg );
    209          void ZDApp_RegisterCBs( void );
    210          void ZDApp_InitZdoCBFunc(void);
    211          
    212          /*********************************************************************
    213           * LOCAL VARIABLES
    214           */
    215          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    216          uint8 ZDAppTaskID;
   \                     ZDAppTaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    217          uint8 nwkStatus;
   \                     nwkStatus:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    218          endPointDesc_t *ZDApp_AutoFindMode_epDesc = (endPointDesc_t *)NULL;
   \                     ZDApp_AutoFindMode_epDesc:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    219          uint8 ZDApp_LeaveCtrl;
   \                     ZDApp_LeaveCtrl:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    220          
    221          #if defined( HOLD_AUTO_START )
    222            devStates_t devState = DEV_HOLD;
    223          #else

   \                                 In  segment XDATA_I, align 1, keep-with-next
    224            devStates_t devState = DEV_INIT;
   \                     devState:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for devState>`
   \   000001                REQUIRE __INIT_XDATA_I
    225          #endif
    226          
    227          #if ( ZG_BUILD_RTRONLY_TYPE ) || ( ZG_BUILD_ENDDEVICE_TYPE )

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    228            devStartModes_t devStartMode = MODE_JOIN;     // Assume joining
   \                     devStartMode:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    229            //devStartModes_t devStartMode = MODE_RESUME; // if already "directly joined"
    230                                  // to parent. Set to make the device do an Orphan scan.
    231          #else
    232            // Set the default to coodinator
    233            devStartModes_t devStartMode = MODE_HARD;
    234          #endif
    235          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    236          uint8 retryCnt;
   \                     retryCnt:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    237          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    238          endPointDesc_t ZDApp_epDesc =
   \                     ZDApp_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE `?<Initializer for ZDApp_epDesc>`
   \   000006                REQUIRE __INIT_XDATA_I
    239          {
    240            ZDO_EP,
    241            &ZDAppTaskID,
    242            (SimpleDescriptionFormat_t *)NULL,  // No Simple description for ZDO
    243            (afNetworkLatencyReq_t)0            // No Network Latency req
    244          };
    245          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    246          uint16 ZDApp_SavedPollRate = POLL_RATE;
   \                     ZDApp_SavedPollRate:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for ZDApp_SavedPollRate>`
   \   000002                REQUIRE __INIT_XDATA_I
    247          
    248          /*********************************************************************
    249           * @fn      ZDApp_Init
    250           *
    251           * @brief   ZDApp Initialization function.
    252           *
    253           * @param   task_id - ZDApp Task ID
    254           *
    255           * @return  None
    256           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    257          void ZDApp_Init( uint8 task_id )
   \                     ZDApp_Init:
    258          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
    259            // Save the task ID
    260            ZDAppTaskID = task_id;
   \   000006   90....       MOV       DPTR,#ZDAppTaskID
   \   000009   F0           MOVX      @DPTR,A
    261          
    262            // Initialize the ZDO global device short address storage
    263            ZDAppNwkAddr.addrMode = Addr16Bit;
   \   00000A   90....       MOV       DPTR,#ZDAppNwkAddr + 8
   \   00000D   7402         MOV       A,#0x2
   \   00000F   F0           MOVX      @DPTR,A
    264            ZDAppNwkAddr.addr.shortAddr = INVALID_NODE_ADDR;
   \   000010   90....       MOV       DPTR,#ZDAppNwkAddr
   \   000013   74FE         MOV       A,#-0x2
   \   000015   F0           MOVX      @DPTR,A
   \   000016   A3           INC       DPTR
   \   000017   04           INC       A
   \   000018   F0           MOVX      @DPTR,A
    265            (void)NLME_GetExtAddr();  // Load the saveExtAddr pointer.
   \   000019                ; Setup parameters for call to function NLME_GetExtAddr
   \   000019   12....       LCALL     `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
    266          
    267            // Check for manual "Hold Auto Start"
    268            ZDAppCheckForHoldKey();
   \   00001C                ; Setup parameters for call to function ZDAppCheckForHoldKey
   \   00001C   12....       LCALL     `??ZDAppCheckForHoldKey::?relay`; Banked call to: ZDAppCheckForHoldKey
    269          
    270            // Initialize ZDO items and setup the device - type of device to create.
    271            ZDO_Init();
   \   00001F                ; Setup parameters for call to function ZDO_Init
   \   00001F   12....       LCALL     `??ZDO_Init::?relay`; Banked call to: ZDO_Init
    272          
    273            // Register the endpoint description with the AF
    274            // This task doesn't have a Simple description, but we still need
    275            // to register the endpoint.
    276            afRegister( (endPointDesc_t *)&ZDApp_epDesc );
   \   000022                ; Setup parameters for call to function afRegister
   \   000022   7A..         MOV       R2,#ZDApp_epDesc & 0xff
   \   000024   7B..         MOV       R3,#(ZDApp_epDesc >> 8) & 0xff
   \   000026   12....       LCALL     `??afRegister::?relay`; Banked call to: afRegister
    277          
    278          #if defined( ZDO_USERDESC_RESPONSE )
    279            ZDApp_InitUserDesc();
    280          #endif // ZDO_USERDESC_RESPONSE
    281          
    282            // Start the device?
    283            if ( devState != DEV_HOLD )
   \   000029   90....       MOV       DPTR,#devState
   \   00002C   E0           MOVX      A,@DPTR
   \   00002D   6009         JZ        ??ZDApp_Init_0
    284            {
    285              ZDOInitDevice( 0 );
   \   00002F                ; Setup parameters for call to function ZDOInitDevice
   \   00002F   7A00         MOV       R2,#0x0
   \   000031   7B00         MOV       R3,#0x0
   \   000033   12....       LCALL     `??ZDOInitDevice::?relay`; Banked call to: ZDOInitDevice
   \   000036   8014         SJMP      ??ZDApp_Init_1
    286            }
    287            else
    288            {
    289              ZDOInitDevice( ZDO_INIT_HOLD_NWK_START );
   \                     ??ZDApp_Init_0:
   \   000038                ; Setup parameters for call to function ZDOInitDevice
   \   000038   7AFF         MOV       R2,#-0x1
   \   00003A   7BFF         MOV       R3,#-0x1
   \   00003C   12....       LCALL     `??ZDOInitDevice::?relay`; Banked call to: ZDOInitDevice
    290              // Blink LED to indicate HOLD_START
    291              HalLedBlink ( HAL_LED_4, 0, 50, 500 );
   \   00003F                ; Setup parameters for call to function HalLedBlink
   \   00003F   7CF4         MOV       R4,#-0xc
   \   000041   7D01         MOV       R5,#0x1
   \   000043   7B32         MOV       R3,#0x32
   \   000045   7A00         MOV       R2,#0x0
   \   000047   7908         MOV       R1,#0x8
   \   000049   12....       LCALL     `??HalLedBlink::?relay`; Banked call to: HalLedBlink
    292            }
    293            
    294            // Initialize the ZDO callback function pointers zdoCBFunc[]
    295            ZDApp_InitZdoCBFunc();
   \                     ??ZDApp_Init_1:
   \   00004C                ; Setup parameters for call to function ZDApp_InitZdoCBFunc
   \   00004C   12....       LCALL     `??ZDApp_InitZdoCBFunc::?relay`; Banked call to: ZDApp_InitZdoCBFunc
    296            
    297            ZDApp_RegisterCBs();
   \   00004F                ; Setup parameters for call to function ZDApp_RegisterCBs
   \   00004F   12....       LCALL     `??ZDApp_RegisterCBs::?relay`; Banked call to: ZDApp_RegisterCBs
    298          } /* ZDApp_Init() */
   \   000052   02....       LJMP      ??Subroutine37_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine37_0:
   \   000000   7F01         MOV       R7,#0x1
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    299          
    300          /*********************************************************************
    301           * @fn          ZDApp_SecInit
    302           *
    303           * @brief       ZDApp initialize security.
    304           *
    305           * @param       state - device initialization state
    306           *
    307           * @return      none
    308           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    309          void ZDApp_SecInit( uint8 state )
   \                     ZDApp_SecInit:
    310          {  
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    311            uint8 zgPreConfigKey[SEC_KEY_LEN];
    312          
    313            if ( ZG_SECURE_ENABLED && ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
    314            {
    315              // Set the Trust Center bit
    316              ZDO_Config_Node_Descriptor.ServerMask |= PRIM_TRUST_CENTER;
    317            }
    318          
    319            if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
    320            {
    321              ZDO_Config_Node_Descriptor.CapabilityFlags |= CAPINFO_SECURITY_CAPABLE;
    322            }
    323              
    324            // Initialize ZigBee Device Security Manager
    325            ZDSecMgrInit(state);
   \   000005                ; Setup parameters for call to function ZDSecMgrInit
   \   000005   12....       LCALL     `??ZDSecMgrInit::?relay`; Banked call to: ZDSecMgrInit
    326          
    327            if ( ZG_SECURE_ENABLED )
    328            {
    329              if ( state != ZDO_INITDEV_RESTORED_NETWORK_STATE )
    330              {
    331                nwkFrameCounter = 0;
    332            
    333                if( _NIB.nwkKeyLoaded == FALSE )
    334                {
    335                  if ( ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE          ) ||
    336                       ( ( zgSecurityMode == ZG_SECURITY_RESIDENTIAL ) && zgPreConfigKeys )    )
    337                  {
    338                      ZDSecMgrReadKeyFromNv(ZCD_NV_PRECFGKEY, zgPreConfigKey);
    339                      SSP_UpdateNwkKey( zgPreConfigKey, 0);
    340                      SSP_SwitchNwkKey( 0 );
    341                      
    342                      // clear local copy of key
    343                      osal_memset(zgPreConfigKey, 0x00, SEC_KEY_LEN);
    344                  }
    345                }
    346              }
    347            }    
    348          }
   \   000008   02....       LJMP      ??Subroutine37_0 & 0xFFFF
    349          
    350          /*********************************************************************
    351           * @fn      ZDApp_event_loop()
    352           *
    353           * @brief   Main event loop for Zigbee device objects task. This function
    354           *          should be called at periodic intervals.
    355           *
    356           * @param   task_id - Task ID
    357           * @param   events  - Bitmap of events
    358           *
    359           * @return  none
    360           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    361          UINT16 ZDApp_event_loop( uint8 task_id, UINT16 events )
   \                     ZDApp_event_loop:
    362          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
    363            uint8 *msg_ptr;
    364          
    365            if ( events & SYS_EVENT_MSG )
   \   000009   5480         ANL       A,#0x80
   \   00000B   702D         JNZ       ??ZDApp_event_loop_0
    366            {
    367              while ( (msg_ptr = osal_msg_receive( ZDAppTaskID )) )
    368              {
    369                ZDApp_ProcessOSALMsg( (osal_event_hdr_t *)msg_ptr );
    370          
    371                // Release the memory
    372                osal_msg_deallocate( msg_ptr );
    373              }
    374          
    375              // Return unprocessed events
    376              return (events ^ SYS_EVENT_MSG);
    377            }
    378          
    379            if ( events & ZDO_NETWORK_INIT )
   \   00000D   EE           MOV       A,R6
   \   00000E   A2E0         MOV       C,0xE0 /* A   */.0
   \   000010   5040         JNC       ??ZDApp_event_loop_1
    380            {
    381              // Initialize apps and start the network
    382              devState = DEV_INIT;
   \   000012   90....       MOV       DPTR,#devState
   \   000015   7401         MOV       A,#0x1
   \   000017   F0           MOVX      @DPTR,A
    383              
    384              ZDO_StartDevice( (uint8)ZDO_Config_Node_Descriptor.LogicalType, devStartMode,
    385                               DEFAULT_BEACON_ORDER, DEFAULT_SUPERFRAME_ORDER );
   \   000018                ; Setup parameters for call to function ZDO_StartDevice
   \   000018   7C0F         MOV       R4,#0xf
   \   00001A   7B0F         MOV       R3,#0xf
   \   00001C   90....       MOV       DPTR,#devStartMode
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   FA           MOV       R2,A
   \   000021   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor
   \   000024   E0           MOVX      A,@DPTR
   \   000025   5407         ANL       A,#0x7
   \   000027   F9           MOV       R1,A
   \   000028   12....       LCALL     `??ZDO_StartDevice::?relay`; Banked call to: ZDO_StartDevice
    386          
    387              // Return unprocessed events
    388              return (events ^ ZDO_NETWORK_INIT);
   \   00002B   EE           MOV       A,R6
   \   00002C   6401         XRL       A,#0x1
   \   00002E   8049         SJMP      ??ZDApp_event_loop_2
    389            }
   \                     ??ZDApp_event_loop_3:
   \   000030                ; Setup parameters for call to function ZDApp_ProcessOSALMsg
   \   000030   12....       LCALL     `??ZDApp_ProcessOSALMsg::?relay`; Banked call to: ZDApp_ProcessOSALMsg
   \   000033                ; Setup parameters for call to function osal_msg_deallocate
   \   000033   AA..         MOV       R2,?V0
   \   000035   AB..         MOV       R3,?V1
   \   000037   12....       LCALL     `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
   \                     ??ZDApp_event_loop_0:
   \   00003A                ; Setup parameters for call to function osal_msg_receive
   \   00003A   90....       MOV       DPTR,#ZDAppTaskID
   \   00003D   E0           MOVX      A,@DPTR
   \   00003E   F9           MOV       R1,A
   \   00003F   12....       LCALL     `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
   \   000042   8A..         MOV       ?V0,R2
   \   000044   8B..         MOV       ?V1,R3
   \   000046   EA           MOV       A,R2
   \   000047   45..         ORL       A,?V1
   \   000049   70E5         JNZ       ??ZDApp_event_loop_3
   \   00004B   EE           MOV       A,R6
   \   00004C   FA           MOV       R2,A
   \   00004D   EF           MOV       A,R7
   \   00004E   6480         XRL       A,#0x80
   \   000050   803E         SJMP      ??ZDApp_event_loop_4
    390          
    391            if ( ZSTACK_ROUTER_BUILD )
    392            {
    393              if ( events & ZDO_NETWORK_START )
    394              {
    395                ZDApp_NetworkStartEvt();
    396            
    397                // Return unprocessed events
    398                return (events ^ ZDO_NETWORK_START);
    399              }
    400          
    401              if ( events & ZDO_ROUTER_START )
    402              {
    403                if ( nwkStatus == ZSuccess )
    404                {
    405                  if ( devState == DEV_END_DEVICE )
    406                    devState = DEV_ROUTER;
    407            
    408                  osal_pwrmgr_device( PWRMGR_ALWAYS_ON );
    409                }
    410                else
    411                {
    412                  // remain as end device!!
    413                }
    414                osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
    415            
    416                // Return unprocessed events
    417                return (events ^ ZDO_ROUTER_START);
    418              }
    419            }
    420            
    421            if ( events & ZDO_STATE_CHANGE_EVT )
   \                     ??ZDApp_event_loop_1:
   \   000052   5410         ANL       A,#0x10
   \   000054   6027         JZ        ??ZDApp_event_loop_5
    422            {
    423              ZDO_UpdateNwkStatus( devState );
   \   000056                ; Setup parameters for call to function ZDO_UpdateNwkStatus
   \   000056   90....       MOV       DPTR,#devState
   \   000059   E0           MOVX      A,@DPTR
   \   00005A   F9           MOV       R1,A
   \   00005B   12....       LCALL     `??ZDO_UpdateNwkStatus::?relay`; Banked call to: ZDO_UpdateNwkStatus
    424              
    425              // At start up, do one MTO route discovery if the device is a concentrator
    426              if ( zgConcentratorEnable == TRUE ) 
   \   00005E   90....       MOV       DPTR,#zgConcentratorEnable
   \   000061   E0           MOVX      A,@DPTR
   \   000062   6401         XRL       A,#0x1
   \   000064   7010         JNZ       ??ZDApp_event_loop_6
    427              {
    428                // Start next event
    429                osal_start_timerEx( NWK_TaskID, NWK_MTO_RTG_REQ_EVT, 100 );
   \   000066                ; Setup parameters for call to function osal_start_timerEx
   \   000066   7C64         MOV       R4,#0x64
   \   000068   7D00         MOV       R5,#0x0
   \   00006A   7A00         MOV       R2,#0x0
   \   00006C   7B08         MOV       R3,#0x8
   \   00006E   90....       MOV       DPTR,#NWK_TaskID
   \   000071   E0           MOVX      A,@DPTR
   \   000072   F9           MOV       R1,A
   \   000073   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
    430              }
    431              
    432              // Return unprocessed events
    433              return (events ^ ZDO_STATE_CHANGE_EVT);
   \                     ??ZDApp_event_loop_6:
   \   000076   EE           MOV       A,R6
   \   000077   6410         XRL       A,#0x10
   \                     ??ZDApp_event_loop_2:
   \   000079   FA           MOV       R2,A
   \   00007A   EF           MOV       A,R7
   \   00007B   8013         SJMP      ??ZDApp_event_loop_4
    434            }
    435          
    436            if ( events & ZDO_COMMAND_CNF )
   \                     ??ZDApp_event_loop_5:
   \   00007D   EE           MOV       A,R6
   \   00007E   5408         ANL       A,#0x8
   \   000080   6006         JZ        ??ZDApp_event_loop_7
    437            {
    438              // User defined logic
    439          
    440              // Return unprocessed events
    441              return (events ^ ZDO_COMMAND_CNF);
   \   000082   EE           MOV       A,R6
   \   000083   6408         XRL       A,#0x8
   \   000085   FA           MOV       R2,A
   \   000086   8017         SJMP      ??ZDApp_event_loop_8
    442            }
    443            
    444            if ( events & ZDO_NWK_UPDATE_NV )
   \                     ??ZDApp_event_loop_7:
   \   000088   EF           MOV       A,R7
   \   000089   5402         ANL       A,#0x2
   \   00008B   6006         JZ        ??ZDApp_event_loop_9
    445            {
    446              ZDApp_SaveNetworkStateEvt();
    447          
    448              // Return unprocessed events
    449              return (events ^ ZDO_NWK_UPDATE_NV);
   \   00008D   EF           MOV       A,R7
   \   00008E   6402         XRL       A,#0x2
   \                     ??ZDApp_event_loop_4:
   \   000090   FB           MOV       R3,A
   \   000091   800C         SJMP      ??ZDApp_event_loop_8
    450            }
    451          
    452            if ( events & ZDO_DEVICE_RESET )
   \                     ??ZDApp_event_loop_9:
   \   000093   EE           MOV       A,R6
   \   000094   5404         ANL       A,#0x4
   \   000096   6003         JZ        ??ZDApp_event_loop_10
    453            {
    454              // The device has been in the UNAUTH state, so reset
    455              // Note: there will be no return from this call
    456              SystemResetSoft();
   \   000098                ; Setup parameters for call to function Onboard_soft_reset
   \   000098   12....       LCALL     Onboard_soft_reset & 0xFFFF
    457            }
    458          
    459            if ( ZG_SECURE_ENABLED )
    460            {
    461              return ( ZDApp_ProcessSecEvent( task_id, events ) );
    462            }
    463            else
    464            {
    465              // Discard or make more handlers
    466              return 0;
   \                     ??ZDApp_event_loop_10:
   \   00009B   7A00         MOV       R2,#0x0
   \   00009D   7B00         MOV       R3,#0x0
    467            }
   \                     ??ZDApp_event_loop_8:
   \   00009F   02....       LJMP      ??Subroutine36_0 & 0xFFFF
    468          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine36_0:
   \   000000   7F04         MOV       R7,#0x4
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    469          
    470          /*********************************************************************
    471           * @fn      ZDApp_ProcessSecEvent()
    472           *
    473           * @brief   Process incoming security events.
    474           *
    475           * @param   task_id - Task ID
    476           * @param   events  - Bitmap of events
    477           *
    478           * @return  none
    479           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    480          UINT16 ZDApp_ProcessSecEvent( uint8 task_id, UINT16 events )
   \                     ZDApp_ProcessSecEvent:
    481          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
    482            (void)task_id;  // Intentionally unreferenced parameter
    483            
    484            if ( ZSTACK_ROUTER_BUILD )
    485            {
    486              if ( events & ZDO_NEW_DEVICE )
    487              {
    488                // process the new device event
    489                if ( ZDSecMgrNewDeviceEvent() == TRUE )
    490                {
    491                  osal_start_timerEx( ZDAppTaskID, ZDO_NEW_DEVICE, 1000 );
    492                }
    493          
    494                // Return unprocessed events
    495                return (events ^ ZDO_NEW_DEVICE);
    496              }
    497            }
    498          
    499            if ( (ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH) 
    500                || (ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD) )
    501            {
    502              if ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
    503              { 
    504                if ( events & ZDO_SECMGR_EVENT )
    505                {
    506                  ZDSecMgrEvent();
    507          
    508                  // Return unprocessed events
    509                  return (events ^ ZDO_SECMGR_EVENT);
    510                }
    511              }
    512            }
    513            
    514            if ( events & ZDO_DEVICE_AUTH )
   \   000009   EE           MOV       A,R6
   \   00000A   5480         ANL       A,#0x80
   \   00000C   600A         JZ        ??ZDApp_ProcessSecEvent_0
    515            {
    516              ZDApp_DeviceAuthEvt();
   \   00000E                ; Setup parameters for call to function ZDApp_DeviceAuthEvt
   \   00000E   12....       LCALL     `??ZDApp_DeviceAuthEvt::?relay`; Banked call to: ZDApp_DeviceAuthEvt
    517          
    518              // Return unprocessed events
    519              return (events ^ ZDO_DEVICE_AUTH);
   \   000011   EE           MOV       A,R6
   \   000012   6480         XRL       A,#0x80
   \   000014   FA           MOV       R2,A
   \   000015   EF           MOV       A,R7
   \   000016   8042         SJMP      ??ZDApp_ProcessSecEvent_1
    520            }
    521          
    522            if ( events & ZDO_FRAMECOUNTER_CHANGE )
   \                     ??ZDApp_ProcessSecEvent_0:
   \   000018   EF           MOV       A,R7
   \   000019   5404         ANL       A,#0x4
   \   00001B   6026         JZ        ??ZDApp_ProcessSecEvent_2
    523            {
    524              if ( nwkFrameCounterChanges++ > MAX_NWK_FRAMECOUNTER_CHANGES )
   \   00001D   90....       MOV       DPTR,#nwkFrameCounterChanges
   \   000020   12....       LCALL     ??Subroutine40_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_56:
   \   000023   E8           MOV       A,R0
   \   000024   2401         ADD       A,#0x1
   \   000026   FA           MOV       R2,A
   \   000027   E4           CLR       A
   \   000028   39           ADDC      A,R1
   \   000029   FB           MOV       R3,A
   \   00002A   90....       MOV       DPTR,#nwkFrameCounterChanges
   \   00002D   12....       LCALL     ??Subroutine41_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_63:
   \   000030   C3           CLR       C
   \   000031   E8           MOV       A,R0
   \   000032   94E9         SUBB      A,#-0x17
   \   000034   E9           MOV       A,R1
   \   000035   9403         SUBB      A,#0x3
   \   000037   4003         JC        ??ZDApp_ProcessSecEvent_3
    525              {
    526                ZDApp_SaveNwkKey();
   \   000039                ; Setup parameters for call to function ZDApp_SaveNwkKey
   \   000039   12....       LCALL     `??ZDApp_SaveNwkKey::?relay`; Banked call to: ZDApp_SaveNwkKey
    527              }
    528          
    529              // Return unprocessed events
    530              return (events ^ ZDO_FRAMECOUNTER_CHANGE);
   \                     ??ZDApp_ProcessSecEvent_3:
   \   00003C   EE           MOV       A,R6
   \   00003D   FA           MOV       R2,A
   \   00003E   EF           MOV       A,R7
   \   00003F   6404         XRL       A,#0x4
   \   000041   8017         SJMP      ??ZDApp_ProcessSecEvent_1
    531            }
    532          
    533            if ( events & ZDO_APS_FRAMECOUNTER_CHANGE )
   \                     ??ZDApp_ProcessSecEvent_2:
   \   000043   EF           MOV       A,R7
   \   000044   5410         ANL       A,#0x10
   \   000046   6005         JZ        ??ZDApp_ProcessSecEvent_4
    534            {
    535          #if defined (NV_RESTORE)
    536              ZDSecMgrSaveApsLinkKey();
    537          #endif // (NV_RESTORE)
    538              
    539              // Return unprocessed events
    540              return (events ^ ZDO_APS_FRAMECOUNTER_CHANGE);
   \   000048   EF           MOV       A,R7
   \   000049   6410         XRL       A,#0x10
   \   00004B   800D         SJMP      ??ZDApp_ProcessSecEvent_1
    541            }
    542          
    543            if ( events & ZDO_TCLK_FRAMECOUNTER_CHANGE )
   \                     ??ZDApp_ProcessSecEvent_4:
   \   00004D   EF           MOV       A,R7
   \   00004E   5408         ANL       A,#0x8
   \   000050   600B         JZ        ??ZDApp_ProcessSecEvent_5
    544            {
    545              ZDSecMgrSaveTCLinkKey();
   \   000052                ; Setup parameters for call to function ZDSecMgrSaveTCLinkKey
   \   000052   12....       LCALL     `??ZDSecMgrSaveTCLinkKey::?relay`; Banked call to: ZDSecMgrSaveTCLinkKey
    546              
    547              // Return unprocessed events
    548              return (events ^ ZDO_TCLK_FRAMECOUNTER_CHANGE);
   \   000055   EE           MOV       A,R6
   \   000056   FA           MOV       R2,A
   \   000057   EF           MOV       A,R7
   \   000058   6408         XRL       A,#0x8
   \                     ??ZDApp_ProcessSecEvent_1:
   \   00005A   FB           MOV       R3,A
   \   00005B   8004         SJMP      ??ZDApp_ProcessSecEvent_6
    549            }
    550            
    551            // Discard or make more handlers
    552            return 0;
   \                     ??ZDApp_ProcessSecEvent_5:
   \   00005D   7A00         MOV       R2,#0x0
   \   00005F   7B00         MOV       R3,#0x0
   \                     ??ZDApp_ProcessSecEvent_6:
   \   000061   02....       LJMP      ??Subroutine37_0 & 0xFFFF
    553          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine40_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine41_0:
   \   000000   EA           MOV       A,R2
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   EB           MOV       A,R3
   \   000004   F0           MOVX      @DPTR,A
   \   000005   22           RET
    554          
    555          /*********************************************************************
    556           * Application Functions
    557           */
    558          
    559          /*********************************************************************
    560           * @fn      ZDOInitDevice
    561           *
    562           * @brief   Start the device in the network.  This function will read
    563           *   ZCD_NV_STARTUP_OPTION (NV item) to determine whether or not to
    564           *   restore the network state of the device.
    565           *
    566           * @param   startDelay - timeDelay to start device (in milliseconds).
    567           *                       There is a jitter added to this delay:
    568           *                       ((NWK_START_DELAY + startDelay)
    569           *                       + (osal_rand() & EXTENDED_JOINING_RANDOM_MASK))
    570           *                       When startDelay is set to ZDO_INIT_HOLD_NWK_START
    571           *                       this function will hold the network init. Application
    572           *                       can start the device.
    573           *
    574           * NOTE:    If the application would like to force a "new" join, the
    575           *          application should set the ZCD_STARTOPT_DEFAULT_NETWORK_STATE
    576           *          bit in the ZCD_NV_STARTUP_OPTION NV item before calling
    577           *          this function. "new" join means to not restore the network
    578           *          state of the device. Use zgWriteStartupOptions() to set these
    579           *          options.
    580           *
    581           * @return
    582           *    ZDO_INITDEV_RESTORED_NETWORK_STATE  - The device's network state was
    583           *          restored.
    584           *    ZDO_INITDEV_NEW_NETWORK_STATE - The network state was initialized.
    585           *          This could mean that ZCD_NV_STARTUP_OPTION said to not restore, or
    586           *          it could mean that there was no network state to restore.
    587           *    ZDO_INITDEV_LEAVE_NOT_STARTED - Before the reset, a network leave was issued
    588           *          with the rejoin option set to TRUE.  So, the device was not
    589           *          started in the network (one time only).  The next time this
    590           *          function is called it will start.
    591           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    592          uint8 ZDOInitDevice( uint16 startDelay )
   \                     ZDOInitDevice:
    593          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   12....       LCALL     ?Subroutine10 & 0xFFFF
    594            uint8 networkStateNV = ZDO_INITDEV_NEW_NETWORK_STATE;
    595            uint16 extendedDelay = 0;
    596          
    597            if ( devState == DEV_HOLD )
   \                     ??CrossCallReturnLabel_68:
   \   00000D   90....       MOV       DPTR,#devState
   \   000010   E0           MOVX      A,@DPTR
   \   000011   7005         JNZ       ??ZDOInitDevice_0
    598            {    
    599              // Initialize the RAM items table, in case an NV item has been updated.
    600              zgInitItems( FALSE );
   \   000013                ; Setup parameters for call to function zgInitItems
   \   000013   7900         MOV       R1,#0x0
   \   000015   12....       LCALL     `??zgInitItems::?relay`; Banked call to: zgInitItems
    601            }
    602          
    603            ZDConfig_InitDescriptors();
   \                     ??ZDOInitDevice_0:
   \   000018                ; Setup parameters for call to function ZDConfig_InitDescriptors
   \   000018   12....       LCALL     `??ZDConfig_InitDescriptors::?relay`; Banked call to: ZDConfig_InitDescriptors
    604            //devtag.071807.todo - fix this temporary solution
    605            _NIB.CapabilityFlags = ZDO_Config_Node_Descriptor.CapabilityFlags;
   \   00001B   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor + 2
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   90....       MOV       DPTR,#_NIB + 14
   \   000022   F0           MOVX      @DPTR,A
    606            
    607          #if defined ( NV_RESTORE )
    608            // Get Keypad directly to see if a reset nv is needed.
    609            // Hold down the SW_BYPASS_NV key (defined in OnBoard.h)
    610            // while booting to skip past NV Restore.
    611            if ( HalKeyRead() == SW_BYPASS_NV )
    612              networkStateNV = ZDO_INITDEV_NEW_NETWORK_STATE;
    613            else
    614            {
    615              // Determine if NV should be restored
    616              networkStateNV = ZDApp_ReadNetworkRestoreState();
    617            }
    618          
    619            if ( networkStateNV == ZDO_INITDEV_RESTORED_NETWORK_STATE )
    620            {
    621              networkStateNV = ZDApp_RestoreNetworkState();
    622            }
    623            else
    624            {
    625              // Wipe out the network state in NV
    626              NLME_InitNV();
    627              NLME_SetDefaultNV();
    628              // clear NWK key values
    629              ZDSecMgrClearNVKeyValues();
    630            }
    631          #endif
    632          
    633            if ( networkStateNV == ZDO_INITDEV_NEW_NETWORK_STATE )
    634            {
    635              ZDAppDetermineDeviceType();
   \   000023                ; Setup parameters for call to function ZDAppDetermineDeviceType
   \   000023   12....       LCALL     `??ZDAppDetermineDeviceType::?relay`; Banked call to: ZDAppDetermineDeviceType
    636          
    637              // Only delay if joining network - not restoring network state
    638              extendedDelay = (uint16)((NWK_START_DELAY + startDelay)
    639                        + (osal_rand() & EXTENDED_JOINING_RANDOM_MASK));
   \   000026                ; Setup parameters for call to function osal_rand
   \   000026   12....       LCALL     `??osal_rand::?relay`; Banked call to: osal_rand
   \   000029   85..82       MOV       DPL,?XSP + 0
   \   00002C   85..83       MOV       DPH,?XSP + 1
   \   00002F   EA           MOV       A,R2
   \   000030   547F         ANL       A,#0x7f
   \   000032   F8           MOV       R0,A
   \   000033   E0           MOVX      A,@DPTR
   \   000034   28           ADD       A,R0
   \   000035   F8           MOV       R0,A
   \   000036   A3           INC       DPTR
   \   000037   E0           MOVX      A,@DPTR
   \   000038   3400         ADDC      A,#0x0
   \   00003A   F9           MOV       R1,A
   \   00003B   E8           MOV       A,R0
   \   00003C   2464         ADD       A,#0x64
   \   00003E   FE           MOV       R6,A
   \   00003F   E4           CLR       A
   \   000040   39           ADDC      A,R1
   \   000041   FF           MOV       R7,A
    640            }
    641          
    642            // Initialize the security for type of device
    643            ZDApp_SecInit( networkStateNV );
   \   000042                ; Setup parameters for call to function ZDSecMgrInit
   \   000042   7901         MOV       R1,#0x1
   \   000044   12....       LCALL     `??ZDSecMgrInit::?relay`; Banked call to: ZDSecMgrInit
    644            
    645            if( ZDO_INIT_HOLD_NWK_START != startDelay )
   \   000047   85..82       MOV       DPL,?XSP + 0
   \   00004A   85..83       MOV       DPH,?XSP + 1
   \   00004D   E0           MOVX      A,@DPTR
   \   00004E   F4           CPL       A
   \   00004F   7003         JNZ       ??ZDOInitDevice_1
   \   000051   A3           INC       DPTR
   \   000052   E0           MOVX      A,@DPTR
   \   000053   F4           CPL       A
   \                     ??ZDOInitDevice_1:
   \   000054   6038         JZ        ??ZDOInitDevice_2
    646            {
    647              devState = DEV_INIT;    // Remove the Hold state
   \   000056   90....       MOV       DPTR,#devState
   \   000059   7401         MOV       A,#0x1
   \   00005B   F0           MOVX      @DPTR,A
    648              
    649              // Initialize leave control logic
    650              ZDApp_LeaveCtrlInit();
   \   00005C                ; Setup parameters for call to function ZDApp_LeaveCtrlInit
   \   00005C   12....       LCALL     `??ZDApp_LeaveCtrlInit::?relay`; Banked call to: ZDApp_LeaveCtrlInit
    651              
    652              // Check leave control reset settings
    653              ZDApp_LeaveCtrlStartup( &devState, &startDelay );
   \   00005F                ; Setup parameters for call to function ZDApp_LeaveCtrlStartup
   \   00005F   AC..         MOV       R4,?XSP + 0
   \   000061   AD..         MOV       R5,?XSP + 1
   \   000063   7A..         MOV       R2,#devState & 0xff
   \   000065   7B..         MOV       R3,#(devState >> 8) & 0xff
   \   000067   12....       LCALL     `??ZDApp_LeaveCtrlStartup::?relay`; Banked call to: ZDApp_LeaveCtrlStartup
    654              
    655              // Leave may make the hold state come back
    656              if ( devState == DEV_HOLD )
   \   00006A   90....       MOV       DPTR,#devState
   \   00006D   E0           MOVX      A,@DPTR
   \   00006E   7017         JNZ       ??ZDOInitDevice_3
    657              {
    658                // Set the NV startup option to force a "new" join.
    659                zgWriteStartupOptions( ZG_STARTUP_SET, ZCD_STARTOPT_DEFAULT_NETWORK_STATE );
   \   000070                ; Setup parameters for call to function zgWriteStartupOptions
   \   000070   7A02         MOV       R2,#0x2
   \   000072   79FF         MOV       R1,#-0x1
   \   000074   12....       LCALL     `??zgWriteStartupOptions::?relay`; Banked call to: zgWriteStartupOptions
    660                
    661                // Notify the applications 
    662                osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   000077                ; Setup parameters for call to function osal_set_event
   \   000077   7A10         MOV       R2,#0x10
   \   000079   7B00         MOV       R3,#0x0
   \   00007B   90....       MOV       DPTR,#ZDAppTaskID
   \   00007E   E0           MOVX      A,@DPTR
   \   00007F   F9           MOV       R1,A
   \   000080   12....       LCALL     `??osal_set_event::?relay`; Banked call to: osal_set_event
    663                
    664                return ( ZDO_INITDEV_LEAVE_NOT_STARTED );   // Don't join - (one time).
   \   000083   7902         MOV       R1,#0x2
   \   000085   8011         SJMP      ??ZDOInitDevice_4
    665              }
    666              
    667              // Trigger the network start
    668              ZDApp_NetworkInit( extendedDelay );
   \                     ??ZDOInitDevice_3:
   \   000087                ; Setup parameters for call to function ZDApp_NetworkInit
   \   000087   EE           MOV       A,R6
   \   000088   FA           MOV       R2,A
   \   000089   EF           MOV       A,R7
   \   00008A   FB           MOV       R3,A
   \   00008B   12....       LCALL     `??ZDApp_NetworkInit::?relay`; Banked call to: ZDApp_NetworkInit
    669            }
    670          
    671            // set broadcast address mask to support broadcast filtering
    672            NLME_SetBroadcastFilter( ZDO_Config_Node_Descriptor.CapabilityFlags );
   \                     ??ZDOInitDevice_2:
   \   00008E                ; Setup parameters for call to function NLME_SetBroadcastFilter
   \   00008E   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000091   E0           MOVX      A,@DPTR
   \   000092   F9           MOV       R1,A
   \   000093   12....       LCALL     `??NLME_SetBroadcastFilter::?relay`; Banked call to: NLME_SetBroadcastFilter
    673            
    674            return ( networkStateNV );
   \   000096   7901         MOV       R1,#0x1
   \                     ??ZDOInitDevice_4:
   \   000098   02....       LJMP      ?Subroutine2 & 0xFFFF
    675          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7402         MOV       A,#0x2
   \   000002                REQUIRE ??Subroutine33_0
   \   000002                ; // Fall through to label ??Subroutine33_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine33_0:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine34_0
   \   000003                ; // Fall through to label ??Subroutine34_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine34_0:
   \   000000   7F02         MOV       R7,#0x2
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine41_0
   \   000006                ; // Fall through to label ??Subroutine41_0
    676          
    677          /*********************************************************************
    678           * @fn      ZDApp_ReadNetworkRestoreState
    679           *
    680           * @brief   Read the ZCD_NV_STARTUP_OPTION NV Item to state whether
    681           *          or not to restore the network state.
    682           *          If the read value has the ZCD_STARTOPT_DEFAULT_NETWORK_STATE
    683           *          bit set return the ZDO_INITDEV_NEW_NETWORK_STATE.
    684           *
    685           * @param   none
    686           *
    687           * @return  ZDO_INITDEV_NEW_NETWORK_STATE
    688           *          or ZDO_INITDEV_RESTORED_NETWORK_STATE based on whether or
    689           *          not ZCD_STARTOPT_DEFAULT_NETWORK_STATE bit is set in
    690           *          ZCD_NV_STARTUP_OPTION
    691           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    692          uint8 ZDApp_ReadNetworkRestoreState( void )
   \                     ZDApp_ReadNetworkRestoreState:
    693          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    694            uint8 networkStateNV = ZDO_INITDEV_RESTORED_NETWORK_STATE;
   \   000005   7E00         MOV       R6,#0x0
    695          
    696            // Look for the New Network State option.
    697            if ( zgReadStartupOptions() & ZCD_STARTOPT_DEFAULT_NETWORK_STATE )
   \   000007                ; Setup parameters for call to function zgReadStartupOptions
   \   000007   12....       LCALL     `??zgReadStartupOptions::?relay`; Banked call to: zgReadStartupOptions
   \   00000A   E9           MOV       A,R1
   \   00000B   F8           MOV       R0,A
   \   00000C   A2E1         MOV       C,0xE0 /* A   */.1
   \   00000E   5002         JNC       ??ZDApp_ReadNetworkRestoreState_0
    698            {
    699              networkStateNV = ZDO_INITDEV_NEW_NETWORK_STATE;
   \   000010   7E01         MOV       R6,#0x1
    700            }
    701          
    702            return ( networkStateNV );
   \                     ??ZDApp_ReadNetworkRestoreState_0:
   \   000012   EE           MOV       A,R6
   \   000013   F9           MOV       R1,A
   \   000014   02....       LJMP      ??Subroutine37_0 & 0xFFFF
    703          }
    704          
    705          /*********************************************************************
    706           * @fn      ZDAppDetermineDeviceType()
    707           *
    708           * @brief   Determines the type of device to start. 
    709           *
    710           *          Looks at zgDeviceLogicalType and determines what type of
    711           *          device to start.  The types are:
    712           *            ZG_DEVICETYPE_COORDINATOR
    713           *            ZG_DEVICETYPE_ROUTER
    714           *            ZG_DEVICETYPE_ENDDEVICE
    715           *
    716           * @param   none
    717           *
    718           * @return  none
    719           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    720          void ZDAppDetermineDeviceType( void )
   \                     ZDAppDetermineDeviceType:
    721          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    722            if ( zgDeviceLogicalType == ZG_DEVICETYPE_COORDINATOR )
   \   000004   90....       MOV       DPTR,#zgDeviceLogicalType
   \   000007   E0           MOVX      A,@DPTR
   \   000008   700E         JNZ       ??ZDAppDetermineDeviceType_0
    723            {
    724              devStartMode = MODE_HARD;     // Start as a coordinator
   \   00000A   90....       MOV       DPTR,#devStartMode
   \   00000D   7402         MOV       A,#0x2
   \   00000F   F0           MOVX      @DPTR,A
    725              ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_COORDINATOR;
   \   000010   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor
   \   000013   E0           MOVX      A,@DPTR
   \   000014   54F8         ANL       A,#0xf8
   \   000016   802E         SJMP      ??ZDAppDetermineDeviceType_1
    726            }
    727            else
    728            {
    729              if ( zgDeviceLogicalType == ZG_DEVICETYPE_ROUTER  )
   \                     ??ZDAppDetermineDeviceType_0:
   \   000018   6401         XRL       A,#0x1
   \   00001A   700A         JNZ       ??ZDAppDetermineDeviceType_2
    730                ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_ROUTER;
   \   00001C   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   54F8         ANL       A,#0xf8
   \   000022   4401         ORL       A,#0x1
   \   000024   800D         SJMP      ??ZDAppDetermineDeviceType_3
    731              else if ( zgDeviceLogicalType == ZG_DEVICETYPE_ENDDEVICE )
   \                     ??ZDAppDetermineDeviceType_2:
   \   000026   E0           MOVX      A,@DPTR
   \   000027   6402         XRL       A,#0x2
   \   000029   7009         JNZ       ??ZDAppDetermineDeviceType_4
    732                ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_DEVICE;
   \   00002B   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor
   \   00002E   E0           MOVX      A,@DPTR
   \   00002F   54F8         ANL       A,#0xf8
   \   000031   4402         ORL       A,#0x2
   \                     ??ZDAppDetermineDeviceType_3:
   \   000033   F0           MOVX      @DPTR,A
    733              
    734              // If AIB_apsUseExtendedPANID is set to a non-zero value by commissioning
    735              // The device shall do rejoin the network. Otherwise, do normal join
    736              if ( nwk_ExtPANIDValid( AIB_apsUseExtendedPANID ) == false )
   \                     ??ZDAppDetermineDeviceType_4:
   \   000034                ; Setup parameters for call to function nwk_ExtPANIDValid
   \   000034   7A..         MOV       R2,#AIB_apsUseExtendedPANID & 0xff
   \   000036   7B..         MOV       R3,#(AIB_apsUseExtendedPANID >> 8) & 0xff
   \   000038   12....       LCALL     `??nwk_ExtPANIDValid::?relay`; Banked call to: nwk_ExtPANIDValid
   \   00003B   E9           MOV       A,R1
   \   00003C   90....       MOV       DPTR,#devStartMode
   \   00003F   7003         JNZ       ??ZDAppDetermineDeviceType_5
    737              {
    738                devStartMode = MODE_JOIN;     // Assume joining
   \   000041   E4           CLR       A
   \   000042   8002         SJMP      ??ZDAppDetermineDeviceType_1
    739              }
    740              else
    741              {
    742                devStartMode = MODE_REJOIN;  
   \                     ??ZDAppDetermineDeviceType_5:
   \   000044   7403         MOV       A,#0x3
   \                     ??ZDAppDetermineDeviceType_1:
   \   000046   F0           MOVX      @DPTR,A
    743              }
    744            }
    745          }
   \   000047   02....       LJMP      ?Subroutine3 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   D083         POP       DPH
   \   000002   D082         POP       DPL
   \   000004   02....       LJMP      ?BRET
    746          
    747          /*********************************************************************
    748           * @fn      ZDApp_NetworkStartEvt()
    749           *
    750           * @brief   Process the Network Start Event
    751           *
    752           * @param   none
    753           *
    754           * @return  none
    755           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    756          void ZDApp_NetworkStartEvt( void )
   \                     ZDApp_NetworkStartEvt:
    757          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    758            if ( nwkStatus == ZSuccess )
   \   000004   90....       MOV       DPTR,#nwkStatus
   \   000007   E0           MOVX      A,@DPTR
   \   000008   7012         JNZ       ??ZDApp_NetworkStartEvt_0
    759            {
    760              // Successfully started a ZigBee network
    761              if ( devState == DEV_COORD_STARTING )
   \   00000A   90....       MOV       DPTR,#devState
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   6408         XRL       A,#0x8
   \   000010   7003         JNZ       ??ZDApp_NetworkStartEvt_1
    762              {
    763                devState = DEV_ZB_COORD;
   \   000012   7409         MOV       A,#0x9
   \   000014   F0           MOVX      @DPTR,A
    764              }
    765          
    766              osal_pwrmgr_device( PWRMGR_ALWAYS_ON );
   \                     ??ZDApp_NetworkStartEvt_1:
   \   000015                ; Setup parameters for call to function osal_pwrmgr_device
   \   000015   7900         MOV       R1,#0x0
   \   000017   12....       LCALL     `??osal_pwrmgr_device::?relay`; Banked call to: osal_pwrmgr_device
    767              osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   00001A                ; Setup parameters for call to function osal_set_event
   \   00001A   802E         SJMP      ??ZDApp_NetworkStartEvt_2
    768            }
    769            else
    770            {
    771              // Try again with a higher energy threshold !!
    772              if ( ( NLME_GetEnergyThreshold() + ENERGY_SCAN_INCREMENT ) < 0xff )
   \                     ??ZDApp_NetworkStartEvt_0:
   \   00001C                ; Setup parameters for call to function NLME_GetEnergyThreshold
   \   00001C   12....       LCALL     `??NLME_GetEnergyThreshold::?relay`; Banked call to: NLME_GetEnergyThreshold
   \   00001F   E9           MOV       A,R1
   \   000020   7900         MOV       R1,#0x0
   \   000022   2410         ADD       A,#0x10
   \   000024   5001         JNC       ??ZDApp_NetworkStartEvt_3
   \   000026   09           INC       R1
   \                     ??ZDApp_NetworkStartEvt_3:
   \   000027   C3           CLR       C
   \   000028   94FF         SUBB      A,#-0x1
   \   00002A   E9           MOV       A,R1
   \   00002B   9400         SUBB      A,#0x0
   \   00002D   A2D2         MOV       C,0xD0 /* PSW */.2
   \   00002F   65D0         XRL       A,PSW
   \   000031   33           RLC       A
   \   000032   5010         JNC       ??ZDApp_NetworkStartEvt_4
    773              {
    774                NLME_SetEnergyThreshold( (uint8)(NLME_GetEnergyThreshold() + ENERGY_SCAN_INCREMENT) );
   \   000034                ; Setup parameters for call to function NLME_GetEnergyThreshold
   \   000034   12....       LCALL     `??NLME_GetEnergyThreshold::?relay`; Banked call to: NLME_GetEnergyThreshold
   \   000037   E9           MOV       A,R1
   \   000038   F8           MOV       R0,A
   \   000039                ; Setup parameters for call to function NLME_SetEnergyThreshold
   \   000039   7410         MOV       A,#0x10
   \   00003B   29           ADD       A,R1
   \   00003C   F9           MOV       R1,A
   \   00003D   12....       LCALL     `??NLME_SetEnergyThreshold::?relay`; Banked call to: NLME_SetEnergyThreshold
    775                osal_set_event( ZDAppTaskID, ZDO_NETWORK_INIT );
   \   000040                ; Setup parameters for call to function osal_set_event
   \   000040   7A01         MOV       R2,#0x1
   \   000042   8008         SJMP      ??ZDApp_NetworkStartEvt_5
    776              }
    777              else
    778              {
    779                // Failed to start network. Enter a dormant state (until user intervenes)
    780                devState = DEV_INIT;
   \                     ??ZDApp_NetworkStartEvt_4:
   \   000044   90....       MOV       DPTR,#devState
   \   000047   7401         MOV       A,#0x1
   \   000049   F0           MOVX      @DPTR,A
    781                osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   00004A                ; Setup parameters for call to function osal_set_event
   \                     ??ZDApp_NetworkStartEvt_2:
   \   00004A   7A10         MOV       R2,#0x10
   \                     ??ZDApp_NetworkStartEvt_5:
   \   00004C   7B00         MOV       R3,#0x0
   \   00004E   90....       MOV       DPTR,#ZDAppTaskID
   \   000051   E0           MOVX      A,@DPTR
   \   000052   F9           MOV       R1,A
   \   000053   12....       LCALL     `??osal_set_event::?relay`; Banked call to: osal_set_event
    782              }
    783            }
    784          }
   \   000056   02....       LJMP      ?Subroutine3 & 0xFFFF
    785          
    786          /*********************************************************************
    787           * @fn      ZDApp_DeviceAuthEvt()
    788           *
    789           * @brief   Process the Device Authentic Event
    790           *
    791           * @param   none
    792           *
    793           * @return  none
    794           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    795          void ZDApp_DeviceAuthEvt( void )
   \                     ZDApp_DeviceAuthEvt:
    796          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    797            // received authentication from trust center
    798            if ( devState == DEV_END_DEVICE_UNAUTH )
   \   000004   90....       MOV       DPTR,#devState
   \   000007   E0           MOVX      A,@DPTR
   \   000008   6405         XRL       A,#0x5
   \   00000A   7022         JNZ       ??ZDApp_DeviceAuthEvt_0
    799            {
    800              // Stop the reset timer so it doesn't reset
    801              ZDApp_ResetTimerCancel();
   \   00000C                ; Setup parameters for call to function ZDApp_ResetTimerCancel
   \   00000C   12....       LCALL     `??ZDApp_ResetTimerCancel::?relay`; Banked call to: ZDApp_ResetTimerCancel
    802          
    803              devState = DEV_END_DEVICE;
   \   00000F   12....       LCALL     ?Subroutine11 & 0xFFFF
    804              osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \                     ??CrossCallReturnLabel_4:
   \   000012   12....       LCALL     `??osal_set_event::?relay`; Banked call to: osal_set_event
    805          
    806              // Set the Power Manager Device
    807          #if defined ( POWER_SAVING )
    808              osal_pwrmgr_device( PWRMGR_BATTERY );
    809          #endif
    810          
    811              if ( ZSTACK_ROUTER_BUILD )
    812              {
    813                if ( ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
    814                {
    815                  // NOTE: first two parameters are not used, see NLMEDE.h for details
    816                  NLME_StartRouterRequest( 0, 0, false );
    817                }
    818              }
    819          
    820              // Notify to save info into NV
    821              ZDApp_NVUpdate();
    822          
    823              // Save off the security
    824              ZDApp_SaveNwkKey();
   \   000015                ; Setup parameters for call to function ZDApp_SaveNwkKey
   \   000015   12....       LCALL     `??ZDApp_SaveNwkKey::?relay`; Banked call to: ZDApp_SaveNwkKey
    825          
    826              ZDApp_AnnounceNewAddress();
   \   000018                ; Setup parameters for call to function ZDApp_AnnounceNewAddress
   \   000018   12....       LCALL     `??ZDApp_AnnounceNewAddress::?relay`; Banked call to: ZDApp_AnnounceNewAddress
    827              
    828              if ( (ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE) == 0 )
   \   00001B   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor + 2
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   A2E3         MOV       C,0xE0 /* A   */.3
   \   000021   400B         JC        ??ZDApp_DeviceAuthEvt_0
    829              {
    830                NLME_SetPollRate( ZDApp_SavedPollRate );
   \   000023                ; Setup parameters for call to function NLME_SetPollRate
   \   000023   90....       MOV       DPTR,#ZDApp_SavedPollRate
   \   000026   E0           MOVX      A,@DPTR
   \   000027   FA           MOV       R2,A
   \   000028   A3           INC       DPTR
   \   000029   E0           MOVX      A,@DPTR
   \   00002A   FB           MOV       R3,A
   \   00002B   12....       LCALL     `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
    831              }
    832            }
    833            else
    834            {
    835              ZDApp_NVUpdate();
    836            }
    837          }
   \                     ??ZDApp_DeviceAuthEvt_0:
   \   00002E   02....       LJMP      ?Subroutine3 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   90....       MOV       DPTR,#devState
   \   000003   7406         MOV       A,#0x6
   \   000005   F0           MOVX      @DPTR,A
   \   000006                ; Setup parameters for call to function osal_set_event
   \   000006                ; Setup parameters for call to function osal_set_event
   \   000006   7A10         MOV       R2,#0x10
   \   000008   7B00         MOV       R3,#0x0
   \   00000A   90....       MOV       DPTR,#ZDAppTaskID
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   F9           MOV       R1,A
   \   00000F   22           RET
    838          
    839          /*********************************************************************
    840           * @fn      ZDApp_SaveNetworkStateEvt()
    841           *
    842           * @brief   Process the Save the Network State Event
    843           *
    844           * @param   none
    845           *
    846           * @return  none
    847           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    848          void ZDApp_SaveNetworkStateEvt( void )
   \                     ZDApp_SaveNetworkStateEvt:
    849          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    850          #if defined ( NV_RESTORE )
    851           #if defined ( NV_TURN_OFF_RADIO )
    852            // Turn off the radio's receiver during an NV update
    853            uint8 RxOnIdle;
    854            uint8 x = false;
    855            ZMacGetReq( ZMacRxOnIdle, &RxOnIdle );
    856            ZMacSetReq( ZMacRxOnIdle, &x );
    857           #endif
    858          
    859            // Update the Network State in NV
    860            NLME_UpdateNV( NWK_NV_NIB_ENABLE        |
    861                           NWK_NV_DEVICELIST_ENABLE |
    862                           NWK_NV_BINDING_ENABLE    |
    863                           NWK_NV_ADDRMGR_ENABLE );
    864          
    865            // Reset the NV startup option to resume from NV by
    866            // clearing the "New" join option.
    867            zgWriteStartupOptions( FALSE, ZCD_STARTOPT_DEFAULT_NETWORK_STATE );
    868          
    869           #if defined ( NV_TURN_OFF_RADIO )
    870            ZMacSetReq( ZMacRxOnIdle, &RxOnIdle );
    871           #endif
    872          #endif  // NV_RESTORE
    873          }
   \   000000   02....       LJMP      ?BRET
    874          
    875          /*********************************************************************
    876           * @fn      ZDApp_RestoreNetworkState()
    877           *
    878           * @brief   This function will restore the network state of the
    879           *          device if the network state is stored in NV.
    880           *
    881           * @param   none
    882           *
    883           * @return
    884           *    ZDO_INITDEV_RESTORED_NETWORK_STATE  - The device's network state was
    885           *          restored.
    886           *    ZDO_INITDEV_NEW_NETWORK_STATE - The network state was not used.
    887           *          This could mean that zgStartupOption said to not restore, or
    888           *          it could mean that there was no network state to restore.
    889           *
    890           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    891          uint8 ZDApp_RestoreNetworkState( void )
   \                     ZDApp_RestoreNetworkState:
    892          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    893            uint8 nvStat;
    894          
    895            // Initialize NWK NV items
    896            nvStat = NLME_InitNV();
   \   000005                ; Setup parameters for call to function NLME_InitNV
   \   000005   12....       LCALL     `??NLME_InitNV::?relay`; Banked call to: NLME_InitNV
   \   000008   E9           MOV       A,R1
   \   000009   FE           MOV       R6,A
    897          
    898            if ( nvStat != NV_OPER_FAILED )
   \   00000A   740A         MOV       A,#0xa
   \   00000C   6E           XRL       A,R6
   \   00000D   6030         JZ        ??ZDApp_RestoreNetworkState_0
    899            {
    900              if ( NLME_RestoreFromNV() )
   \   00000F                ; Setup parameters for call to function NLME_RestoreFromNV
   \   00000F   12....       LCALL     `??NLME_RestoreFromNV::?relay`; Banked call to: NLME_RestoreFromNV
   \   000012   E9           MOV       A,R1
   \   000013   602A         JZ        ??ZDApp_RestoreNetworkState_0
    901              {
    902                // Are we a coordinator
    903                ZDAppNwkAddr.addr.shortAddr = NLME_GetShortAddr();
   \   000015                ; Setup parameters for call to function NLME_GetShortAddr
   \   000015   12....       LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   000018   90....       MOV       DPTR,#ZDAppNwkAddr
   \   00001B   12....       LCALL     ??Subroutine41_0 & 0xFFFF
    904                if ( ZDAppNwkAddr.addr.shortAddr == 0 )
   \                     ??CrossCallReturnLabel_64:
   \   00001E   90....       MOV       DPTR,#ZDAppNwkAddr
   \   000021   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   000024   7007         JNZ       ??ZDApp_RestoreNetworkState_1
    905                  ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_COORDINATOR;
   \   000026   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor
   \   000029   E0           MOVX      A,@DPTR
   \   00002A   54F8         ANL       A,#0xf8
   \   00002C   F0           MOVX      @DPTR,A
    906                devStartMode = MODE_RESUME;
   \                     ??ZDApp_RestoreNetworkState_1:
   \   00002D   90....       MOV       DPTR,#devStartMode
   \   000030   7401         MOV       A,#0x1
   \   000032   12....       LCALL     ?Subroutine12 & 0xFFFF
    907                osal_cpyExtAddr( ZDO_UseExtendedPANID, _NIB.extendedPANID );
    908              }
    909              else
    910                nvStat = NV_ITEM_UNINIT;
    911          
    912              if ( ZG_SECURE_ENABLED )
    913              {
    914                nwkFrameCounterChanges = 0;
    915          
    916                if ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
    917                {
    918                  ZDApp_RestoreNwkKey();
    919                }
    920              }
    921          
    922              // The default for RxOnWhenIdle is true for Routers and false for end devices
    923              // [setup in the NLME_RestoreFromNV()].  Change it here if you want something
    924              // other than default.
    925            }
   \                     ??CrossCallReturnLabel_6:
   \   000035   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
    926          
    927            if ( nvStat == ZSUCCESS )
   \   000038   EE           MOV       A,R6
   \   000039   7004         JNZ       ??ZDApp_RestoreNetworkState_0
    928              return ( ZDO_INITDEV_RESTORED_NETWORK_STATE );
   \   00003B   7900         MOV       R1,#0x0
   \   00003D   8002         SJMP      ??ZDApp_RestoreNetworkState_2
    929            else
    930              return ( ZDO_INITDEV_NEW_NETWORK_STATE );
   \                     ??ZDApp_RestoreNetworkState_0:
   \   00003F   7901         MOV       R1,#0x1
   \                     ??ZDApp_RestoreNetworkState_2:
   \   000041   02....       LJMP      ??Subroutine37_0 & 0xFFFF
    931          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                ; Setup parameters for call to function sAddrExtCpy
   \   000001                ; Setup parameters for call to function sAddrExtCpy
   \   000001   7C..         MOV       R4,#(_NIB + 53) & 0xff
   \   000003   7D..         MOV       R5,#((_NIB + 53) >> 8) & 0xff
   \   000005   7A..         MOV       R2,#ZDO_UseExtendedPANID & 0xff
   \   000007   7B..         MOV       R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   E8           MOV       A,R0
   \   000006   49           ORL       A,R1
   \   000007   22           RET
    932          
    933          /*********************************************************************
    934           * @fn      ZDApp_InitUserDesc()
    935           *
    936           * @brief   Initialize the User Descriptor, the descriptor is read from NV
    937           *          when needed.  If you want to initialize the User descriptor to
    938           *          something other than all zero, do it here.
    939           *
    940           * @param   none
    941           *
    942           * @return  none
    943           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    944          void ZDApp_InitUserDesc( void )
   \                     ZDApp_InitUserDesc:
    945          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 17
   \   000005   74EF         MOV       A,#-0x11
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    946            UserDescriptorFormat_t ZDO_DefaultUserDescriptor;
    947          
    948            // Initialize the User Descriptor, the descriptor is read from NV
    949            // when needed.  If you want to initialize the User descriptor to something
    950            // other than all zero, do it here.
    951            osal_memset( &ZDO_DefaultUserDescriptor, 0, sizeof( UserDescriptorFormat_t ) );
   \   00000A                ; Setup parameters for call to function osal_memset
   \   00000A   7C11         MOV       R4,#0x11
   \   00000C   7D00         MOV       R5,#0x0
   \   00000E   7900         MOV       R1,#0x0
   \   000010   AA..         MOV       R2,?XSP + 0
   \   000012   AB..         MOV       R3,?XSP + 1
   \   000014   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
    952            if ( ZSUCCESS == osal_nv_item_init( ZCD_NV_USERDESC,
    953                   sizeof(UserDescriptorFormat_t), (void*)&ZDO_DefaultUserDescriptor ) )
   \   000017                ; Setup parameters for call to function osal_nv_item_init
   \   000017   A8..         MOV       R0,?XSP + 0
   \   000019   A9..         MOV       R1,?XSP + 1
   \   00001B   88..         MOV       ?V0,R0
   \   00001D   89..         MOV       ?V1,R1
   \   00001F   78..         MOV       R0,#?V0
   \   000021   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000024   7C11         MOV       R4,#0x11
   \   000026   7D00         MOV       R5,#0x0
   \   000028   7A81         MOV       R2,#-0x7f
   \   00002A   7B00         MOV       R3,#0x0
   \   00002C   12....       LCALL     `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   00002F   7402         MOV       A,#0x2
   \   000031   12....       LCALL     ?DEALLOC_XSTACK8
   \   000034   E9           MOV       A,R1
   \   000035   7033         JNZ       ??ZDApp_InitUserDesc_0
    954            {
    955              if ( ZSUCCESS == osal_nv_read( ZCD_NV_USERDESC, 0,
    956                   sizeof(UserDescriptorFormat_t), (void*)&ZDO_DefaultUserDescriptor ) )
   \   000037                ; Setup parameters for call to function osal_nv_read
   \   000037   78..         MOV       R0,#?V0
   \   000039   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003C   75..11       MOV       ?V0,#0x11
   \   00003F   75..00       MOV       ?V1,#0x0
   \   000042   78..         MOV       R0,#?V0
   \   000044   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000047   7C00         MOV       R4,#0x0
   \   000049   7D00         MOV       R5,#0x0
   \   00004B   7A81         MOV       R2,#-0x7f
   \   00004D   7B00         MOV       R3,#0x0
   \   00004F   12....       LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000052   7404         MOV       A,#0x4
   \   000054   12....       LCALL     ?DEALLOC_XSTACK8
   \   000057   E9           MOV       A,R1
   \   000058   7010         JNZ       ??ZDApp_InitUserDesc_0
    957              {
    958                if ( ZDO_DefaultUserDescriptor.len != 0 )
   \   00005A   85..82       MOV       DPL,?XSP + 0
   \   00005D   85..83       MOV       DPH,?XSP + 1
   \   000060   E0           MOVX      A,@DPTR
   \   000061   6007         JZ        ??ZDApp_InitUserDesc_0
    959                {
    960                  ZDO_Config_Node_Descriptor.UserDescAvail = TRUE;
   \   000063   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor
   \   000066   E0           MOVX      A,@DPTR
   \   000067   D2E4         SETB      0xE0 /* A   */.4
   \   000069   F0           MOVX      @DPTR,A
    961                }
    962              }
    963            }
    964          }
   \                     ??ZDApp_InitUserDesc_0:
   \   00006A   7411         MOV       A,#0x11
   \   00006C   02....       LJMP      ??Subroutine33_0 & 0xFFFF
    965          
    966          /*********************************************************************
    967           * @fn      ZDAppCheckForHoldKey()
    968           *
    969           * @brief   Check for key to set the device into Hold Auto Start
    970           *
    971           * @param   none
    972           *
    973           * @return  none
    974           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    975          void ZDAppCheckForHoldKey( void )
   \                     ZDAppCheckForHoldKey:
    976          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    977          #if (defined HAL_KEY) && (HAL_KEY == TRUE)
    978            // Get Keypad directly to see if a HOLD_START is needed.
    979            // Hold down the SW_BYPASS_START key (see OnBoard.h)
    980            // while booting to avoid starting up the device.
    981            if ( HalKeyRead () == SW_BYPASS_START)
   \   000004                ; Setup parameters for call to function HalKeyRead
   \   000004   12....       LCALL     `??HalKeyRead::?relay`; Banked call to: HalKeyRead
   \   000007   E9           MOV       A,R1
   \   000008   6401         XRL       A,#0x1
   \   00000A   7005         JNZ       ??ZDAppCheckForHoldKey_0
    982            {
    983              // Change the device state to HOLD on start up
    984              devState = DEV_HOLD;
   \   00000C   90....       MOV       DPTR,#devState
   \   00000F   E4           CLR       A
   \   000010   F0           MOVX      @DPTR,A
    985            }
    986          #endif // HAL_KEY
    987          }
   \                     ??ZDAppCheckForHoldKey_0:
   \   000011   02....       LJMP      ?Subroutine3 & 0xFFFF
    988          
    989          /*********************************************************************
    990           * @fn      ZDApp_ProcessOSALMsg()
    991           *
    992           * @brief   Process the incoming task message.
    993           *
    994           * @param   msgPtr - message to process
    995           *
    996           * @return  none
    997           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    998          void ZDApp_ProcessOSALMsg( osal_event_hdr_t *msgPtr )
   \                     ZDApp_ProcessOSALMsg:
    999          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   1000            // Data Confirmation message fields
   1001            uint8 sentEP;       // This should always be 0
   1002            uint8 sentStatus;
   1003            afDataConfirm_t *afDataConfirm;
   1004            uint8 tmp;
   1005          
   1006            switch ( msgPtr->event )
   \   00000A   8A82         MOV       DPL,R2
   \   00000C   8B83         MOV       DPH,R3
   \   00000E   E0           MOVX      A,@DPTR
   \   00000F   14           DEC       A
   \   000010   6023         JZ        ??ZDApp_ProcessOSALMsg_0
   \   000012   14           DEC       A
   \   000013   7003         JNZ       $+5
   \   000015   02....       LJMP      ??ZDApp_ProcessOSALMsg_1 & 0xFFFF
   \   000018   14           DEC       A
   \   000019   7003         JNZ       $+5
   \   00001B   02....       LJMP      ??ZDApp_ProcessOSALMsg_2 & 0xFFFF
   \   00001E   24E9         ADD       A,#-0x17
   \   000020   6007         JZ        ??ZDApp_ProcessOSALMsg_3
   \   000022   2447         ADD       A,#0x47
   \   000024   6009         JZ        ??ZDApp_ProcessOSALMsg_4
   \   000026   02....       LJMP      ??ZDApp_ProcessOSALMsg_5 & 0xFFFF
   1007            {
   1008              // Incoming ZDO Message
   1009              case AF_INCOMING_MSG_CMD:
   1010                ZDP_IncomingData( (afIncomingMSGPacket_t *)msgPtr );
   \                     ??ZDApp_ProcessOSALMsg_3:
   \   000029                ; Setup parameters for call to function ZDP_IncomingData
   \   000029   12....       LCALL     `??ZDP_IncomingData::?relay`; Banked call to: ZDP_IncomingData
   1011                break;
   \   00002C   02....       LJMP      ??ZDApp_ProcessOSALMsg_5 & 0xFFFF
   1012                
   1013              case ZDO_CB_MSG:
   1014                ZDApp_ProcessMsgCBs( (zdoIncomingMsg_t *)msgPtr );
   \                     ??ZDApp_ProcessOSALMsg_4:
   \   00002F                ; Setup parameters for call to function ZDApp_ProcessMsgCBs
   \   00002F   12....       LCALL     `??ZDApp_ProcessMsgCBs::?relay`; Banked call to: ZDApp_ProcessMsgCBs
   1015                break;
   \   000032   02....       LJMP      ??ZDApp_ProcessOSALMsg_5 & 0xFFFF
   1016          
   1017              case AF_DATA_CONFIRM_CMD:
   1018                // This message is received as a confirmation of a data packet sent.
   1019                // The status is of ZStatus_t type [defined in NLMEDE.h]
   1020                // The message fields are defined in AF.h
   1021                afDataConfirm = (afDataConfirm_t *)msgPtr;
   1022                sentEP = afDataConfirm->endpoint;
   1023                sentStatus = afDataConfirm->hdr.status;
   1024          
   1025                // Action taken when confirmation is received.
   1026          #if defined ( ZIGBEE_FREQ_AGILITY )
   1027                if ( pZDNwkMgr_ProcessDataConfirm )
   1028                  pZDNwkMgr_ProcessDataConfirm( afDataConfirm );
   1029          #endif
   1030                (void)sentEP;
   1031                (void)sentStatus;
   1032                break;
   1033          
   1034              case ZDO_NWK_DISC_CNF:
   1035                if (devState != DEV_NWK_DISC)
   \                     ??ZDApp_ProcessOSALMsg_0:
   \   000035   90....       MOV       DPTR,#devState
   \   000038   E0           MOVX      A,@DPTR
   \   000039   6402         XRL       A,#0x2
   \   00003B   6003         JZ        $+5
   \   00003D   02....       LJMP      ??ZDApp_ProcessOSALMsg_5 & 0xFFFF
   1036                  break;
   1037                
   1038                if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   \   000040   90....       MOV       DPTR,#zgDeviceLogicalType
   \   000043   E0           MOVX      A,@DPTR
   \   000044   6401         XRL       A,#0x1
   \   000046   6008         JZ        ??ZDApp_ProcessOSALMsg_6
   \   000048   E0           MOVX      A,@DPTR
   \   000049   6402         XRL       A,#0x2
   \   00004B   6003         JZ        $+5
   \   00004D   02....       LJMP      ??ZDApp_ProcessOSALMsg_5 & 0xFFFF
   1039                {
   1040                  // Process the network discovery scan results and choose a parent
   1041                  // device to join/rejoin itself
   1042                  networkDesc_t *pChosenNwk;                       
   1043                  if ( ( (pChosenNwk = ZDApp_NwkDescListProcessing()) != NULL ) && (zdoDiscCounter > NUM_DISC_ATTEMPTS) )
   \                     ??ZDApp_ProcessOSALMsg_6:
   \   000050                ; Setup parameters for call to function ZDApp_NwkDescListProcessing
   \   000050   12....       LCALL     `??ZDApp_NwkDescListProcessing::?relay`; Banked call to: ZDApp_NwkDescListProcessing
   \   000053   8A..         MOV       ?V0,R2
   \   000055   8B..         MOV       ?V1,R3
   \   000057   AE..         MOV       R6,?V0
   \   000059   AF..         MOV       R7,?V1
   \   00005B   EE           MOV       A,R6
   \   00005C   4F           ORL       A,R7
   \   00005D   7003         JNZ       $+5
   \   00005F   02....       LJMP      ??ZDApp_ProcessOSALMsg_7 & 0xFFFF
   \   000062   90....       MOV       DPTR,#zdoDiscCounter
   \   000065   E0           MOVX      A,@DPTR
   \   000066   C3           CLR       C
   \   000067   9403         SUBB      A,#0x3
   \   000069   5003         JNC       $+5
   \   00006B   02....       LJMP      ??ZDApp_ProcessOSALMsg_7 & 0xFFFF
   1044                  {
   1045                    if ( devStartMode == MODE_JOIN )
   \   00006E   90....       MOV       DPTR,#devStartMode
   \   000071   E0           MOVX      A,@DPTR
   \   000072   7059         JNZ       ??ZDApp_ProcessOSALMsg_8
   1046                    {            
   1047                      devState = DEV_NWK_JOINING;
   \   000074   90....       MOV       DPTR,#devState
   \   000077   7403         MOV       A,#0x3
   \   000079   12....       LCALL     ?Subroutine8 & 0xFFFF
   1048                      
   1049                      ZDApp_NodeProfileSync( pChosenNwk->stackProfile);
   \                     ??CrossCallReturnLabel_0:
   \   00007C   E0           MOVX      A,@DPTR
   \   00007D   F9           MOV       R1,A
   \   00007E   12....       LCALL     `??ZDApp_NodeProfileSync::?relay`; Banked call to: ZDApp_NodeProfileSync
   1050                      
   1051                      if ( NLME_JoinRequest( pChosenNwk->extendedPANID, pChosenNwk->panId,
   1052                                            pChosenNwk->logicalChannel, 
   1053                                            ZDO_Config_Node_Descriptor.CapabilityFlags, 
   1054                                            pChosenNwk->chosenRouter, pChosenNwk->chosenRouterDepth ) != ZSuccess )
   \   000081                ; Setup parameters for call to function NLME_JoinRequest
   \   000081   8E82         MOV       DPL,R6
   \   000083   8F83         MOV       DPH,R7
   \   000085   A3           INC       DPTR
   \   000086   A3           INC       DPTR
   \   000087   A3           INC       DPTR
   \   000088   A3           INC       DPTR
   \   000089   A3           INC       DPTR
   \   00008A   A3           INC       DPTR
   \   00008B   A3           INC       DPTR
   \   00008C   A3           INC       DPTR
   \   00008D   A3           INC       DPTR
   \   00008E   A3           INC       DPTR
   \   00008F   E0           MOVX      A,@DPTR
   \   000090   F5..         MOV       ?V0,A
   \   000092   78..         MOV       R0,#?V0
   \   000094   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000097   8E82         MOV       DPL,R6
   \   000099   8F83         MOV       DPH,R7
   \   00009B   A3           INC       DPTR
   \   00009C   A3           INC       DPTR
   \   00009D   A3           INC       DPTR
   \   00009E   A3           INC       DPTR
   \   00009F   A3           INC       DPTR
   \   0000A0   A3           INC       DPTR
   \   0000A1   A3           INC       DPTR
   \   0000A2   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   0000A5   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor + 2
   \   0000A8   E0           MOVX      A,@DPTR
   \   0000A9   F5..         MOV       ?V0,A
   \   0000AB   78..         MOV       R0,#?V0
   \   0000AD   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000B0   8E82         MOV       DPL,R6
   \   0000B2   8F83         MOV       DPH,R7
   \   0000B4   A3           INC       DPTR
   \   0000B5   A3           INC       DPTR
   \   0000B6   E0           MOVX      A,@DPTR
   \   0000B7   F9           MOV       R1,A
   \   0000B8   8E82         MOV       DPL,R6
   \   0000BA   8F83         MOV       DPH,R7
   \   0000BC   E0           MOVX      A,@DPTR
   \   0000BD   FC           MOV       R4,A
   \   0000BE   A3           INC       DPTR
   \   0000BF   E0           MOVX      A,@DPTR
   \   0000C0   12....       LCALL     ?Subroutine24 & 0xFFFF
   1055                      {
   1056                        ZDApp_NetworkInit( (uint16)(NWK_START_DELAY
   1057                                                    + ((uint16)(osal_rand()& EXTENDED_JOINING_RANDOM_MASK))) );
   1058                      }             
   1059                    } // if ( devStartMode == MODE_JOIN )
   \                     ??CrossCallReturnLabel_45:
   \   0000C3   12....       LCALL     `??NLME_JoinRequest::?relay`; Banked call to: NLME_JoinRequest
   \   0000C6   7404         MOV       A,#0x4
   \   0000C8   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000CB   806B         SJMP      ??ZDApp_ProcessOSALMsg_9
   1060                    else if ( devStartMode == MODE_REJOIN )
   \                     ??ZDApp_ProcessOSALMsg_8:
   \   0000CD   6403         XRL       A,#0x3
   \   0000CF   7078         JNZ       ??ZDApp_ProcessOSALMsg_10
   1061                    {
   1062                      devState = DEV_NWK_REJOIN;
   \   0000D1   90....       MOV       DPTR,#devState
   \   0000D4   7404         MOV       A,#0x4
   \   0000D6   F0           MOVX      @DPTR,A
   1063                      
   1064                      // Before trying to do rejoin, check if the device has a valid short address
   1065                      // If not, generate a random short address for itself
   1066                      if ( _NIB.nwkDevAddress == INVALID_NODE_ADDR )
   \   0000D7   90....       MOV       DPTR,#_NIB + 20
   \   0000DA   E0           MOVX      A,@DPTR
   \   0000DB   64FE         XRL       A,#0xfe
   \   0000DD   7003         JNZ       ??ZDApp_ProcessOSALMsg_11
   \   0000DF   A3           INC       DPTR
   \   0000E0   E0           MOVX      A,@DPTR
   \   0000E1   F4           CPL       A
   \                     ??ZDApp_ProcessOSALMsg_11:
   \   0000E2   7012         JNZ       ??ZDApp_ProcessOSALMsg_12
   1067                      {
   1068                        _NIB.nwkDevAddress = osal_rand();
   \   0000E4                ; Setup parameters for call to function osal_rand
   \   0000E4   12....       LCALL     `??osal_rand::?relay`; Banked call to: osal_rand
   \   0000E7   90....       MOV       DPTR,#_NIB + 20
   \   0000EA   12....       LCALL     ??Subroutine41_0 & 0xFFFF
   1069                        ZMacSetReq( ZMacShortAddress, (byte*)&_NIB.nwkDevAddress );
   \                     ??CrossCallReturnLabel_65:
   \   0000ED                ; Setup parameters for call to function ZMacSetReq
   \   0000ED   7A..         MOV       R2,#(_NIB + 20) & 0xff
   \   0000EF   7B..         MOV       R3,#((_NIB + 20) >> 8) & 0xff
   \   0000F1   7953         MOV       R1,#0x53
   \   0000F3   12....       LCALL     `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
   1070                      }
   1071                      
   1072                      if ( ZG_SECURE_ENABLED )
   1073                      {
   1074                        ZDApp_RestoreNwkKey();
   1075                      }
   1076                      
   1077                      // Check if the device has a valid PanID, if not, set it to the discovered Pan
   1078                      if ( _NIB.nwkPanId == INVALID_PAN_ID )
   \                     ??ZDApp_ProcessOSALMsg_12:
   \   0000F6   90....       MOV       DPTR,#_NIB + 33
   \   0000F9   E0           MOVX      A,@DPTR
   \   0000FA   64FE         XRL       A,#0xfe
   \   0000FC   7003         JNZ       ??ZDApp_ProcessOSALMsg_13
   \   0000FE   A3           INC       DPTR
   \   0000FF   E0           MOVX      A,@DPTR
   \   000100   F4           CPL       A
   \                     ??ZDApp_ProcessOSALMsg_13:
   \   000101   7014         JNZ       ??ZDApp_ProcessOSALMsg_14
   1079                      {
   1080                        _NIB.nwkPanId = pChosenNwk->panId;
   \   000103   12....       LCALL     ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   000106   90....       MOV       DPTR,#_NIB + 33
   \   000109   E8           MOV       A,R0
   \   00010A   F0           MOVX      @DPTR,A
   \   00010B   A3           INC       DPTR
   \   00010C   E9           MOV       A,R1
   \   00010D   F0           MOVX      @DPTR,A
   1081                        ZMacSetReq( ZMacPanId, (byte*)&(_NIB.nwkPanId) );
   \   00010E                ; Setup parameters for call to function ZMacSetReq
   \   00010E   7A..         MOV       R2,#(_NIB + 33) & 0xff
   \   000110   7B..         MOV       R3,#((_NIB + 33) >> 8) & 0xff
   \   000112   7950         MOV       R1,#0x50
   \   000114   12....       LCALL     `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
   1082                      }
   1083                      
   1084                      tmp = true;
   \                     ??ZDApp_ProcessOSALMsg_14:
   \   000117   85..82       MOV       DPL,?XSP + 0
   \   00011A   85..83       MOV       DPH,?XSP + 1
   \   00011D   7401         MOV       A,#0x1
   \   00011F   F0           MOVX      @DPTR,A
   1085                      ZMacSetReq( ZMacRxOnIdle, &tmp ); // Set receiver always on during rejoin 
   \   000120                ; Setup parameters for call to function ZMacSetReq
   \   000120   AA..         MOV       R2,?XSP + 0
   \   000122   AB..         MOV       R3,?XSP + 1
   \   000124   7952         MOV       R1,#0x52
   \   000126   12....       LCALL     `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
   1086                      if ( NLME_ReJoinRequest( ZDO_UseExtendedPANID, pChosenNwk->logicalChannel) != ZSuccess )
   \   000129                ; Setup parameters for call to function NLME_ReJoinRequest
   \   000129   8E82         MOV       DPL,R6
   \   00012B   8F83         MOV       DPH,R7
   \   00012D   A3           INC       DPTR
   \   00012E   A3           INC       DPTR
   \   00012F   E0           MOVX      A,@DPTR
   \   000130   F9           MOV       R1,A
   \   000131   7A..         MOV       R2,#ZDO_UseExtendedPANID & 0xff
   \   000133   7B..         MOV       R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   000135   12....       LCALL     `??NLME_ReJoinRequest::?relay`; Banked call to: NLME_ReJoinRequest
   \                     ??ZDApp_ProcessOSALMsg_9:
   \   000138   E9           MOV       A,R1
   \   000139   600E         JZ        ??ZDApp_ProcessOSALMsg_10
   1087                      {
   1088                        ZDApp_NetworkInit( (uint16)(NWK_START_DELAY
   1089                                                    + ((uint16)(osal_rand()& EXTENDED_JOINING_RANDOM_MASK))) );
   \   00013B                ; Setup parameters for call to function osal_rand
   \   00013B   12....       LCALL     `??osal_rand::?relay`; Banked call to: osal_rand
   \   00013E                ; Setup parameters for call to function ZDApp_NetworkInit
   \   00013E   EA           MOV       A,R2
   \   00013F   547F         ANL       A,#0x7f
   \   000141   2464         ADD       A,#0x64
   \   000143   FA           MOV       R2,A
   \   000144   7B00         MOV       R3,#0x0
   \   000146   12....       LCALL     `??ZDApp_NetworkInit::?relay`; Banked call to: ZDApp_NetworkInit
   1090                      }
   1091                    } // else if ( devStartMode == MODE_REJOIN )
   1092                    
   1093                    if ( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE )
   \                     ??ZDApp_ProcessOSALMsg_10:
   \   000149   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor + 2
   \   00014C   E0           MOVX      A,@DPTR
   \   00014D   A2E3         MOV       C,0xE0 /* A   */.3
   \   00014F   506F         JNC       ??ZDApp_ProcessOSALMsg_5
   1094                    {
   1095                      // The receiver is on, turn network layer polling off.
   1096                      NLME_SetPollRate( 0 );
   \   000151                ; Setup parameters for call to function NLME_SetPollRate
   \   000151   7A00         MOV       R2,#0x0
   \   000153   7B00         MOV       R3,#0x0
   \   000155   12....       LCALL     `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
   1097                      NLME_SetQueuedPollRate( 0 );
   \   000158                ; Setup parameters for call to function NLME_SetQueuedPollRate
   \   000158   7A00         MOV       R2,#0x0
   \   00015A   7B00         MOV       R3,#0x0
   \   00015C   12....       LCALL     `??NLME_SetQueuedPollRate::?relay`; Banked call to: NLME_SetQueuedPollRate
   1098                      NLME_SetResponseRate( 0 );
   \   00015F                ; Setup parameters for call to function NLME_SetResponseRate
   \   00015F   7A00         MOV       R2,#0x0
   \   000161   7B00         MOV       R3,#0x0
   \   000163   12....       LCALL     `??NLME_SetResponseRate::?relay`; Banked call to: NLME_SetResponseRate
   \   000166   8058         SJMP      ??ZDApp_ProcessOSALMsg_5
   1099                    }
   1100                    else
   1101                    {
   1102                      if ( (ZG_SECURE_ENABLED) && (devStartMode == MODE_JOIN) )
   1103                      {
   1104                        ZDApp_SavedPollRate = zgPollRate;
   1105                        NLME_SetPollRate( zgRejoinPollRate );
   1106                      }
   1107                    }
   1108                  }
   1109                  else
   1110                  {
   1111                    if ( continueJoining )
   \                     ??ZDApp_ProcessOSALMsg_7:
   \   000168   90....       MOV       DPTR,#continueJoining
   \   00016B   E0           MOVX      A,@DPTR
   \   00016C   6052         JZ        ??ZDApp_ProcessOSALMsg_5
   1112                    {
   1113              #if defined ( MANAGED_SCAN )
   1114                      ZDApp_NetworkInit( MANAGEDSCAN_DELAY_BETWEEN_SCANS );
   1115              #else
   1116                      zdoDiscCounter++;
   \   00016E   90....       MOV       DPTR,#zdoDiscCounter
   \   000171   E0           MOVX      A,@DPTR
   \   000172   04           INC       A
   \   000173   F0           MOVX      @DPTR,A
   1117                      ZDApp_NetworkInit( (uint16)(BEACON_REQUEST_DELAY
   1118                            + ((uint16)(osal_rand()& BEACON_REQ_DELAY_MASK))) );
   \   000174                ; Setup parameters for call to function osal_rand
   \   000174   12....       LCALL     `??osal_rand::?relay`; Banked call to: osal_rand
   \   000177                ; Setup parameters for call to function ZDApp_NetworkInit
   \   000177   EA           MOV       A,R2
   \   000178   2464         ADD       A,#0x64
   \   00017A   FA           MOV       R2,A
   \   00017B   E4           CLR       A
   \   00017C   3400         ADDC      A,#0x0
   \   00017E   FB           MOV       R3,A
   \   00017F   803C         SJMP      ??ZDApp_ProcessOSALMsg_15
   1119              #endif
   1120                    }
   1121                  }
   1122                }
   1123                break;
   1124          
   1125              case ZDO_NWK_JOIN_IND:
   1126                if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   \                     ??ZDApp_ProcessOSALMsg_1:
   \   000181   90....       MOV       DPTR,#zgDeviceLogicalType
   \   000184   E0           MOVX      A,@DPTR
   \   000185   6401         XRL       A,#0x1
   \   000187   6005         JZ        ??ZDApp_ProcessOSALMsg_16
   \   000189   E0           MOVX      A,@DPTR
   \   00018A   6402         XRL       A,#0x2
   \   00018C   7032         JNZ       ??ZDApp_ProcessOSALMsg_5
   1127                {
   1128                  ZDApp_ProcessNetworkJoin();
   \                     ??ZDApp_ProcessOSALMsg_16:
   \   00018E                ; Setup parameters for call to function ZDApp_ProcessNetworkJoin
   \   00018E   12....       LCALL     `??ZDApp_ProcessNetworkJoin::?relay`; Banked call to: ZDApp_ProcessNetworkJoin
   \   000191   802D         SJMP      ??ZDApp_ProcessOSALMsg_5
   1129                }
   1130                break;
   1131          
   1132              case ZDO_NWK_JOIN_REQ:
   1133                if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   \                     ??ZDApp_ProcessOSALMsg_2:
   \   000193   90....       MOV       DPTR,#zgDeviceLogicalType
   \   000196   E0           MOVX      A,@DPTR
   \   000197   6401         XRL       A,#0x1
   \   000199   6005         JZ        ??ZDApp_ProcessOSALMsg_17
   \   00019B   E0           MOVX      A,@DPTR
   \   00019C   6402         XRL       A,#0x2
   \   00019E   7020         JNZ       ??ZDApp_ProcessOSALMsg_5
   1134                {
   1135                  retryCnt = 0;
   \                     ??ZDApp_ProcessOSALMsg_17:
   \   0001A0   90....       MOV       DPTR,#retryCnt
   \   0001A3   E4           CLR       A
   \   0001A4   F0           MOVX      @DPTR,A
   1136                  devStartMode = MODE_RESUME;
   \   0001A5   90....       MOV       DPTR,#devStartMode
   \   0001A8   04           INC       A
   \   0001A9   F0           MOVX      @DPTR,A
   1137                  _tmpRejoinState = true;
   \   0001AA   90....       MOV       DPTR,#_tmpRejoinState
   \   0001AD   12....       LCALL     ?Subroutine12 & 0xFFFF
   1138                  osal_cpyExtAddr( ZDO_UseExtendedPANID, _NIB.extendedPANID );
   \                     ??CrossCallReturnLabel_7:
   \   0001B0   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   1139                  zgDefaultStartingScanDuration = BEACON_ORDER_60_MSEC;
   \   0001B3   90....       MOV       DPTR,#zgDefaultStartingScanDuration
   \   0001B6   7402         MOV       A,#0x2
   \   0001B8   F0           MOVX      @DPTR,A
   1140                  ZDApp_NetworkInit( 0 );
   \   0001B9                ; Setup parameters for call to function ZDApp_NetworkInit
   \   0001B9   7A00         MOV       R2,#0x0
   \   0001BB   7B00         MOV       R3,#0x0
   \                     ??ZDApp_ProcessOSALMsg_15:
   \   0001BD   12....       LCALL     `??ZDApp_NetworkInit::?relay`; Banked call to: ZDApp_NetworkInit
   1141                }
   1142                break;
   1143          
   1144              default:
   1145                if ( ZG_SECURE_ENABLED )
   1146                  ZDApp_ProcessSecMsg( msgPtr );
   1147                break;
   1148            }
   1149          
   1150          }
   \                     ??ZDApp_ProcessOSALMsg_5:
   \   0001C0   7401         MOV       A,#0x1
   \   0001C2   02....       LJMP      ??Subroutine33_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   FD           MOV       R5,A
   \   000001                REQUIRE ??Subroutine32_0
   \   000001                ; // Fall through to label ??Subroutine32_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine32_0:
   \   000000   EE           MOV       A,R6
   \   000001   240B         ADD       A,#0xb
   \   000003   FA           MOV       R2,A
   \   000004   E4           CLR       A
   \   000005   3F           ADDC      A,R7
   \   000006   FB           MOV       R3,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                ; Setup parameters for call to function ZDApp_NodeProfileSync
   \   000001   8E82         MOV       DPL,R6
   \   000003   8F83         MOV       DPH,R7
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A   A3           INC       DPTR
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   8E82         MOV       DPL,R6
   \   000002   8F83         MOV       DPH,R7
   \   000004                REQUIRE ??Subroutine40_0
   \   000004                ; // Fall through to label ??Subroutine40_0
   1151          
   1152          /*********************************************************************
   1153           * @fn      ZDApp_ProcessMsgCBs()
   1154           *
   1155           * @brief   Process response messages
   1156           *
   1157           * @param   none
   1158           *
   1159           * @return  none
   1160           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1161          void ZDApp_ProcessMsgCBs( zdoIncomingMsg_t *inMsg )
   \                     ZDApp_ProcessMsgCBs:
   1162          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV       A,#-0x15
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   1163            switch ( inMsg->clusterID )
   \   00000E   12....       LCALL     ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   000011   F5..         MOV       ?V1,A
   \   000013   78..         MOV       R0,#?V0
   \   000015   12....       LCALL     ?US_SWITCH_SPARSE
   \                     `?<Jumptable for ZDApp_ProcessMsgCBs>_0`:
   \   000018   0200         DW        2
   \   00001A   2100         DW        33
   \   00001C   2200         DW        34
   \   00001E   ....         DW        ??ZDApp_ProcessMsgCBs_0
   \   000020   0080         DW        32768
   \   000022   0180         DW        32769
   \   000024   ....         DW        ??ZDApp_ProcessMsgCBs_1
   \   000026   0000         DW        0
   \   000028   ....         DW        ??ZDApp_ProcessMsgCBs_2
   1164            {
   1165          #if defined ( ZDO_NWKADDR_REQUEST ) || defined ( ZDO_IEEEADDR_REQUEST ) || defined ( REFLECTOR )
   1166              case NWK_addr_rsp:
   1167              case IEEE_addr_rsp:
   1168                {
   1169                  ZDO_NwkIEEEAddrResp_t *pAddrRsp;
   1170                  pAddrRsp = ZDO_ParseAddrRsp( inMsg );
   \                     ??ZDApp_ProcessMsgCBs_1:
   \   00002A                ; Setup parameters for call to function ZDO_ParseAddrRsp
   \   00002A   12....       LCALL     `??ZDO_ParseAddrRsp::?relay`; Banked call to: ZDO_ParseAddrRsp
   \   00002D   8A..         MOV       ?V0,R2
   \   00002F   8B..         MOV       ?V1,R3
   \   000031   AE..         MOV       R6,?V0
   \   000033   AF..         MOV       R7,?V1
   1171                  if ( pAddrRsp )
   \   000035   EE           MOV       A,R6
   \   000036   4F           ORL       A,R7
   \   000037   6032         JZ        ??ZDApp_ProcessMsgCBs_2
   1172                  {
   1173                    if ( pAddrRsp->status == ZSuccess )
   \   000039   8E82         MOV       DPL,R6
   \   00003B   8F83         MOV       DPH,R7
   \   00003D   E0           MOVX      A,@DPTR
   \   00003E   7010         JNZ       ??ZDApp_ProcessMsgCBs_3
   1174                    {
   1175                      ZDO_UpdateAddrManager( pAddrRsp->nwkAddr, pAddrRsp->extAddr );
   \   000040                ; Setup parameters for call to function ZDO_UpdateAddrManager
   \   000040   EE           MOV       A,R6
   \   000041   2403         ADD       A,#0x3
   \   000043   FC           MOV       R4,A
   \   000044   E4           CLR       A
   \   000045   3F           ADDC      A,R7
   \   000046   FD           MOV       R5,A
   \   000047   A3           INC       DPTR
   \   000048   E0           MOVX      A,@DPTR
   \   000049   FA           MOV       R2,A
   \   00004A   A3           INC       DPTR
   \   00004B   E0           MOVX      A,@DPTR
   \   00004C   FB           MOV       R3,A
   \   00004D   12....       LCALL     `??ZDO_UpdateAddrManager::?relay`; Banked call to: ZDO_UpdateAddrManager
   1176                    }
   1177                    osal_mem_free( pAddrRsp );
   \                     ??ZDApp_ProcessMsgCBs_3:
   \   000050                ; Setup parameters for call to function osal_mem_free
   \   000050   EE           MOV       A,R6
   \   000051   FA           MOV       R2,A
   \   000052   EF           MOV       A,R7
   \   000053   FB           MOV       R3,A
   \   000054   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000057   8012         SJMP      ??ZDApp_ProcessMsgCBs_2
   1178                  }
   1179                }
   1180                break;
   1181          #endif
   1182                
   1183          #if defined ( REFLECTOR )
   1184              case Bind_req:
   1185              case Unbind_req:
   1186                {
   1187                  ZDO_BindUnbindReq_t bindReq;
   1188                  ZDO_ParseBindUnbindReq( inMsg, &bindReq );
   \                     ??ZDApp_ProcessMsgCBs_0:
   \   000059                ; Setup parameters for call to function ZDO_ParseBindUnbindReq
   \   000059   AC..         MOV       R4,?XSP + 0
   \   00005B   AD..         MOV       R5,?XSP + 1
   \   00005D   12....       LCALL     `??ZDO_ParseBindUnbindReq::?relay`; Banked call to: ZDO_ParseBindUnbindReq
   1189                  ZDO_ProcessBindUnbindReq( inMsg, &bindReq );
   \   000060                ; Setup parameters for call to function ZDO_ProcessBindUnbindReq
   \   000060   AC..         MOV       R4,?XSP + 0
   \   000062   AD..         MOV       R5,?XSP + 1
   \   000064   EE           MOV       A,R6
   \   000065   FA           MOV       R2,A
   \   000066   EF           MOV       A,R7
   \   000067   FB           MOV       R3,A
   \   000068   12....       LCALL     `??ZDO_ProcessBindUnbindReq::?relay`; Banked call to: ZDO_ProcessBindUnbindReq
   1190                }
   1191                break;
   1192          #endif      
   1193          
   1194          #if ( ZG_BUILD_COORDINATOR_TYPE )
   1195              case Bind_rsp:
   1196              case Unbind_rsp:
   1197                if (ZG_DEVICE_COORDINATOR_TYPE && matchED)
   1198                {
   1199                  ZDMatchSendState(
   1200                       (uint8)((inMsg->clusterID == Bind_rsp) ? ZDMATCH_REASON_BIND_RSP : ZDMATCH_REASON_UNBIND_RSP),
   1201                       ZDO_ParseBindRsp(inMsg), inMsg->TransSeq );
   1202                }
   1203                break;
   1204                
   1205              case End_Device_Bind_req:
   1206                if (ZG_DEVICE_COORDINATOR_TYPE)
   1207                {
   1208                  ZDEndDeviceBind_t bindReq;
   1209                  ZDO_ParseEndDeviceBindReq( inMsg, &bindReq );
   1210                  ZDO_MatchEndDeviceBind( &bindReq );
   1211                  
   1212                  // Freeing the cluster lists - if allocated.
   1213                  if ( bindReq.numInClusters )
   1214                    osal_mem_free( bindReq.inClusters );
   1215                  if ( bindReq.numOutClusters )
   1216                    osal_mem_free( bindReq.outClusters );
   1217                }
   1218                break;
   1219          #endif
   1220            }
   1221          }
   \                     ??ZDApp_ProcessMsgCBs_2:
   \   00006B                REQUIRE ?Subroutine7
   \   00006B                ; // Fall through to label ?Subroutine7

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   7415         MOV       A,#0x15
   \   000002   02....       LJMP      ??Subroutine33_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   12....       LCALL     ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   EE           MOV       A,R6
   \   000001   240C         ADD       A,#0xc
   \   000003   F582         MOV       DPL,A
   \   000005   E4           CLR       A
   \   000006   3F           ADDC      A,R7
   \   000007   F583         MOV       DPH,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   12....       LCALL     ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   000003   F5..         MOV       ?V0,A
   \   000005   A3           INC       DPTR
   \   000006   E0           MOVX      A,@DPTR
   \   000007   22           RET
   1222          
   1223          /*********************************************************************
   1224           * @fn      ZDApp_RegisterCBs()
   1225           *
   1226           * @brief   Process response messages
   1227           *
   1228           * @param   none
   1229           *
   1230           * @return  none
   1231           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1232          void ZDApp_RegisterCBs( void )
   \                     ZDApp_RegisterCBs:
   1233          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1234          #if defined ( ZDO_IEEEADDR_REQUEST ) || defined ( REFLECTOR )
   1235            ZDO_RegisterForZDOMsg( ZDAppTaskID, IEEE_addr_rsp );
   \   000004                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000004   7A01         MOV       R2,#0x1
   \   000006   7B80         MOV       R3,#-0x80
   \   000008   90....       MOV       DPTR,#ZDAppTaskID
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   F9           MOV       R1,A
   \   00000D   12....       LCALL     `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
   1236          #endif
   1237          #if defined ( ZDO_NWKADDR_REQUEST ) || defined ( REFLECTOR )
   1238            ZDO_RegisterForZDOMsg( ZDAppTaskID, NWK_addr_rsp );
   \   000010                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000010   7A00         MOV       R2,#0x0
   \   000012   7B80         MOV       R3,#-0x80
   \   000014   90....       MOV       DPTR,#ZDAppTaskID
   \   000017   E0           MOVX      A,@DPTR
   \   000018   F9           MOV       R1,A
   \   000019   12....       LCALL     `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
   1239          #endif  
   1240          #if ZG_BUILD_COORDINATOR_TYPE
   1241            ZDO_RegisterForZDOMsg( ZDAppTaskID, Bind_rsp );
   1242            ZDO_RegisterForZDOMsg( ZDAppTaskID, Unbind_rsp );
   1243            ZDO_RegisterForZDOMsg( ZDAppTaskID, End_Device_Bind_req );
   1244          #endif
   1245          #if defined ( REFLECTOR )
   1246            ZDO_RegisterForZDOMsg( ZDAppTaskID, Bind_req );
   \   00001C                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   00001C   7A21         MOV       R2,#0x21
   \   00001E   7B00         MOV       R3,#0x0
   \   000020   90....       MOV       DPTR,#ZDAppTaskID
   \   000023   E0           MOVX      A,@DPTR
   \   000024   F9           MOV       R1,A
   \   000025   12....       LCALL     `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
   1247            ZDO_RegisterForZDOMsg( ZDAppTaskID, Unbind_req );
   \   000028                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000028   7A22         MOV       R2,#0x22
   \   00002A   7B00         MOV       R3,#0x0
   \   00002C   90....       MOV       DPTR,#ZDAppTaskID
   \   00002F   E0           MOVX      A,@DPTR
   \   000030   F9           MOV       R1,A
   \   000031   12....       LCALL     `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
   1248          #endif  
   1249          }
   \   000034   02....       LJMP      ?Subroutine3 & 0xFFFF
   1250          
   1251          /*********************************************************************
   1252           * @fn      ZDApp_ProcessSecMsg()
   1253           *
   1254           * @brief   Process the incoming security message.
   1255           *
   1256           * @param   msgPtr - message to process
   1257           *
   1258           * @return  none
   1259           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1260          void ZDApp_ProcessSecMsg( osal_event_hdr_t *msgPtr )
   \                     ZDApp_ProcessSecMsg:
   1261          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1262            switch ( msgPtr->event )
   \   000004   8A82         MOV       DPL,R2
   \   000006   8B83         MOV       DPH,R3
   \   000008   E0           MOVX      A,@DPTR
   \   000009   24FA         ADD       A,#-0x6
   \   00000B   6006         JZ        ??ZDApp_ProcessSecMsg_0
   \   00000D   24FC         ADD       A,#-0x4
   \   00000F   6014         JZ        ??ZDApp_ProcessSecMsg_1
   \   000011   8022         SJMP      ??ZDApp_ProcessSecMsg_2
   1263            {
   1264              case ZDO_ESTABLISH_KEY_CFM:
   1265                if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
   1266                {
   1267                  ZDSecMgrEstablishKeyCfm( (ZDO_EstablishKeyCfm_t*)msgPtr );
   1268                }
   1269                break;
   1270          
   1271              case ZDO_ESTABLISH_KEY_IND:
   1272                if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
   1273                {
   1274                  if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   1275                  {
   1276                    ZDSecMgrEstablishKeyInd( (ZDO_EstablishKeyInd_t*)msgPtr );
   1277                  }
   1278                }
   1279                break;
   1280          
   1281              case ZDO_TRANSPORT_KEY_IND:
   1282                if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   \                     ??ZDApp_ProcessSecMsg_0:
   \   000013   90....       MOV       DPTR,#zgDeviceLogicalType
   \   000016   E0           MOVX      A,@DPTR
   \   000017   6401         XRL       A,#0x1
   \   000019   6005         JZ        ??ZDApp_ProcessSecMsg_3
   \   00001B   E0           MOVX      A,@DPTR
   \   00001C   6402         XRL       A,#0x2
   \   00001E   7015         JNZ       ??ZDApp_ProcessSecMsg_2
   1283                {
   1284                  ZDSecMgrTransportKeyInd( (ZDO_TransportKeyInd_t*)msgPtr );
   \                     ??ZDApp_ProcessSecMsg_3:
   \   000020                ; Setup parameters for call to function ZDSecMgrTransportKeyInd
   \   000020   12....       LCALL     `??ZDSecMgrTransportKeyInd::?relay`; Banked call to: ZDSecMgrTransportKeyInd
   \   000023   8010         SJMP      ??ZDApp_ProcessSecMsg_2
   1285                }
   1286                break;
   1287          
   1288              case ZDO_UPDATE_DEVICE_IND:
   1289                if ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
   1290                {
   1291                  ZDSecMgrUpdateDeviceInd( (ZDO_UpdateDeviceInd_t*)msgPtr );
   1292                }
   1293                break;
   1294          
   1295              case ZDO_REMOVE_DEVICE_IND:
   1296                if ( ZG_BUILD_RTRONLY_TYPE && ( zgDeviceLogicalType == ZG_DEVICETYPE_ROUTER ) )
   1297                {
   1298                  ZDSecMgrRemoveDeviceInd( (ZDO_RemoveDeviceInd_t*)msgPtr );
   1299                }
   1300                break;
   1301          
   1302              case ZDO_REQUEST_KEY_IND:
   1303                if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
   1304                {
   1305                  if ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
   1306                  {
   1307                    ZDSecMgrRequestKeyInd( (ZDO_RequestKeyInd_t*)msgPtr );
   1308                  }
   1309                }
   1310                break;
   1311          
   1312              case ZDO_SWITCH_KEY_IND:
   1313                if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   \                     ??ZDApp_ProcessSecMsg_1:
   \   000025   90....       MOV       DPTR,#zgDeviceLogicalType
   \   000028   E0           MOVX      A,@DPTR
   \   000029   6401         XRL       A,#0x1
   \   00002B   6005         JZ        ??ZDApp_ProcessSecMsg_4
   \   00002D   E0           MOVX      A,@DPTR
   \   00002E   6402         XRL       A,#0x2
   \   000030   7003         JNZ       ??ZDApp_ProcessSecMsg_2
   1314                {
   1315                  ZDSecMgrSwitchKeyInd( (ZDO_SwitchKeyInd_t*)msgPtr );
   \                     ??ZDApp_ProcessSecMsg_4:
   \   000032                ; Setup parameters for call to function ZDSecMgrSwitchKeyInd
   \   000032   12....       LCALL     `??ZDSecMgrSwitchKeyInd::?relay`; Banked call to: ZDSecMgrSwitchKeyInd
   1316                }
   1317                break;
   1318              
   1319              case ZDO_AUTHENTICATE_IND:
   1320                if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
   1321                {
   1322                  ZDSecMgrAuthenticateInd( (ZDO_AuthenticateInd_t*)msgPtr );
   1323                }
   1324                break;
   1325          
   1326              case ZDO_AUTHENTICATE_CFM:
   1327                if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
   1328                {
   1329                  ZDSecMgrAuthenticateCfm( (ZDO_AuthenticateCfm_t*)msgPtr );
   1330                }
   1331                break;
   1332          
   1333              default:
   1334                // Unsupported messages
   1335                break;
   1336            }
   1337          }
   \                     ??ZDApp_ProcessSecMsg_2:
   \   000035   02....       LJMP      ?Subroutine3 & 0xFFFF
   1338          
   1339          /*********************************************************************
   1340           * @fn      ZDApp_ProcessNetworkJoin()
   1341           *
   1342           * @brief
   1343           *
   1344           *   Save off the Network key information.
   1345           *
   1346           * @param   none
   1347           *
   1348           * @return  none
   1349           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1350          void ZDApp_ProcessNetworkJoin( void )
   \                     ZDApp_ProcessNetworkJoin:
   1351          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   1352            if ( (devState == DEV_NWK_JOINING) ||
   1353                ((devState == DEV_NWK_ORPHAN)  &&
   1354                 (ZDO_Config_Node_Descriptor.LogicalType == NODETYPE_ROUTER)) )
   \   00000A   90....       MOV       DPTR,#devState
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   6403         XRL       A,#0x3
   \   000010   6015         JZ        ??ZDApp_ProcessNetworkJoin_0
   \   000012   E0           MOVX      A,@DPTR
   \   000013   640A         XRL       A,#0xa
   \   000015   6003         JZ        $+5
   \   000017   02....       LJMP      ??ZDApp_ProcessNetworkJoin_1 & 0xFFFF
   \   00001A   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor
   \   00001D   E0           MOVX      A,@DPTR
   \   00001E   5407         ANL       A,#0x7
   \   000020   6401         XRL       A,#0x1
   \   000022   6003         JZ        $+5
   \   000024   02....       LJMP      ??ZDApp_ProcessNetworkJoin_2 & 0xFFFF
   1355            {
   1356              // Result of a Join attempt by this device.
   1357              if ( nwkStatus == ZSuccess )
   \                     ??ZDApp_ProcessNetworkJoin_0:
   \   000027   90....       MOV       DPTR,#nwkStatus
   \   00002A   E0           MOVX      A,@DPTR
   \   00002B   7020         JNZ       ??ZDApp_ProcessNetworkJoin_3
   1358              {
   1359                osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   00002D                ; Setup parameters for call to function osal_set_event
   \   00002D   7A10         MOV       R2,#0x10
   \   00002F   7B00         MOV       R3,#0x0
   \   000031   90....       MOV       DPTR,#ZDAppTaskID
   \   000034   E0           MOVX      A,@DPTR
   \   000035   F9           MOV       R1,A
   \   000036   12....       LCALL     `??osal_set_event::?relay`; Banked call to: osal_set_event
   1360          
   1361          #if defined ( POWER_SAVING )
   1362                osal_pwrmgr_device( PWRMGR_BATTERY );
   1363          #endif
   1364          
   1365                if ( ZG_SECURE_ENABLED && ( ZDApp_RestoreNwkKey() == false ) )
   1366                {
   1367                  // wait for auth from trust center!!
   1368                  devState = DEV_END_DEVICE_UNAUTH;
   1369          
   1370                  // Start the reset timer for MAX UNAUTH time
   1371                  ZDApp_ResetTimerStart( 10000 );//MAX_DEVICE_UNAUTH_TIMEOUT );
   1372                }
   1373                else
   1374                {
   1375                  if ( ZSTACK_ROUTER_BUILD )
   1376                  {
   1377                    if ( devState == DEV_NWK_ORPHAN 
   1378                      && ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
   1379                    {
   1380                      // Change NIB state to router for restore
   1381                      _NIB.nwkState = NWK_ROUTER;
   1382                    }
   1383                  }
   1384                          
   1385                  if ( devState == DEV_NWK_JOINING )
   \   000039   90....       MOV       DPTR,#devState
   \   00003C   E0           MOVX      A,@DPTR
   \   00003D   6403         XRL       A,#0x3
   \   00003F   7003         JNZ       ??ZDApp_ProcessNetworkJoin_4
   1386                  {
   1387                    ZDApp_AnnounceNewAddress();
   \   000041                ; Setup parameters for call to function ZDApp_AnnounceNewAddress
   \   000041   12....       LCALL     `??ZDApp_AnnounceNewAddress::?relay`; Banked call to: ZDApp_AnnounceNewAddress
   1388                  }
   1389                  
   1390                  devState = DEV_END_DEVICE;
   \                     ??ZDApp_ProcessNetworkJoin_4:
   \   000044   90....       MOV       DPTR,#devState
   \   000047   7406         MOV       A,#0x6
   \   000049   F0           MOVX      @DPTR,A
   1391                  if ( ZSTACK_ROUTER_BUILD )
   \   00004A   02....       LJMP      ??ZDApp_ProcessNetworkJoin_5 & 0xFFFF
   1392                  {
   1393                    // NOTE: first two parameters are not used, see NLMEDE.h for details
   1394                    if ( ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
   1395                    {
   1396                      NLME_StartRouterRequest( 0, 0, false );
   1397                    }
   1398                  }
   1399                }
   1400              }
   1401              else
   1402              {
   1403                if ( (devStartMode == MODE_RESUME) && (++retryCnt >= MAX_RESUME_RETRY) )
   \                     ??ZDApp_ProcessNetworkJoin_3:
   \   00004D   90....       MOV       DPTR,#devStartMode
   \   000050   E0           MOVX      A,@DPTR
   \   000051   6401         XRL       A,#0x1
   \   000053   7036         JNZ       ??ZDApp_ProcessNetworkJoin_6
   \   000055   90....       MOV       DPTR,#retryCnt
   \   000058   E0           MOVX      A,@DPTR
   \   000059   04           INC       A
   \   00005A   F0           MOVX      @DPTR,A
   \   00005B   C3           CLR       C
   \   00005C   9403         SUBB      A,#0x3
   \   00005E   402B         JC        ??ZDApp_ProcessNetworkJoin_6
   1404                {
   1405                  if ( _NIB.nwkPanId == 0xFFFF || _NIB.nwkPanId == INVALID_PAN_ID )
   \   000060   90....       MOV       DPTR,#_NIB + 33
   \   000063   E0           MOVX      A,@DPTR
   \   000064   F4           CPL       A
   \   000065   7003         JNZ       ??ZDApp_ProcessNetworkJoin_7
   \   000067   A3           INC       DPTR
   \   000068   E0           MOVX      A,@DPTR
   \   000069   F4           CPL       A
   \                     ??ZDApp_ProcessNetworkJoin_7:
   \   00006A   600D         JZ        ??ZDApp_ProcessNetworkJoin_8
   \   00006C   90....       MOV       DPTR,#_NIB + 33
   \   00006F   E0           MOVX      A,@DPTR
   \   000070   64FE         XRL       A,#0xfe
   \   000072   7003         JNZ       ??ZDApp_ProcessNetworkJoin_9
   \   000074   A3           INC       DPTR
   \   000075   E0           MOVX      A,@DPTR
   \   000076   F4           CPL       A
   \                     ??ZDApp_ProcessNetworkJoin_9:
   \   000077   7006         JNZ       ??ZDApp_ProcessNetworkJoin_10
   1406                    devStartMode = MODE_JOIN;
   \                     ??ZDApp_ProcessNetworkJoin_8:
   \   000079   90....       MOV       DPTR,#devStartMode
   \   00007C   E4           CLR       A
   \   00007D   800B         SJMP      ??ZDApp_ProcessNetworkJoin_11
   1407                  else
   1408                  {
   1409                    devStartMode = MODE_REJOIN;
   \                     ??ZDApp_ProcessNetworkJoin_10:
   \   00007F   90....       MOV       DPTR,#devStartMode
   \   000082   7403         MOV       A,#0x3
   \   000084   F0           MOVX      @DPTR,A
   1410                    _tmpRejoinState = true;
   \   000085   90....       MOV       DPTR,#_tmpRejoinState
   \   000088   7401         MOV       A,#0x1
   \                     ??ZDApp_ProcessNetworkJoin_11:
   \   00008A   F0           MOVX      @DPTR,A
   1411                  }
   1412                }
   1413          
   1414                if ( (NLME_GetShortAddr() != INVALID_NODE_ADDR) ||
   1415                     (_NIB.nwkDevAddress != INVALID_NODE_ADDR) )
   \                     ??ZDApp_ProcessNetworkJoin_6:
   \   00008B                ; Setup parameters for call to function NLME_GetShortAddr
   \   00008B   12....       LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   00008E   8A..         MOV       ?V0,R2
   \   000090   8B..         MOV       ?V1,R3
   \   000092   74FE         MOV       A,#-0x2
   \   000094   65..         XRL       A,?V0
   \   000096   7004         JNZ       ??ZDApp_ProcessNetworkJoin_12
   \   000098   74FF         MOV       A,#-0x1
   \   00009A   65..         XRL       A,?V1
   \                     ??ZDApp_ProcessNetworkJoin_12:
   \   00009C   700D         JNZ       ??ZDApp_ProcessNetworkJoin_13
   \   00009E   90....       MOV       DPTR,#_NIB + 20
   \   0000A1   E0           MOVX      A,@DPTR
   \   0000A2   64FE         XRL       A,#0xfe
   \   0000A4   7003         JNZ       ??ZDApp_ProcessNetworkJoin_14
   \   0000A6   A3           INC       DPTR
   \   0000A7   E0           MOVX      A,@DPTR
   \   0000A8   F4           CPL       A
   \                     ??ZDApp_ProcessNetworkJoin_14:
   \   0000A9   601D         JZ        ??ZDApp_ProcessNetworkJoin_15
   1416                {
   1417                  uint16 addr = INVALID_NODE_ADDR;
   \                     ??ZDApp_ProcessNetworkJoin_13:
   \   0000AB   85..82       MOV       DPL,?XSP + 0
   \   0000AE   85..83       MOV       DPH,?XSP + 1
   \   0000B1   74FE         MOV       A,#-0x2
   \   0000B3   F0           MOVX      @DPTR,A
   \   0000B4   A3           INC       DPTR
   \   0000B5   04           INC       A
   \   0000B6   F0           MOVX      @DPTR,A
   1418                  // Invalidate nwk addr so end device does not use in its data reqs.
   1419                  _NIB.nwkDevAddress = INVALID_NODE_ADDR;
   \   0000B7   90....       MOV       DPTR,#_NIB + 20
   \   0000BA   14           DEC       A
   \   0000BB   F0           MOVX      @DPTR,A
   \   0000BC   A3           INC       DPTR
   \   0000BD   04           INC       A
   \   0000BE   F0           MOVX      @DPTR,A
   1420                  ZMacSetReq( ZMacShortAddress, (uint8 *)&addr );
   \   0000BF                ; Setup parameters for call to function ZMacSetReq
   \   0000BF   AA..         MOV       R2,?XSP + 0
   \   0000C1   AB..         MOV       R3,?XSP + 1
   \   0000C3   7953         MOV       R1,#0x53
   \   0000C5   12....       LCALL     `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
   1421                }
   1422          
   1423                // Clear the neighbor Table and network discovery tables.
   1424                nwkNeighborInitTable();
   \                     ??ZDApp_ProcessNetworkJoin_15:
   \   0000C8                ; Setup parameters for call to function nwkNeighborInitTable
   \   0000C8   12....       LCALL     `??nwkNeighborInitTable::?relay`; Banked call to: nwkNeighborInitTable
   1425                NLME_NwkDiscTerm();
   \   0000CB                ; Setup parameters for call to function NLME_NwkDiscTerm
   \   0000CB   12....       LCALL     `??NLME_NwkDiscTerm::?relay`; Banked call to: NLME_NwkDiscTerm
   1426          
   1427                zdoDiscCounter = 1;
   \   0000CE   90....       MOV       DPTR,#zdoDiscCounter
   \   0000D1   7401         MOV       A,#0x1
   \   0000D3   F0           MOVX      @DPTR,A
   1428          
   1429          //      ZDApp_NetworkInit( (uint16)
   1430          //                         ((NWK_START_DELAY * (osal_rand() & 0x0F)) +
   1431          //                          (NWK_START_DELAY * 5)) );
   1432                ZDApp_NetworkInit( (uint16)(NWK_START_DELAY
   1433                     + ((uint16)(osal_rand()& EXTENDED_JOINING_RANDOM_MASK))) );
   \   0000D4                ; Setup parameters for call to function osal_rand
   \   0000D4   02....       LJMP      ??ZDApp_ProcessNetworkJoin_16 & 0xFFFF
   1434              }
   1435            }
   1436            else if ( devState == DEV_NWK_ORPHAN || devState == DEV_NWK_REJOIN )
   \                     ??ZDApp_ProcessNetworkJoin_1:
   \   0000D7   E0           MOVX      A,@DPTR
   \   0000D8   6404         XRL       A,#0x4
   \   0000DA   6003         JZ        $+5
   \   0000DC   02....       LJMP      ??ZDApp_ProcessNetworkJoin_17 & 0xFFFF
   1437            {
   1438              // results of an orphaning attempt by this device
   1439              if (nwkStatus == ZSuccess)
   \                     ??ZDApp_ProcessNetworkJoin_2:
   \   0000DF   90....       MOV       DPTR,#nwkStatus
   \   0000E2   E0           MOVX      A,@DPTR
   \   0000E3   7028         JNZ       ??ZDApp_ProcessNetworkJoin_18
   1440              {
   1441                if ( ZG_SECURE_ENABLED )
   1442                {
   1443                  ZDApp_RestoreNwkKey();
   1444                }
   1445                
   1446                devState = DEV_END_DEVICE;
   \   0000E5   12....       LCALL     ?Subroutine11 & 0xFFFF
   1447                osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \                     ??CrossCallReturnLabel_5:
   \   0000E8   12....       LCALL     `??osal_set_event::?relay`; Banked call to: osal_set_event
   1448                // setup Power Manager Device
   1449          #if defined ( POWER_SAVING )
   1450                osal_pwrmgr_device( PWRMGR_BATTERY );
   1451          #endif
   1452          
   1453                if ( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE )
   \   0000EB   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor + 2
   \   0000EE   E0           MOVX      A,@DPTR
   \   0000EF   A2E3         MOV       C,0xE0 /* A   */.3
   \   0000F1   5015         JNC       ??ZDApp_ProcessNetworkJoin_19
   1454                {
   1455                  // The receiver is on, turn network layer polling off.
   1456                  NLME_SetPollRate( 0 );
   \   0000F3                ; Setup parameters for call to function NLME_SetPollRate
   \   0000F3   7A00         MOV       R2,#0x0
   \   0000F5   7B00         MOV       R3,#0x0
   \   0000F7   12....       LCALL     `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
   1457                  NLME_SetQueuedPollRate( 0 );
   \   0000FA                ; Setup parameters for call to function NLME_SetQueuedPollRate
   \   0000FA   7A00         MOV       R2,#0x0
   \   0000FC   7B00         MOV       R3,#0x0
   \   0000FE   12....       LCALL     `??NLME_SetQueuedPollRate::?relay`; Banked call to: NLME_SetQueuedPollRate
   1458                  NLME_SetResponseRate( 0 );
   \   000101                ; Setup parameters for call to function NLME_SetResponseRate
   \   000101   7A00         MOV       R2,#0x0
   \   000103   7B00         MOV       R3,#0x0
   \   000105   12....       LCALL     `??NLME_SetResponseRate::?relay`; Banked call to: NLME_SetResponseRate
   1459                }
   1460          
   1461                if ( ZSTACK_ROUTER_BUILD )
   1462                {
   1463                  // NOTE: first two parameters are not used, see NLMEDE.h for details
   1464                  if ( ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
   1465                  {
   1466                    NLME_StartRouterRequest( 0, 0, false );
   1467                  }
   1468                }
   1469                
   1470                ZDApp_AnnounceNewAddress();
   \                     ??ZDApp_ProcessNetworkJoin_19:
   \   000108                ; Setup parameters for call to function ZDApp_AnnounceNewAddress
   \   000108   12....       LCALL     `??ZDApp_AnnounceNewAddress::?relay`; Banked call to: ZDApp_AnnounceNewAddress
   \   00010B   8073         SJMP      ??ZDApp_ProcessNetworkJoin_5
   1471              }
   1472              else
   1473              {
   1474                if ( devStartMode == MODE_RESUME )
   \                     ??ZDApp_ProcessNetworkJoin_18:
   \   00010D   90....       MOV       DPTR,#devStartMode
   \   000110   E0           MOVX      A,@DPTR
   \   000111   6401         XRL       A,#0x1
   \   000113   703E         JNZ       ??ZDApp_ProcessNetworkJoin_20
   1475                {
   1476                  if ( ++retryCnt <= MAX_RESUME_RETRY )
   \   000115   90....       MOV       DPTR,#retryCnt
   \   000118   E0           MOVX      A,@DPTR
   \   000119   04           INC       A
   \   00011A   F0           MOVX      @DPTR,A
   \   00011B   C3           CLR       C
   \   00011C   9404         SUBB      A,#0x4
   \   00011E   5026         JNC       ??ZDApp_ProcessNetworkJoin_21
   1477                  {
   1478                    if ( _NIB.nwkPanId == 0xFFFF || _NIB.nwkPanId == INVALID_PAN_ID )
   \   000120   90....       MOV       DPTR,#_NIB + 33
   \   000123   E0           MOVX      A,@DPTR
   \   000124   F4           CPL       A
   \   000125   7003         JNZ       ??ZDApp_ProcessNetworkJoin_22
   \   000127   A3           INC       DPTR
   \   000128   E0           MOVX      A,@DPTR
   \   000129   F4           CPL       A
   \                     ??ZDApp_ProcessNetworkJoin_22:
   \   00012A   6022         JZ        ??ZDApp_ProcessNetworkJoin_23
   \   00012C   90....       MOV       DPTR,#_NIB + 33
   \   00012F   E0           MOVX      A,@DPTR
   \   000130   64FE         XRL       A,#0xfe
   \   000132   7003         JNZ       ??ZDApp_ProcessNetworkJoin_24
   \   000134   A3           INC       DPTR
   \   000135   E0           MOVX      A,@DPTR
   \   000136   F4           CPL       A
   \                     ??ZDApp_ProcessNetworkJoin_24:
   \   000137   6015         JZ        ??ZDApp_ProcessNetworkJoin_23
   1479                      devStartMode = MODE_JOIN;
   1480                    else
   1481                    {
   1482                      devStartMode = MODE_REJOIN;
   \   000139   90....       MOV       DPTR,#devStartMode
   \   00013C   7403         MOV       A,#0x3
   \   00013E   F0           MOVX      @DPTR,A
   1483                      _tmpRejoinState = true;
   \   00013F   90....       MOV       DPTR,#_tmpRejoinState
   \   000142   7401         MOV       A,#0x1
   \   000144   800C         SJMP      ??ZDApp_ProcessNetworkJoin_25
   1484                    }
   1485                  }
   1486                  // Do a normal join to the network after certain times of rejoin retries
   1487                  else if( AIB_apsUseInsecureJoin == true )
   \                     ??ZDApp_ProcessNetworkJoin_21:
   \   000146   90....       MOV       DPTR,#AIB_apsUseInsecureJoin
   \   000149   E0           MOVX      A,@DPTR
   \   00014A   6401         XRL       A,#0x1
   \   00014C   7005         JNZ       ??ZDApp_ProcessNetworkJoin_20
   1488                  {
   1489                    devStartMode = MODE_JOIN;
   \                     ??ZDApp_ProcessNetworkJoin_23:
   \   00014E   90....       MOV       DPTR,#devStartMode
   \   000151   E4           CLR       A
   \                     ??ZDApp_ProcessNetworkJoin_25:
   \   000152   F0           MOVX      @DPTR,A
   1490                  }
   1491                }
   1492          
   1493                // Clear the neighbor Table and network discovery tables.
   1494                nwkNeighborInitTable();
   \                     ??ZDApp_ProcessNetworkJoin_20:
   \   000153                ; Setup parameters for call to function nwkNeighborInitTable
   \   000153   12....       LCALL     `??nwkNeighborInitTable::?relay`; Banked call to: nwkNeighborInitTable
   1495                NLME_NwkDiscTerm();
   \   000156                ; Setup parameters for call to function NLME_NwkDiscTerm
   \   000156   12....       LCALL     `??NLME_NwkDiscTerm::?relay`; Banked call to: NLME_NwkDiscTerm
   1496          
   1497                // setup a retry for later...
   1498                ZDApp_NetworkInit( (uint16)(NWK_START_DELAY
   1499                     + (osal_rand()& EXTENDED_JOINING_RANDOM_MASK)) );
   \   000159                ; Setup parameters for call to function osal_rand
   \                     ??ZDApp_ProcessNetworkJoin_16:
   \   000159   12....       LCALL     `??osal_rand::?relay`; Banked call to: osal_rand
   \   00015C                ; Setup parameters for call to function ZDApp_NetworkInit
   \   00015C   EA           MOV       A,R2
   \   00015D   547F         ANL       A,#0x7f
   \   00015F   2464         ADD       A,#0x64
   \   000161   FA           MOV       R2,A
   \   000162   7B00         MOV       R3,#0x0
   \   000164   12....       LCALL     `??ZDApp_NetworkInit::?relay`; Banked call to: ZDApp_NetworkInit
   \   000167   8017         SJMP      ??ZDApp_ProcessNetworkJoin_5
   1500              }
   1501            }
   1502          #if defined ( ZIGBEE_STOCHASTIC_ADDRESSING )
   1503            else
   1504            {
   1505              // Assume from address conflict
   1506              if ( _NIB.nwkAddrAlloc == NWK_ADDRESSING_STOCHASTIC )
   \                     ??ZDApp_ProcessNetworkJoin_17:
   \   000169   90....       MOV       DPTR,#_NIB + 96
   \   00016C   E0           MOVX      A,@DPTR
   \   00016D   6402         XRL       A,#0x2
   \   00016F   700F         JNZ       ??ZDApp_ProcessNetworkJoin_5
   1507              {
   1508                // Notify the network
   1509                ZDApp_AnnounceNewAddress();
   \   000171                ; Setup parameters for call to function ZDApp_AnnounceNewAddress
   \   000171   12....       LCALL     `??ZDApp_AnnounceNewAddress::?relay`; Banked call to: ZDApp_AnnounceNewAddress
   1510                
   1511                // Notify apps
   1512                osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   000174                ; Setup parameters for call to function osal_set_event
   \   000174   7A10         MOV       R2,#0x10
   \   000176   7B00         MOV       R3,#0x0
   \   000178   90....       MOV       DPTR,#ZDAppTaskID
   \   00017B   E0           MOVX      A,@DPTR
   \   00017C   F9           MOV       R1,A
   \   00017D   12....       LCALL     `??osal_set_event::?relay`; Banked call to: osal_set_event
   1513              }
   1514            }
   1515          #endif
   1516          }
   \                     ??ZDApp_ProcessNetworkJoin_5:
   \   000180   02....       LJMP      ?Subroutine2 & 0xFFFF
   1517          
   1518          /*********************************************************************
   1519           * @fn      ZDApp_SaveNwkKey()
   1520           *
   1521           * @brief   Save off the Network key information.
   1522           *
   1523           * @param   none
   1524           *
   1525           * @return  none
   1526           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1527          void ZDApp_SaveNwkKey( void )
   \                     ZDApp_SaveNwkKey:
   1528          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV       A,#-0x15
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   1529            nwkActiveKeyItems keyItems;
   1530          
   1531            SSP_ReadNwkActiveKey( &keyItems );
   \   00000A                ; Setup parameters for call to function SSP_ReadNwkActiveKey
   \   00000A   AA..         MOV       R2,?XSP + 0
   \   00000C   AB..         MOV       R3,?XSP + 1
   \   00000E   12....       LCALL     `??SSP_ReadNwkActiveKey::?relay`; Banked call to: SSP_ReadNwkActiveKey
   1532            keyItems.frameCounter++;
   \   000011   90....       MOV       DPTR,#__Constant_1
   \   000014   78..         MOV       R0,#?V0
   \   000016   12....       LCALL     ?L_MOV_X
   \   000019   7411         MOV       A,#0x11
   \   00001B   12....       LCALL     ?XSTACK_DISP0_8
   \   00001E   78..         MOV       R0,#?V0
   \   000020   12....       LCALL     ?L_ADD_TO_X
   1533          
   1534            osal_nv_write( ZCD_NV_NWKKEY, 0, sizeof( nwkActiveKeyItems ),
   1535                          (void *)&keyItems );
   \   000023                ; Setup parameters for call to function osal_nv_write
   \   000023   A8..         MOV       R0,?XSP + 0
   \   000025   A9..         MOV       R1,?XSP + 1
   \   000027   88..         MOV       ?V0,R0
   \   000029   89..         MOV       ?V1,R1
   \   00002B   78..         MOV       R0,#?V0
   \   00002D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000030   75..15       MOV       ?V0,#0x15
   \   000033   75..00       MOV       ?V1,#0x0
   \   000036   78..         MOV       R0,#?V0
   \   000038   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003B   7C00         MOV       R4,#0x0
   \   00003D   7D00         MOV       R5,#0x0
   \   00003F   7A82         MOV       R2,#-0x7e
   \   000041   7B00         MOV       R3,#0x0
   \   000043   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000046   7404         MOV       A,#0x4
   \   000048   12....       LCALL     ?DEALLOC_XSTACK8
   1536          
   1537            nwkFrameCounterChanges = 0;
   \   00004B   90....       MOV       DPTR,#nwkFrameCounterChanges
   \   00004E   E4           CLR       A
   \   00004F   F0           MOVX      @DPTR,A
   \   000050   A3           INC       DPTR
   \   000051   F0           MOVX      @DPTR,A
   1538            
   1539            // Clear copy in RAM before return. 
   1540            osal_memset( &keyItems, 0x00, sizeof(keyItems) );
   \   000052                ; Setup parameters for call to function osal_memset
   \   000052   7C15         MOV       R4,#0x15
   \   000054   FD           MOV       R5,A
   \   000055   F9           MOV       R1,A
   \   000056   AA..         MOV       R2,?XSP + 0
   \   000058   AB..         MOV       R3,?XSP + 1
   \   00005A   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   1541          
   1542          }
   \   00005D   02....       LJMP      ?Subroutine1 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7415         MOV       A,#0x15
   \   000002                REQUIRE ??Subroutine35_0
   \   000002                ; // Fall through to label ??Subroutine35_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine35_0:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine36_0
   \   000003                ; // Fall through to label ??Subroutine36_0
   1543          
   1544          /*********************************************************************
   1545           * @fn      ZDApp_ResetNwkKey()
   1546           *
   1547           * @brief   Reset the Network key information in NV.
   1548           *
   1549           * @param   none
   1550           *
   1551           * @return  none
   1552           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1553          void ZDApp_ResetNwkKey( void )
   \                     ZDApp_ResetNwkKey:
   1554          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV       A,#-0x15
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   1555            nwkActiveKeyItems keyItems;
   1556          
   1557            osal_memset( &keyItems, 0, sizeof( nwkActiveKeyItems ) );
   \   00000A                ; Setup parameters for call to function osal_memset
   \   00000A   7C15         MOV       R4,#0x15
   \   00000C   7D00         MOV       R5,#0x0
   \   00000E   7900         MOV       R1,#0x0
   \   000010   AA..         MOV       R2,?XSP + 0
   \   000012   AB..         MOV       R3,?XSP + 1
   \   000014   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   1558            osal_nv_write( ZCD_NV_NWKKEY, 0, sizeof( nwkActiveKeyItems ),
   1559                          (void *)&keyItems );
   \   000017                ; Setup parameters for call to function osal_nv_write
   \   000017   A8..         MOV       R0,?XSP + 0
   \   000019   A9..         MOV       R1,?XSP + 1
   \   00001B   88..         MOV       ?V0,R0
   \   00001D   89..         MOV       ?V1,R1
   \   00001F   78..         MOV       R0,#?V0
   \   000021   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000024   75..15       MOV       ?V0,#0x15
   \   000027   75..00       MOV       ?V1,#0x0
   \   00002A   78..         MOV       R0,#?V0
   \   00002C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002F   7C00         MOV       R4,#0x0
   \   000031   7D00         MOV       R5,#0x0
   \   000033   7A82         MOV       R2,#-0x7e
   \   000035   7B00         MOV       R3,#0x0
   \   000037   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   00003A   7404         MOV       A,#0x4
   \   00003C   12....       LCALL     ?DEALLOC_XSTACK8
   1560          }
   \   00003F   02....       LJMP      ?Subroutine7 & 0xFFFF
   1561          
   1562          /*********************************************************************
   1563           * @fn      ZDApp_RestoreNwkKey()
   1564           *
   1565           * @brief
   1566           *
   1567           *   Save off the Network key information.
   1568           *
   1569           * @param   none
   1570           *
   1571           * @return  true if restored from NV, false if not
   1572           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1573          uint8 ZDApp_RestoreNwkKey( void )
   \                     ZDApp_RestoreNwkKey:
   1574          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV       A,#-0x15
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   1575            nwkActiveKeyItems keyItems;
   1576            uint8 ret = false;
   \   00000A   7E00         MOV       R6,#0x0
   1577          
   1578            if ( osal_nv_read( ZCD_NV_NWKKEY, 0, sizeof(nwkActiveKeyItems), (void*)&keyItems )
   1579                == ZSUCCESS )
   \   00000C                ; Setup parameters for call to function osal_nv_read
   \   00000C   A8..         MOV       R0,?XSP + 0
   \   00000E   A9..         MOV       R1,?XSP + 1
   \   000010   88..         MOV       ?V0,R0
   \   000012   89..         MOV       ?V1,R1
   \   000014   78..         MOV       R0,#?V0
   \   000016   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000019   75..15       MOV       ?V0,#0x15
   \   00001C   8E..         MOV       ?V1,R6
   \   00001E   78..         MOV       R0,#?V0
   \   000020   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000023   7C00         MOV       R4,#0x0
   \   000025   7D00         MOV       R5,#0x0
   \   000027   7A82         MOV       R2,#-0x7e
   \   000029   7B00         MOV       R3,#0x0
   \   00002B   12....       LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   00002E   7404         MOV       A,#0x4
   \   000030   12....       LCALL     ?DEALLOC_XSTACK8
   \   000033   E9           MOV       A,R1
   \   000034   703A         JNZ       ??ZDApp_RestoreNwkKey_0
   1580            {
   1581              if ( keyItems.frameCounter > 0 )
   \   000036   7411         MOV       A,#0x11
   \   000038   12....       LCALL     ?XSTACK_DISP0_8
   \   00003B   12....       LCALL     ?XLOAD_R0123
   \   00003E   E8           MOV       A,R0
   \   00003F   49           ORL       A,R1
   \   000040   4A           ORL       A,R2
   \   000041   4B           ORL       A,R3
   \   000042   6022         JZ        ??ZDApp_RestoreNwkKey_1
   1582              {
   1583                // Restore the key information
   1584                keyItems.frameCounter += MAX_NWK_FRAMECOUNTER_CHANGES;
   \   000044   90....       MOV       DPTR,#__Constant_3e8
   \   000047   78..         MOV       R0,#?V0
   \   000049   12....       LCALL     ?L_MOV_X
   \   00004C   7411         MOV       A,#0x11
   \   00004E   12....       LCALL     ?XSTACK_DISP0_8
   \   000051   78..         MOV       R0,#?V0
   \   000053   12....       LCALL     ?L_ADD_TO_X
   1585                nwkFrameCounter = keyItems.frameCounter;
   \   000056   7411         MOV       A,#0x11
   \   000058   12....       LCALL     ?XSTACK_DISP0_8
   \   00005B   12....       LCALL     ?XLOAD_R0123
   \   00005E   90....       MOV       DPTR,#nwkFrameCounter
   \   000061   12....       LCALL     ?XSTORE_R0123
   1586                ret = true;
   \   000064   7E01         MOV       R6,#0x1
   1587              }
   1588          
   1589              // Force a save for the first frame counter increment
   1590              nwkFrameCounterChanges = MAX_NWK_FRAMECOUNTER_CHANGES + 1;
   \                     ??ZDApp_RestoreNwkKey_1:
   \   000066   90....       MOV       DPTR,#nwkFrameCounterChanges
   \   000069   74E9         MOV       A,#-0x17
   \   00006B   F0           MOVX      @DPTR,A
   \   00006C   A3           INC       DPTR
   \   00006D   7403         MOV       A,#0x3
   \   00006F   F0           MOVX      @DPTR,A
   1591            }
   1592            // Clear copy in RAM before return. 
   1593            osal_memset( &keyItems, 0x00, sizeof(keyItems) );
   \                     ??ZDApp_RestoreNwkKey_0:
   \   000070                ; Setup parameters for call to function osal_memset
   \   000070   7C15         MOV       R4,#0x15
   \   000072   7D00         MOV       R5,#0x0
   \   000074   7900         MOV       R1,#0x0
   \   000076   AA..         MOV       R2,?XSP + 0
   \   000078   AB..         MOV       R3,?XSP + 1
   \   00007A   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   1594            
   1595            return ( ret );
   \   00007D   EE           MOV       A,R6
   \   00007E   F9           MOV       R1,A
   \   00007F   02....       LJMP      ?Subroutine1 & 0xFFFF
   1596          }
   1597          
   1598          /*********************************************************************
   1599           * @fn      ZDApp_ResetTimerStart
   1600           *
   1601           * @brief   Start the reset timer.
   1602           *
   1603           * @param   delay - delay time(ms) before reset
   1604           *
   1605           * @return  none
   1606           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1607          void ZDApp_ResetTimerStart( uint16 delay )
   \                     ZDApp_ResetTimerStart:
   1608          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1609            // Start the rest timer
   1610            osal_start_timerEx( ZDAppTaskID, ZDO_DEVICE_RESET, delay );
   \   000004                ; Setup parameters for call to function osal_start_timerEx
   \   000004   EA           MOV       A,R2
   \   000005   FC           MOV       R4,A
   \   000006   EB           MOV       A,R3
   \   000007   FD           MOV       R5,A
   \   000008   7A04         MOV       R2,#0x4
   \   00000A   7B00         MOV       R3,#0x0
   \   00000C   90....       MOV       DPTR,#ZDAppTaskID
   \   00000F   E0           MOVX      A,@DPTR
   \   000010   F9           MOV       R1,A
   \   000011   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   1611          }
   \   000014   02....       LJMP      ?Subroutine3 & 0xFFFF
   1612          
   1613          /*********************************************************************
   1614           * @fn      ZDApp_ResetTimerCancel
   1615           *
   1616           * @brief   Cancel the reset timer.
   1617           *
   1618           * @param   none
   1619           *
   1620           * @return  none
   1621           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1622          void ZDApp_ResetTimerCancel( void )
   \                     ZDApp_ResetTimerCancel:
   1623          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1624            // Cancel the reset timer
   1625            osal_stop_timerEx( ZDAppTaskID, ZDO_DEVICE_RESET );
   \   000004                ; Setup parameters for call to function osal_stop_timerEx
   \   000004   7A04         MOV       R2,#0x4
   \   000006   7B00         MOV       R3,#0x0
   \   000008   90....       MOV       DPTR,#ZDAppTaskID
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   F9           MOV       R1,A
   \   00000D   12....       LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
   1626          }
   \   000010   02....       LJMP      ?Subroutine3 & 0xFFFF
   1627          
   1628          /*********************************************************************
   1629           * @fn      ZDApp_LeaveCtrlInit
   1630           *
   1631           * @brief   Initialize the leave control logic.
   1632           *
   1633           * @param   none
   1634           *
   1635           * @return  none
   1636           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1637          void ZDApp_LeaveCtrlInit( void )
   \                     ZDApp_LeaveCtrlInit:
   1638          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1639            uint8 status;
   1640          
   1641          
   1642            // Initialize control state
   1643            ZDApp_LeaveCtrl = ZDAPP_LEAVE_CTRL_INIT;
   \   000005   12....       LCALL     ?Subroutine13 & 0xFFFF
   1644          
   1645            status = osal_nv_item_init( ZCD_NV_LEAVE_CTRL,
   1646                                        sizeof(ZDApp_LeaveCtrl),
   1647                                        &ZDApp_LeaveCtrl );
   1648          
   1649            if ( status == ZSUCCESS )
   \                     ??CrossCallReturnLabel_8:
   \   000008   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00000B   7C01         MOV       R4,#0x1
   \   00000D   7D00         MOV       R5,#0x0
   \   00000F   7A85         MOV       R2,#-0x7b
   \   000011   7B00         MOV       R3,#0x0
   \   000013   12....       LCALL     `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   000016   7402         MOV       A,#0x2
   \   000018   12....       LCALL     ?DEALLOC_XSTACK8
   \   00001B   E9           MOV       A,R1
   \   00001C   7020         JNZ       ??ZDApp_LeaveCtrlInit_0
   1650            {
   1651              // Read saved control
   1652              osal_nv_read( ZCD_NV_LEAVE_CTRL,
   1653                            0,
   1654                            sizeof( uint8 ),
   1655                            &ZDApp_LeaveCtrl);
   \   00001E                ; Setup parameters for call to function osal_nv_read
   \   00001E   78..         MOV       R0,#?V0
   \   000020   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000023   75..01       MOV       ?V0,#0x1
   \   000026   75..00       MOV       ?V1,#0x0
   \   000029   78..         MOV       R0,#?V0
   \   00002B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002E   7C00         MOV       R4,#0x0
   \   000030   7D00         MOV       R5,#0x0
   \   000032   7A85         MOV       R2,#-0x7b
   \   000034   7B00         MOV       R3,#0x0
   \   000036   12....       LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000039   7404         MOV       A,#0x4
   \   00003B   12....       LCALL     ?DEALLOC_XSTACK8
   1656            }
   1657          }
   \                     ??ZDApp_LeaveCtrlInit_0:
   \   00003E   80..         SJMP      ??Subroutine34_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   90....       MOV       DPTR,#ZDApp_LeaveCtrl
   \   000003   E4           CLR       A
   \   000004   F0           MOVX      @DPTR,A
   \   000005                ; Setup parameters for call to function osal_nv_item_init
   \   000005                ; Setup parameters for call to function osal_nv_write
   \   000005   75....       MOV       ?V0,#ZDApp_LeaveCtrl & 0xff
   \   000008   75....       MOV       ?V1,#(ZDApp_LeaveCtrl >> 8) & 0xff
   \   00000B   78..         MOV       R0,#?V0
   \   00000D   22           RET
   1658          
   1659          /*********************************************************************
   1660           * @fn      ZDApp_LeaveCtrlSet
   1661           *
   1662           * @brief   Set the leave control logic.
   1663           *
   1664           * @param   ra - reassociate flag
   1665           *
   1666           * @return  none
   1667           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1668          void ZDApp_LeaveCtrlSet( uint8 ra )
   \                     ZDApp_LeaveCtrlSet:
   1669          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
   1670            ZDApp_LeaveCtrl = ZDAPP_LEAVE_CTRL_SET;
   \   000007   90....       MOV       DPTR,#ZDApp_LeaveCtrl
   \   00000A   7401         MOV       A,#0x1
   \   00000C   F0           MOVX      @DPTR,A
   1671          
   1672            if ( ra == TRUE )
   \   00000D   6E           XRL       A,R6
   \   00000E   7003         JNZ       ??ZDApp_LeaveCtrlSet_0
   1673            {
   1674              ZDApp_LeaveCtrl |= ZDAPP_LEAVE_CTRL_RA;
   \   000010   7403         MOV       A,#0x3
   \   000012   F0           MOVX      @DPTR,A
   1675            }
   1676          
   1677            // Write the leave control
   1678            osal_nv_write( ZCD_NV_LEAVE_CTRL,
   1679                           0,
   1680                           sizeof( uint8 ),
   1681                           &ZDApp_LeaveCtrl);
   \                     ??ZDApp_LeaveCtrlSet_0:
   \   000013                ; Setup parameters for call to function osal_nv_write
   \   000013   75....       MOV       ?V0,#ZDApp_LeaveCtrl & 0xff
   \   000016   75....       MOV       ?V1,#(ZDApp_LeaveCtrl >> 8) & 0xff
   \   000019   78..         MOV       R0,#?V0
   \   00001B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00001E   75..01       MOV       ?V0,#0x1
   \   000021   75..00       MOV       ?V1,#0x0
   \   000024   78..         MOV       R0,#?V0
   \   000026   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000029   7C00         MOV       R4,#0x0
   \   00002B   7D00         MOV       R5,#0x0
   \   00002D   7A85         MOV       R2,#-0x7b
   \   00002F   7B00         MOV       R3,#0x0
   \   000031   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000034   7404         MOV       A,#0x4
   \   000036   80..         SJMP      ??Subroutine33_0
   1682          }
   1683          
   1684          /*********************************************************************
   1685           * @fn      ZDApp_LeaveCtrlBypass
   1686           *
   1687           * @brief   Check if NV restore should be skipped during a leave reset.
   1688           *
   1689           * @param   none
   1690           *
   1691           * @return  uint8 - (TRUE bypass:FALSE do not bypass)
   1692           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1693          uint8 ZDApp_LeaveCtrlBypass( void )
   \                     ZDApp_LeaveCtrlBypass:
   1694          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1695            uint8 bypass;
   1696          
   1697            if ( ZDApp_LeaveCtrl & ZDAPP_LEAVE_CTRL_SET )
   1698            {
   1699              bypass = TRUE;
   1700            }
   1701            else
   1702            {
   1703              bypass = FALSE;
   1704            }
   1705          
   1706            return bypass;
   \   000004   90....       MOV       DPTR,#ZDApp_LeaveCtrl
   \   000007   E0           MOVX      A,@DPTR
   \   000008   A2E0         MOV       C,0xE0 /* A   */.0
   \   00000A   E4           CLR       A
   \   00000B   33           RLC       A
   \   00000C   F9           MOV       R1,A
   \   00000D   02....       LJMP      ?Subroutine3 & 0xFFFF
   1707          }
   1708          
   1709          /*********************************************************************
   1710           * @fn      ZDApp_LeaveCtrlStartup
   1711           *
   1712           * @brief   Check for startup conditions during a leave reset.
   1713           *
   1714           * @param   state      - devState_t determined by leave control logic
   1715           * @param   startDelay - startup delay
   1716           *
   1717           * @return  none
   1718           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1719          void ZDApp_LeaveCtrlStartup( devStates_t* state, uint16* startDelay )
   \                     ZDApp_LeaveCtrlStartup:
   1720          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1721            *startDelay = 0;
   \   000005   8C82         MOV       DPL,R4
   \   000007   8D83         MOV       DPH,R5
   \   000009   E4           CLR       A
   \   00000A   F0           MOVX      @DPTR,A
   \   00000B   A3           INC       DPTR
   \   00000C   F0           MOVX      @DPTR,A
   1722          
   1723            if ( ZDApp_LeaveCtrl & ZDAPP_LEAVE_CTRL_SET )
   \   00000D   90....       MOV       DPTR,#ZDApp_LeaveCtrl
   \   000010   E0           MOVX      A,@DPTR
   \   000011   A2E0         MOV       C,0xE0 /* A   */.0
   \   000013   5037         JNC       ??ZDApp_LeaveCtrlStartup_0
   1724            {
   1725              if ( ZDApp_LeaveCtrl & ZDAPP_LEAVE_CTRL_RA )
   \   000015   A2E1         MOV       C,0xE0 /* A   */.1
   \   000017   500C         JNC       ??ZDApp_LeaveCtrlStartup_1
   1726              {
   1727                *startDelay = 5000;
   \   000019   8C82         MOV       DPL,R4
   \   00001B   8D83         MOV       DPH,R5
   \   00001D   7488         MOV       A,#-0x78
   \   00001F   F0           MOVX      @DPTR,A
   \   000020   A3           INC       DPTR
   \   000021   7413         MOV       A,#0x13
   \   000023   8005         SJMP      ??ZDApp_LeaveCtrlStartup_2
   1728              }
   1729              else
   1730              {
   1731                *state = DEV_HOLD;
   \                     ??ZDApp_LeaveCtrlStartup_1:
   \   000025   8A82         MOV       DPL,R2
   \   000027   8B83         MOV       DPH,R3
   \   000029   E4           CLR       A
   \                     ??ZDApp_LeaveCtrlStartup_2:
   \   00002A   F0           MOVX      @DPTR,A
   1732              }
   1733          
   1734              // Set leave control to initialized state
   1735              ZDApp_LeaveCtrl = ZDAPP_LEAVE_CTRL_INIT;
   \   00002B   12....       LCALL     ?Subroutine13 & 0xFFFF
   1736          
   1737              // Write initialized control
   1738              osal_nv_write( ZCD_NV_LEAVE_CTRL,
   1739                            0,
   1740                            sizeof( uint8 ),
   1741                            &ZDApp_LeaveCtrl);
   1742            }
   \                     ??CrossCallReturnLabel_9:
   \   00002E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000031   75..01       MOV       ?V0,#0x1
   \   000034   75..00       MOV       ?V1,#0x0
   \   000037   78..         MOV       R0,#?V0
   \   000039   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003C   7C00         MOV       R4,#0x0
   \   00003E   7D00         MOV       R5,#0x0
   \   000040   7A85         MOV       R2,#-0x7b
   \   000042   7B00         MOV       R3,#0x0
   \   000044   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000047   7404         MOV       A,#0x4
   \   000049   12....       LCALL     ?DEALLOC_XSTACK8
   1743          }
   \                     ??ZDApp_LeaveCtrlStartup_0:
   \   00004C   80..         SJMP      ??Subroutine34_0
   1744          
   1745          /*********************************************************************
   1746           * @fn      ZDApp_LeaveReset
   1747           *
   1748           * @brief   Setup a device reset due to a leave indication/confirm.
   1749           *
   1750           * @param   ra - reassociate flag
   1751           *
   1752           * @return  none
   1753           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1754          void ZDApp_LeaveReset( uint8 ra )
   \                     ZDApp_LeaveReset:
   1755          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   1756            ZDApp_LeaveCtrlSet( ra );
   \   000005                ; Setup parameters for call to function ZDApp_LeaveCtrlSet
   \   000005   12....       LCALL     `??ZDApp_LeaveCtrlSet::?relay`; Banked call to: ZDApp_LeaveCtrlSet
   1757          
   1758            ZDApp_ResetTimerStart( 5000 );
   \   000008                ; Setup parameters for call to function ZDApp_ResetTimerStart
   \   000008   7A88         MOV       R2,#-0x78
   \   00000A   7B13         MOV       R3,#0x13
   \   00000C   12....       LCALL     `??ZDApp_ResetTimerStart::?relay`; Banked call to: ZDApp_ResetTimerStart
   1759          }
   \   00000F   02....       LJMP      ??Subroutine37_0 & 0xFFFF
   1760          
   1761          /*********************************************************************
   1762           * @fn      ZDApp_LeaveUpdate
   1763           *
   1764           * @brief   Update local device data related to leaving device.
   1765           *
   1766           * @param   nwkAddr        - NWK address of leaving device
   1767           * @param   extAddr        - EXT address of leaving device
   1768           * @param   removeChildren - remove children of leaving device
   1769           *
   1770           * @return  none
   1771           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1772          void ZDApp_LeaveUpdate( uint16 nwkAddr, uint8* extAddr,
   \                     ZDApp_LeaveUpdate:
   1773                                  uint8 removeChildren )
   1774          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   1775            /*
   1776            AddrMgrEntry_t entry;
   1777            */
   1778            (void)nwkAddr;  // Intentionally unreferenced parameter
   1779          
   1780            // Remove if child
   1781            if ( ZSTACK_ROUTER_BUILD )
   1782            {
   1783              NLME_RemoveChild( extAddr, removeChildren );
   1784            }
   1785          
   1786            /*
   1787            // Set NWK address to invalid
   1788            entry.user    = ADDRMGR_USER_DEFAULT;
   1789            entry.nwkAddr = INVALID_NODE_ADDR;
   1790            AddrMgrExtAddrSet( entry.extAddr, extAddr );
   1791            AddrMgrEntryUpdate( &entry );
   1792          
   1793            // Check
   1794            if ( removeChildren == TRUE )
   1795            {
   1796              // Set index to INVALID_NODE_ADDR to start search
   1797              entry.index = INVALID_NODE_ADDR;
   1798          
   1799              // Get first entry
   1800              AddrMgrEntryGetNext( &entry );
   1801          
   1802              // Remove all descendents
   1803              while ( entry.index != INVALID_NODE_ADDR )
   1804              {
   1805                // Check NWK address allocation algorithm
   1806                if ( RTG_ANCESTOR( entry.nwkAddr, thisAddr ) != 0 )
   1807                {
   1808                  // Set NWK address to invalid
   1809                  entry.nwkAddr = INVALID_NODE_ADDR;
   1810                  AddrMgrEntryUpdate( &entry );
   1811                }
   1812          
   1813                // Get next entry
   1814                AddrMgrEntryGetNext( &entry );
   1815              }
   1816            }
   1817            */
   1818          }
   \   000000   02....       LJMP      ?BRET
   1819          
   1820          /*********************************************************************
   1821           * @fn      ZDApp_NetworkDiscoveryReq
   1822           *
   1823           * @brief   Request a network discovery.
   1824           *
   1825           * @param  scanChannels - 
   1826           * @param  scanDuration - 
   1827           *
   1828           * @return  ZStatus_t
   1829           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1830          ZStatus_t ZDApp_NetworkDiscoveryReq( uint32 scanChannels, uint8 scanDuration)
   \                     ZDApp_NetworkDiscoveryReq:
   1831          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   1832            // Setup optional filters - tbd
   1833            
   1834            // Request NLME network discovery
   1835            return NLME_NetworkDiscoveryRequest(scanChannels, scanDuration);
   \   000005                ; Setup parameters for call to function NLME_NetworkDiscoveryRequest
   \   000005   12....       LCALL     `??NLME_NetworkDiscoveryRequest::?relay`; Banked call to: NLME_NetworkDiscoveryRequest
   \   000008   80..         SJMP      ??Subroutine36_0
   1836          }
   1837          
   1838          
   1839          
   1840          /*********************************************************************
   1841           * @fn      ZDApp_JoinReq
   1842           *
   1843           * @brief   Request the device to join a parent in a network.
   1844           *
   1845           * @param   channel - 
   1846           * @param   panID - 
   1847           *
   1848           * @return  ZStatus_t
   1849           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1850          ZStatus_t ZDApp_JoinReq( uint8 channel, uint16 panID, uint8 *extendedPanID, 
   \                     ZDApp_JoinReq:
   1851                                   uint16 chosenParent, uint8 parentDepth, uint8 stackProfile )
   1852          {  
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V2,R1
   \   000007   EA           MOV       A,R2
   \   000008   FE           MOV       R6,A
   \   000009   EB           MOV       A,R3
   \   00000A   FF           MOV       R7,A
   \   00000B   8C..         MOV       ?V0,R4
   \   00000D   8D..         MOV       ?V1,R5
   1853            // Sync up the node with the stack profile (In the case where a pro device 
   1854            // joins a non-pro network, or verse versa)
   1855            ZDApp_NodeProfileSync( stackProfile);
   \   00000F                ; Setup parameters for call to function ZDApp_NodeProfileSync
   \   00000F   740F         MOV       A,#0xf
   \   000011   12....       LCALL     ?XSTACK_DISP0_8
   \   000014   E0           MOVX      A,@DPTR
   \   000015   F9           MOV       R1,A
   \   000016   12....       LCALL     `??ZDApp_NodeProfileSync::?relay`; Banked call to: ZDApp_NodeProfileSync
   1856                          
   1857            // Request NLME Join Request
   1858            return NLME_JoinRequest(extendedPanID, panID,channel, 
   1859                                    ZDO_Config_Node_Descriptor.CapabilityFlags, 
   1860                                    chosenParent, parentDepth);
   \   000019                ; Setup parameters for call to function NLME_JoinRequest
   \   000019   740E         MOV       A,#0xe
   \   00001B   12....       LCALL     ?XSTACK_DISP0_8
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   F5..         MOV       ?V3,A
   \   000021   78..         MOV       R0,#?V3
   \   000023   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000026   740D         MOV       A,#0xd
   \   000028   12....       LCALL     ?XSTACK_DISP0_8
   \   00002B   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   00002E   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000031   E0           MOVX      A,@DPTR
   \   000032   F5..         MOV       ?V3,A
   \   000034   78..         MOV       R0,#?V3
   \   000036   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000039   A9..         MOV       R1,?V2
   \   00003B   EE           MOV       A,R6
   \   00003C   FC           MOV       R4,A
   \   00003D   EF           MOV       A,R7
   \   00003E   FD           MOV       R5,A
   \   00003F   AA..         MOV       R2,?V0
   \   000041   AB..         MOV       R3,?V1
   \   000043   12....       LCALL     `??NLME_JoinRequest::?relay`; Banked call to: NLME_JoinRequest
   \   000046   7404         MOV       A,#0x4
   \   000048   80..         SJMP      ??Subroutine35_0
   1861          
   1862          }
   1863          /*********************************************************************
   1864           * CALLBACK FUNCTIONS
   1865           */
   1866          
   1867          
   1868          /*********************************************************************
   1869           * @fn      ZDApp_SendEventMsg()
   1870           *
   1871           * @brief
   1872           *
   1873           *   Sends a Network Join message
   1874           *
   1875           * @param  cmd - command ID
   1876           * @param  len - length (in bytes) of the buf field
   1877           * @param  buf - buffer for the rest of the message.
   1878           *
   1879           * @return  none
   1880           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1881          void ZDApp_SendEventMsg( uint8 cmd, uint8 len, uint8 *buf )
   \                     ZDApp_SendEventMsg:
   1882          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
   \   000007   EA           MOV       A,R2
   1883            ZDApp_SendMsg( ZDAppTaskID, cmd, len, buf );
   \   000008                ; Setup parameters for call to function ZDApp_SendMsg
   \   000008   FB           MOV       R3,A
   \   000009   EE           MOV       A,R6
   \   00000A   FA           MOV       R2,A
   \   00000B   90....       MOV       DPTR,#ZDAppTaskID
   \   00000E   E0           MOVX      A,@DPTR
   \   00000F   F9           MOV       R1,A
   \   000010   12....       LCALL     `??ZDApp_SendMsg::?relay`; Banked call to: ZDApp_SendMsg
   1884          }
   \   000013   80..         SJMP      ??Subroutine37_0
   1885          
   1886          /*********************************************************************
   1887           * @fn      ZDApp_SendMsg()
   1888           *
   1889           * @brief   Sends a OSAL message
   1890           *
   1891           * @param  taskID - Where to send the message
   1892           * @param  cmd - command ID
   1893           * @param  len - length (in bytes) of the buf field
   1894           * @param  buf - buffer for the rest of the message.
   1895           *
   1896           * @return  none
   1897           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1898          void ZDApp_SendMsg( uint8 taskID, uint8 cmd, uint8 len, uint8 *buf )
   \                     ZDApp_SendMsg:
   1899          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V7,R1
   \   000007   8A..         MOV       ?V6,R2
   \   000009   8B..         MOV       ?V3,R3
   \   00000B   8C..         MOV       ?V0,R4
   \   00000D   8D..         MOV       ?V1,R5
   1900            osal_event_hdr_t *msgPtr;
   1901          
   1902            // Send the address to the task
   1903            msgPtr = (osal_event_hdr_t *)osal_msg_allocate( len );
   \   00000F                ; Setup parameters for call to function osal_msg_allocate
   \   00000F   AA..         MOV       R2,?V3
   \   000011   7B00         MOV       R3,#0x0
   \   000013   12....       LCALL     `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   000016   8A..         MOV       ?V4,R2
   \   000018   8B..         MOV       ?V5,R3
   \   00001A   AE..         MOV       R6,?V4
   \   00001C   AF..         MOV       R7,?V5
   1904            if ( msgPtr )
   \   00001E   EE           MOV       A,R6
   \   00001F   4F           ORL       A,R7
   \   000020   602E         JZ        ??ZDApp_SendMsg_0
   1905            {
   1906              if ( (len > 0) && (buf != NULL) )
   \   000022   E5..         MOV       A,?V3
   \   000024   601A         JZ        ??ZDApp_SendMsg_1
   \   000026   E5..         MOV       A,?V0
   \   000028   45..         ORL       A,?V1
   \   00002A   6014         JZ        ??ZDApp_SendMsg_1
   1907                osal_memcpy( msgPtr, buf, len );
   \   00002C                ; Setup parameters for call to function osal_memcpy
   \   00002C   75..00       MOV       ?V2,#0x0
   \   00002F   78..         MOV       R0,#?V0
   \   000031   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000034   AC..         MOV       R4,?V3
   \   000036   7D00         MOV       R5,#0x0
   \   000038   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00003B   7403         MOV       A,#0x3
   \   00003D   12....       LCALL     ?DEALLOC_XSTACK8
   1908          
   1909              msgPtr->event = cmd;
   \                     ??ZDApp_SendMsg_1:
   \   000040   8E82         MOV       DPL,R6
   \   000042   8F83         MOV       DPH,R7
   \   000044   E5..         MOV       A,?V6
   \   000046   F0           MOVX      @DPTR,A
   1910              osal_msg_send( taskID, (uint8 *)msgPtr );
   \   000047                ; Setup parameters for call to function osal_msg_send
   \   000047   EE           MOV       A,R6
   \   000048   FA           MOV       R2,A
   \   000049   EF           MOV       A,R7
   \   00004A   FB           MOV       R3,A
   \   00004B   A9..         MOV       R1,?V7
   \   00004D   12....       LCALL     `??osal_msg_send::?relay`; Banked call to: osal_msg_send
   1911            }
   1912          }
   \                     ??ZDApp_SendMsg_0:
   \   000050   7F08         MOV       R7,#0x8
   \   000052   02....       LJMP      ?BANKED_LEAVE_XDATA
   1913          
   1914          /*********************************************************************
   1915           * Call Back Functions from NWK  - API
   1916           */
   1917          
   1918          /*********************************************************************
   1919           * @fn          ZDO_NetworkDiscoveryConfirmCB
   1920           *
   1921           * @brief       This function returns a choice of PAN to join.
   1922           *
   1923           * @param       status - return status of the nwk discovery confirm
   1924           *
   1925           * @return      ZStatus_t
   1926           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1927          ZStatus_t ZDO_NetworkDiscoveryConfirmCB(uint8 status)
   \                     ZDO_NetworkDiscoveryConfirmCB:
   1928          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 3
   \   000004   74FD         MOV       A,#-0x3
   \   000006   12....       LCALL     ?ALLOC_XSTACK8
   \   000009   E9           MOV       A,R1
   \   00000A   85..82       MOV       DPL,?XSP + 0
   \   00000D   85..83       MOV       DPH,?XSP + 1
   \   000010   F0           MOVX      @DPTR,A
   1929            osal_event_hdr_t msg;
   1930          
   1931            // If Scan is initiated by ZDO_MGMT_NWK_DISC_REQ
   1932            // Send ZDO_MGMT_NWK_DISC_RSP back
   1933          #if defined ( ZDO_MGMT_NWKDISC_RESPONSE )
   1934            if ( zdappMgmtNwkDiscReqInProgress )
   1935            {
   1936              zdappMgmtNwkDiscReqInProgress = false;
   1937              ZDO_FinishProcessingMgmtNwkDiscReq();
   1938            }
   1939            else
   1940          #endif
   1941            {
   1942              // Pass the confirm to another task if it registers the callback
   1943              // Otherwise, pass the confirm to ZDApp.
   1944              if (zdoCBFunc[ZDO_NWK_DISCOVERY_CNF_CBID] != NULL )
   \   000011   90....       MOV       DPTR,#zdoCBFunc + 4
   \   000014   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   000017   6008         JZ        ??ZDO_NetworkDiscoveryConfirmCB_0
   1945              {      
   1946                zdoCBFunc[ZDO_NWK_DISCOVERY_CNF_CBID]( (void*)&status );
   \   000019                ; Setup parameters for indirect call
   \   000019   12....       LCALL     ?Subroutine17 & 0xFFFF
   1947              }
   \                     ??CrossCallReturnLabel_49:
   \   00001C   12....       LCALL     ?CALL_IND
   \   00001F   8017         SJMP      ??ZDO_NetworkDiscoveryConfirmCB_1
   1948              else
   1949              {
   1950                // Otherwise, send scan confirm to ZDApp task to proceed
   1951                msg.status = ZDO_SUCCESS;
   \                     ??ZDO_NetworkDiscoveryConfirmCB_0:
   \   000021   7402         MOV       A,#0x2
   \   000023   12....       LCALL     ?XSTACK_DISP0_8
   \   000026   E4           CLR       A
   \   000027   F0           MOVX      @DPTR,A
   1952                ZDApp_SendMsg( ZDAppTaskID, ZDO_NWK_DISC_CNF, sizeof(osal_event_hdr_t), (uint8 *)&msg );
   \   000028                ; Setup parameters for call to function ZDApp_SendMsg
   \   000028   04           INC       A
   \   000029   12....       LCALL     ?XSTACK_DISP102_8
   \   00002C   7B02         MOV       R3,#0x2
   \   00002E   7A01         MOV       R2,#0x1
   \   000030   90....       MOV       DPTR,#ZDAppTaskID
   \   000033   E0           MOVX      A,@DPTR
   \   000034   F9           MOV       R1,A
   \   000035   12....       LCALL     `??ZDApp_SendMsg::?relay`; Banked call to: ZDApp_SendMsg
   1953              }
   1954            }
   1955            return (ZSuccess);
   \                     ??ZDO_NetworkDiscoveryConfirmCB_1:
   \   000038   7900         MOV       R1,#0x0
   \   00003A   7403         MOV       A,#0x3
   \   00003C   12....       LCALL     ?DEALLOC_XSTACK8
   \   00003F                REQUIRE ?Subroutine3
   \   00003F                ; // Fall through to label ?Subroutine3
   1956          }  // ZDO_NetworkDiscoveryConfirmCB

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   AA..         MOV       R2,?XSP + 0
   \   000002   AB..         MOV       R3,?XSP + 1
   \   000004                REQUIRE ??Subroutine38_0
   \   000004                ; // Fall through to label ??Subroutine38_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine38_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F583         MOV       DPH,A
   \   000003   8882         MOV       DPL,R0
   \   000005   22           RET
   1957          
   1958          /*********************************************************************
   1959           * @fn          ZDApp_NwkDescListProcessing
   1960           *
   1961           * @brief       This function process the network discovery result and select 
   1962           *              a parent device to join itself.
   1963           *
   1964           * @param       none
   1965           *
   1966           * @return      ZStatus_t
   1967           */
   1968          #define STACK_PROFILE_MAX 2

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1969          networkDesc_t* ZDApp_NwkDescListProcessing(void)
   \                     ZDApp_NwkDescListProcessing:
   1970          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   1971            networkDesc_t *pNwkDesc;
   1972            uint8 i, ResultCount = 0;
   \   000005   75..00       MOV       ?V3,#0x0
   1973            uint8 stackProfile;
   1974            uint8 stackProfilePro;
   1975            uint8 selected;
   1976          
   1977            // Count the number of nwk descriptors in the list
   1978            pNwkDesc = nwk_getNwkDescList();
   \   000008                ; Setup parameters for call to function nwk_getNwkDescList
   \   000008   12....       LCALL     `??nwk_getNwkDescList::?relay`; Banked call to: nwk_getNwkDescList
   \   00000B   8A..         MOV       ?V0,R2
   \   00000D   8B..         MOV       ?V1,R3
   \   00000F   AE..         MOV       R6,?V0
   \   000011   AF..         MOV       R7,?V1
   \   000013   8005         SJMP      ??CrossCallReturnLabel_53
   1979            while (pNwkDesc)
   1980            {
   1981              ResultCount++;
   \                     ??ZDApp_NwkDescListProcessing_0:
   \   000015   05..         INC       ?V3
   1982              pNwkDesc = pNwkDesc->nextDesc;
   \   000017   12....       LCALL     ?Subroutine19 & 0xFFFF
   1983            }
   \                     ??CrossCallReturnLabel_53:
   \   00001A   EE           MOV       A,R6
   \   00001B   4F           ORL       A,R7
   \   00001C   70F7         JNZ       ??ZDApp_NwkDescListProcessing_0
   1984          
   1985            // process discovery results
   1986            stackProfilePro = FALSE;
   \   00001E   75..00       MOV       ?V2,#0x0
   1987            selected = FALSE; 
   1988            
   1989          
   1990            for ( stackProfile = 0; stackProfile < STACK_PROFILE_MAX; stackProfile++ )
   \   000021   75..00       MOV       ?V0,#0x0
   1991            {
   1992              pNwkDesc = nwk_getNwkDescList();
   \                     ??ZDApp_NwkDescListProcessing_1:
   \   000024                ; Setup parameters for call to function nwk_getNwkDescList
   \   000024   12....       LCALL     `??nwk_getNwkDescList::?relay`; Banked call to: nwk_getNwkDescList
   \   000027   8A..         MOV       ?V4,R2
   \   000029   8B..         MOV       ?V5,R3
   \   00002B   AE..         MOV       R6,?V4
   \   00002D   AF..         MOV       R7,?V5
   1993              for ( i = 0; i < ResultCount; i++, pNwkDesc = pNwkDesc->nextDesc )
   \   00002F   75..00       MOV       ?V1,#0x0
   \   000032   8023         SJMP      ??CrossCallReturnLabel_54
   1994              {
   1995                if ( zgConfigPANID != 0xFFFF )
   1996                {
   1997                  // PAN Id is preconfigured. check if it matches
   1998                  if ( pNwkDesc->panId != zgConfigPANID )
   1999                    continue;
   2000                }
   2001                
   2002                if ( nwk_ExtPANIDValid( ZDO_UseExtendedPANID) == true ) 
   2003                {
   2004                  // If the extended Pan ID is commissioned to a non zero value
   2005                  // Only join the Pan that has match EPID
   2006                  if ( osal_ExtAddrEqual( ZDO_UseExtendedPANID, pNwkDesc->extendedPANID) == false )
   2007                    continue;
   2008                  
   2009                }
   2010                
   2011                // check that network is allowing joining
   2012                if ( ZSTACK_ROUTER_BUILD )
   2013                {
   2014                  if ( stackProfilePro == FALSE )
   2015                  {
   2016                    if ( !pNwkDesc->routerCapacity )
   2017                    {
   2018                      continue;
   2019                    }
   2020                  }
   2021                  else
   2022                  {
   2023                    if ( !pNwkDesc->deviceCapacity )
   2024                    {
   2025                      continue;
   2026                    }
   2027                  }
   2028                }
   2029                else if ( ZSTACK_END_DEVICE_BUILD )
   2030                {
   2031                  if ( !pNwkDesc->deviceCapacity )
   2032                  {
   2033                    continue;
   2034                  }
   2035                }
   2036                
   2037                // check version of zigbee protocol
   2038                if ( pNwkDesc->version != _NIB.nwkProtocolVersion )
   2039                  continue;
   2040                
   2041                // check version of stack profile
   2042                if ( pNwkDesc->stackProfile != zgStackProfile  )
   2043                {
   2044                  if ( ((zgStackProfile == HOME_CONTROLS) && (pNwkDesc->stackProfile == ZIGBEEPRO_PROFILE)) 
   2045                      || ((zgStackProfile == ZIGBEEPRO_PROFILE) && (pNwkDesc->stackProfile == HOME_CONTROLS))  )
   \                     ??ZDApp_NwkDescListProcessing_2:
   \   000034   E0           MOVX      A,@DPTR
   \   000035   6402         XRL       A,#0x2
   \   000037   7012         JNZ       ??ZDApp_NwkDescListProcessing_3
   \   000039   8E82         MOV       DPL,R6
   \   00003B   8F83         MOV       DPH,R7
   \   00003D   A3           INC       DPTR
   \   00003E   A3           INC       DPTR
   \   00003F   A3           INC       DPTR
   \   000040   A3           INC       DPTR
   \   000041   A3           INC       DPTR
   \   000042   A3           INC       DPTR
   \   000043   E0           MOVX      A,@DPTR
   \   000044   6401         XRL       A,#0x1
   \   000046   7003         JNZ       ??ZDApp_NwkDescListProcessing_3
   2046                  {
   2047                    stackProfilePro = TRUE;
   \                     ??ZDApp_NwkDescListProcessing_4:
   \   000048   75..01       MOV       ?V2,#0x1
   2048                  }
   2049                  
   2050                  if ( stackProfile == 0 )
   \                     ??ZDApp_NwkDescListProcessing_3:
   \   00004B   E5..         MOV       A,?V0
   \   00004D   6003         JZ        $+5
   \   00004F   02....       LJMP      ??ZDApp_NwkDescListProcessing_5 & 0xFFFF
   \                     ??ZDApp_NwkDescListProcessing_6:
   \   000052   05..         INC       ?V1
   \   000054   12....       LCALL     ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   000057   E5..         MOV       A,?V1
   \   000059   C3           CLR       C
   \   00005A   95..         SUBB      A,?V3
   \   00005C   4003         JC        $+5
   \   00005E   02....       LJMP      ??ZDApp_NwkDescListProcessing_7 & 0xFFFF
   \   000061   90....       MOV       DPTR,#zgConfigPANID
   \   000064   E0           MOVX      A,@DPTR
   \   000065   F4           CPL       A
   \   000066   7003         JNZ       ??ZDApp_NwkDescListProcessing_8
   \   000068   A3           INC       DPTR
   \   000069   E0           MOVX      A,@DPTR
   \   00006A   F4           CPL       A
   \                     ??ZDApp_NwkDescListProcessing_8:
   \   00006B   600F         JZ        ??ZDApp_NwkDescListProcessing_9
   \   00006D   12....       LCALL     ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   000070   90....       MOV       DPTR,#zgConfigPANID
   \   000073   E0           MOVX      A,@DPTR
   \   000074   68           XRL       A,R0
   \   000075   7003         JNZ       ??ZDApp_NwkDescListProcessing_10
   \   000077   A3           INC       DPTR
   \   000078   E0           MOVX      A,@DPTR
   \   000079   69           XRL       A,R1
   \                     ??ZDApp_NwkDescListProcessing_10:
   \   00007A   70D6         JNZ       ??ZDApp_NwkDescListProcessing_6
   \                     ??ZDApp_NwkDescListProcessing_9:
   \   00007C                ; Setup parameters for call to function nwk_ExtPANIDValid
   \   00007C   7A..         MOV       R2,#ZDO_UseExtendedPANID & 0xff
   \   00007E   7B..         MOV       R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   000080   12....       LCALL     `??nwk_ExtPANIDValid::?relay`; Banked call to: nwk_ExtPANIDValid
   \   000083   E9           MOV       A,R1
   \   000084   6401         XRL       A,#0x1
   \   000086   7011         JNZ       ??ZDApp_NwkDescListProcessing_11
   \   000088                ; Setup parameters for call to function sAddrExtCmp
   \   000088   EE           MOV       A,R6
   \   000089   240B         ADD       A,#0xb
   \   00008B   FC           MOV       R4,A
   \   00008C   E4           CLR       A
   \   00008D   3F           ADDC      A,R7
   \   00008E   FD           MOV       R5,A
   \   00008F   7A..         MOV       R2,#ZDO_UseExtendedPANID & 0xff
   \   000091   7B..         MOV       R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   000093   12....       LCALL     `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   000096   E9           MOV       A,R1
   \   000097   60B9         JZ        ??ZDApp_NwkDescListProcessing_6
   \                     ??ZDApp_NwkDescListProcessing_11:
   \   000099   8E82         MOV       DPL,R6
   \   00009B   8F83         MOV       DPH,R7
   \   00009D   A3           INC       DPTR
   \   00009E   A3           INC       DPTR
   \   00009F   A3           INC       DPTR
   \   0000A0   A3           INC       DPTR
   \   0000A1   E0           MOVX      A,@DPTR
   \   0000A2   60AE         JZ        ??ZDApp_NwkDescListProcessing_6
   \   0000A4   8E82         MOV       DPL,R6
   \   0000A6   8F83         MOV       DPH,R7
   \   0000A8   A3           INC       DPTR
   \   0000A9   A3           INC       DPTR
   \   0000AA   A3           INC       DPTR
   \   0000AB   A3           INC       DPTR
   \   0000AC   A3           INC       DPTR
   \   0000AD   E0           MOVX      A,@DPTR
   \   0000AE   F8           MOV       R0,A
   \   0000AF   90....       MOV       DPTR,#_NIB + 17
   \   0000B2   E0           MOVX      A,@DPTR
   \   0000B3   68           XRL       A,R0
   \   0000B4   709C         JNZ       ??ZDApp_NwkDescListProcessing_6
   \   0000B6   8E82         MOV       DPL,R6
   \   0000B8   8F83         MOV       DPH,R7
   \   0000BA   A3           INC       DPTR
   \   0000BB   A3           INC       DPTR
   \   0000BC   A3           INC       DPTR
   \   0000BD   A3           INC       DPTR
   \   0000BE   A3           INC       DPTR
   \   0000BF   A3           INC       DPTR
   \   0000C0   E0           MOVX      A,@DPTR
   \   0000C1   F8           MOV       R0,A
   \   0000C2   90....       MOV       DPTR,#zgStackProfile
   \   0000C5   E0           MOVX      A,@DPTR
   \   0000C6   68           XRL       A,R0
   \   0000C7   6039         JZ        ??ZDApp_NwkDescListProcessing_5
   \   0000C9   E0           MOVX      A,@DPTR
   \   0000CA   6401         XRL       A,#0x1
   \   0000CC   6003         JZ        $+5
   \   0000CE   02....       LJMP      ??ZDApp_NwkDescListProcessing_2 & 0xFFFF
   \   0000D1   8E82         MOV       DPL,R6
   \   0000D3   8F83         MOV       DPH,R7
   \   0000D5   A3           INC       DPTR
   \   0000D6   A3           INC       DPTR
   \   0000D7   A3           INC       DPTR
   \   0000D8   A3           INC       DPTR
   \   0000D9   A3           INC       DPTR
   \   0000DA   A3           INC       DPTR
   \   0000DB   E0           MOVX      A,@DPTR
   \   0000DC   6402         XRL       A,#0x2
   \   0000DE   6003         JZ        $+5
   \   0000E0   02....       LJMP      ??ZDApp_NwkDescListProcessing_3 & 0xFFFF
   \   0000E3   02....       LJMP      ??ZDApp_NwkDescListProcessing_4 & 0xFFFF
   2051                  {
   2052                    continue;
   2053                  }
   2054                }
   2055                
   2056                break;
   2057              } 
   2058              
   2059              if (i < ResultCount)
   2060              {
   2061               selected = TRUE;
   2062                break;
   2063              }
   2064             
   2065              // break if selected or stack profile pro wasn't found
   2066              if ( (selected == TRUE) || (stackProfilePro == FALSE) )
   \                     ??ZDApp_NwkDescListProcessing_7:
   \   0000E6   E5..         MOV       A,?V2
   \   0000E8   600C         JZ        ??ZDApp_NwkDescListProcessing_12
   2067              {
   2068                break;
   2069              }
   2070            }
   \   0000EA   05..         INC       ?V0
   \   0000EC   E5..         MOV       A,?V0
   \   0000EE   C3           CLR       C
   \   0000EF   9402         SUBB      A,#0x2
   \   0000F1   5003         JNC       $+5
   \   0000F3   02....       LJMP      ??ZDApp_NwkDescListProcessing_1 & 0xFFFF
   2071          
   2072            if ( i == ResultCount )
   \                     ??ZDApp_NwkDescListProcessing_12:
   \   0000F6   E5..         MOV       A,?V3
   \   0000F8   65..         XRL       A,?V1
   \   0000FA   7006         JNZ       ??ZDApp_NwkDescListProcessing_5
   2073            {
   2074              return (NULL);   // couldn't find appropriate PAN to join !
   \   0000FC   7A00         MOV       R2,#0x0
   \   0000FE   7B00         MOV       R3,#0x0
   \   000100   8004         SJMP      ??ZDApp_NwkDescListProcessing_13
   2075            }
   2076            else
   2077            {
   2078              return (pNwkDesc);
   \                     ??ZDApp_NwkDescListProcessing_5:
   \   000102   EE           MOV       A,R6
   \   000103   FA           MOV       R2,A
   \   000104   EF           MOV       A,R7
   \   000105   FB           MOV       R3,A
   2079            }
   \                     ??ZDApp_NwkDescListProcessing_13:
   \   000106                REQUIRE ?Subroutine5
   \   000106                ; // Fall through to label ?Subroutine5
   2080          }// ZDApp_NwkDescListProcessing()

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   7F06         MOV       R7,#0x6
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   EE           MOV       A,R6
   \   000001   2414         ADD       A,#0x14
   \   000003   F582         MOV       DPL,A
   \   000005   E4           CLR       A
   \   000006   3F           ADDC      A,R7
   \   000007   F583         MOV       DPH,A
   \   000009                REQUIRE ??Subroutine39_0
   \   000009                ; // Fall through to label ??Subroutine39_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine39_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FE           MOV       R6,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FF           MOV       R7,A
   \   000005   22           RET
   2081          
   2082          /*********************************************************************
   2083           * @fn          ZDO_NetworkFormationConfirmCB
   2084           *
   2085           * @brief       This function reports the results of the request to
   2086           *              initialize a coordinator in a network.
   2087           *
   2088           * @param       Status - Result of NLME_NetworkFormationRequest()
   2089           *
   2090           * @return      none
   2091           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7B00         MOV       R3,#0x0
   \   000002   90....       MOV       DPTR,#ZDAppTaskID
   \   000005   E0           MOVX      A,@DPTR
   \   000006   F9           MOV       R1,A
   \   000007   12....       LCALL     `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   00000A                REQUIRE ??Subroutine37_0
   \   00000A                ; // Fall through to label ??Subroutine37_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2092          void ZDO_NetworkFormationConfirmCB( ZStatus_t Status )
   \                     ZDO_NetworkFormationConfirmCB:
   2093          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   2094            nwkStatus = (byte)Status;
   \   000006   90....       MOV       DPTR,#nwkStatus
   \   000009   F0           MOVX      @DPTR,A
   2095          
   2096            if ( Status == ZSUCCESS )
   \   00000A   7019         JNZ       ??ZDO_NetworkFormationConfirmCB_0
   2097            {
   2098              // LED on shows Coordinator started
   2099              HalLedSet ( HAL_LED_3, HAL_LED_MODE_ON );
   \   00000C                ; Setup parameters for call to function HalLedSet
   \   00000C   7A01         MOV       R2,#0x1
   \   00000E   7904         MOV       R1,#0x4
   \   000010   12....       LCALL     `??HalLedSet::?relay`; Banked call to: HalLedSet
   2100          
   2101              // LED off forgets HOLD_AUTO_START
   2102              HalLedSet (HAL_LED_4, HAL_LED_MODE_OFF);
   \   000013                ; Setup parameters for call to function HalLedSet
   \   000013   7A00         MOV       R2,#0x0
   \   000015   7908         MOV       R1,#0x8
   \   000017   12....       LCALL     `??HalLedSet::?relay`; Banked call to: HalLedSet
   2103          
   2104          #if defined ( ZBIT )
   2105              SIM_SetColor(0xd0ffd0);
   2106          #endif
   2107          
   2108              if ( devState == DEV_HOLD )
   \   00001A   90....       MOV       DPTR,#devState
   \   00001D   E0           MOVX      A,@DPTR
   \   00001E   700C         JNZ       ??ZDO_NetworkFormationConfirmCB_1
   2109              {
   2110                // Began with HOLD_AUTO_START
   2111                devState = DEV_COORD_STARTING;
   \   000020   7408         MOV       A,#0x8
   \   000022   F0           MOVX      @DPTR,A
   \   000023   8007         SJMP      ??ZDO_NetworkFormationConfirmCB_1
   2112              }
   2113            }
   2114          #if defined(BLINK_LEDS)
   2115            else
   2116            {
   2117              HalLedSet ( HAL_LED_3, HAL_LED_MODE_FLASH );  // Flash LED to show failure
   \                     ??ZDO_NetworkFormationConfirmCB_0:
   \   000025                ; Setup parameters for call to function HalLedSet
   \   000025   7A04         MOV       R2,#0x4
   \   000027   7904         MOV       R1,#0x4
   \   000029   12....       LCALL     `??HalLedSet::?relay`; Banked call to: HalLedSet
   2118            }
   2119          #endif
   2120          
   2121            osal_set_event( ZDAppTaskID, ZDO_NETWORK_START );
   \                     ??ZDO_NetworkFormationConfirmCB_1:
   \   00002C                ; Setup parameters for call to function osal_set_event
   \   00002C   7A02         MOV       R2,#0x2
   \   00002E   02....       LJMP      ?Subroutine0 & 0xFFFF
   2122          }
   2123          
   2124          /****************************************************************************
   2125           * @fn          ZDApp_beaconIndProcessing
   2126           *
   2127           * @brief       This function processes the incoming beacon indication.
   2128           *
   2129           *              When another task (MT or App) is registered to process
   2130           *              beacon indication themselves, this function will parse the 
   2131           *              beacon payload and pass the beacon descriptor to that task
   2132           *              If no other tasks registered, this function will process
   2133           *              the beacon payload and generate the network descriptor link
   2134           *              list.
   2135           *
   2136           * @param
   2137           *
   2138           * @return      none
   2139           *
   2140           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2141          void ZDO_beaconNotifyIndCB( NLME_beaconInd_t *pBeacon )
   \                     ZDO_beaconNotifyIndCB:
   2142          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   2143            // Pass the beacon Indication to another task if it registers the callback
   2144            // Otherwise, process the beacon notification here.
   2145            if (zdoCBFunc[ZDO_BEACON_NOTIFY_IND_CBID] != NULL )
   \   000009   90....       MOV       DPTR,#zdoCBFunc + 6
   \   00000C   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   00000F   6009         JZ        ??ZDO_beaconNotifyIndCB_0
   2146            {  
   2147              zdoCBFunc[ZDO_BEACON_NOTIFY_IND_CBID]( (void*)pBeacon );
   \   000011                ; Setup parameters for indirect call
   \   000011   12....       LCALL     ??Subroutine38_0 & 0xFFFF
   2148            }
   \                     ??CrossCallReturnLabel_47:
   \   000014   12....       LCALL     ?CALL_IND
   \   000017   02....       LJMP      ??ZDO_beaconNotifyIndCB_1 & 0xFFFF
   2149            else
   2150            {
   2151              networkDesc_t *pNwkDesc;
   2152              networkDesc_t *pLastNwkDesc;
   2153              uint8 found = false;
   2154              
   2155              // Add the network to the Network Descriptor List
   2156              pNwkDesc = NwkDescList;
   \                     ??ZDO_beaconNotifyIndCB_0:
   \   00001A   90....       MOV       DPTR,#NwkDescList
   \   00001D   12....       LCALL     ??Subroutine39_0 & 0xFFFF
   2157              pLastNwkDesc = NwkDescList;
   \                     ??CrossCallReturnLabel_52:
   \   000020   90....       MOV       DPTR,#NwkDescList
   \   000023   E0           MOVX      A,@DPTR
   \   000024   F5..         MOV       ?V2,A
   \   000026   A3           INC       DPTR
   \   000027   E0           MOVX      A,@DPTR
   \   000028   F5..         MOV       ?V3,A
   \   00002A   802D         SJMP      ??CrossCallReturnLabel_55
   2158              while (pNwkDesc)
   2159              {
   2160                if ((pNwkDesc->panId == pBeacon->panID) &&
   2161                    (pNwkDesc->logicalChannel == pBeacon->logicalChannel))
   \                     ??ZDO_beaconNotifyIndCB_2:
   \   00002C   12....       LCALL     ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_62:
   \   00002F   8A82         MOV       DPL,R2
   \   000031   8B83         MOV       DPH,R3
   \   000033   A3           INC       DPTR
   \   000034   A3           INC       DPTR
   \   000035   E0           MOVX      A,@DPTR
   \   000036   68           XRL       A,R0
   \   000037   7003         JNZ       ??ZDO_beaconNotifyIndCB_3
   \   000039   A3           INC       DPTR
   \   00003A   E0           MOVX      A,@DPTR
   \   00003B   69           XRL       A,R1
   \                     ??ZDO_beaconNotifyIndCB_3:
   \   00003C   7014         JNZ       ??ZDO_beaconNotifyIndCB_4
   \   00003E   8E82         MOV       DPL,R6
   \   000040   8F83         MOV       DPH,R7
   \   000042   A3           INC       DPTR
   \   000043   A3           INC       DPTR
   \   000044   E0           MOVX      A,@DPTR
   \   000045   F8           MOV       R0,A
   \   000046   8A82         MOV       DPL,R2
   \   000048   8B83         MOV       DPH,R3
   \   00004A   A3           INC       DPTR
   \   00004B   A3           INC       DPTR
   \   00004C   A3           INC       DPTR
   \   00004D   A3           INC       DPTR
   \   00004E   E0           MOVX      A,@DPTR
   \   00004F   68           XRL       A,R0
   \   000050   605F         JZ        ??ZDO_beaconNotifyIndCB_5
   2162                {
   2163                  found = true;
   2164                  break;
   2165                }
   2166                pLastNwkDesc = pNwkDesc;
   \                     ??ZDO_beaconNotifyIndCB_4:
   \   000052   8E..         MOV       ?V2,R6
   \   000054   8F..         MOV       ?V3,R7
   2167                pNwkDesc = pNwkDesc->nextDesc;
   \   000056   12....       LCALL     ?Subroutine19 & 0xFFFF
   2168              }
   \                     ??CrossCallReturnLabel_55:
   \   000059   EE           MOV       A,R6
   \   00005A   4F           ORL       A,R7
   \   00005B   70CF         JNZ       ??ZDO_beaconNotifyIndCB_2
   2169              
   2170              // If no existing descriptor found, make a new one and add to the list
   2171              if (found == false)
   2172              {
   2173                pNwkDesc = osal_mem_alloc( sizeof(networkDesc_t)  );
   \   00005D                ; Setup parameters for call to function osal_mem_alloc
   \   00005D   7A16         MOV       R2,#0x16
   \   00005F   7B00         MOV       R3,#0x0
   \   000061   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000064   8A..         MOV       ?V4,R2
   \   000066   8B..         MOV       ?V5,R3
   \   000068   AE..         MOV       R6,?V4
   \   00006A   AF..         MOV       R7,?V5
   2174                if ( !pNwkDesc )
   \   00006C   EE           MOV       A,R6
   \   00006D   4F           ORL       A,R7
   \   00006E   7003         JNZ       $+5
   \   000070   02....       LJMP      ??ZDO_beaconNotifyIndCB_1 & 0xFFFF
   2175                {
   2176                  // Memory alloc failed, discard this beacon
   2177                  return;
   2178                }
   2179                
   2180                // Clear the network descriptor
   2181                osal_memset( pNwkDesc, 0, sizeof(networkDesc_t)  );
   \   000073                ; Setup parameters for call to function osal_memset
   \   000073   7C16         MOV       R4,#0x16
   \   000075   7D00         MOV       R5,#0x0
   \   000077   7900         MOV       R1,#0x0
   \   000079   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   2182                
   2183                // Initialize the descriptor
   2184                pNwkDesc->chosenRouter = INVALID_NODE_ADDR;
   \   00007C   8E82         MOV       DPL,R6
   \   00007E   8F83         MOV       DPH,R7
   \   000080   A3           INC       DPTR
   \   000081   A3           INC       DPTR
   \   000082   A3           INC       DPTR
   \   000083   A3           INC       DPTR
   \   000084   A3           INC       DPTR
   \   000085   A3           INC       DPTR
   \   000086   A3           INC       DPTR
   \   000087   74FE         MOV       A,#-0x2
   \   000089   F0           MOVX      @DPTR,A
   \   00008A   A3           INC       DPTR
   \   00008B   04           INC       A
   \   00008C   12....       LCALL     ?Subroutine8 & 0xFFFF
   2185                pNwkDesc->chosenRouterDepth = 0xFF;
   \                     ??CrossCallReturnLabel_1:
   \   00008F   A3           INC       DPTR
   \   000090   A3           INC       DPTR
   \   000091   A3           INC       DPTR
   \   000092   A3           INC       DPTR
   \   000093   F0           MOVX      @DPTR,A
   2186                
   2187                // Save new entry into the descriptor list
   2188                if ( !NwkDescList )
   \   000094   90....       MOV       DPTR,#NwkDescList
   \   000097   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   00009A   7005         JNZ       ??ZDO_beaconNotifyIndCB_6
   2189                {
   2190                  NwkDescList = pNwkDesc;
   \   00009C   90....       MOV       DPTR,#NwkDescList
   \   00009F   800B         SJMP      ??ZDO_beaconNotifyIndCB_7
   2191                }
   2192                else
   2193                {
   2194                  pLastNwkDesc->nextDesc = pNwkDesc;
   \                     ??ZDO_beaconNotifyIndCB_6:
   \   0000A1   E5..         MOV       A,?V2
   \   0000A3   2414         ADD       A,#0x14
   \   0000A5   F582         MOV       DPL,A
   \   0000A7   E4           CLR       A
   \   0000A8   35..         ADDC      A,?V3
   \   0000AA   F583         MOV       DPH,A
   \                     ??ZDO_beaconNotifyIndCB_7:
   \   0000AC   EE           MOV       A,R6
   \   0000AD   F0           MOVX      @DPTR,A
   \   0000AE   A3           INC       DPTR
   \   0000AF   EF           MOV       A,R7
   \   0000B0   F0           MOVX      @DPTR,A
   2195                }
   2196              }
   2197              
   2198              // Update the descriptor with the incoming beacon
   2199              pNwkDesc->stackProfile   = pBeacon->stackProfile;
   \                     ??ZDO_beaconNotifyIndCB_5:
   \   0000B1   85..82       MOV       DPL,?V0
   \   0000B4   85..83       MOV       DPH,?V1
   \   0000B7   A3           INC       DPTR
   \   0000B8   A3           INC       DPTR
   \   0000B9   A3           INC       DPTR
   \   0000BA   A3           INC       DPTR
   \   0000BB   A3           INC       DPTR
   \   0000BC   A3           INC       DPTR
   \   0000BD   A3           INC       DPTR
   \   0000BE   A3           INC       DPTR
   \   0000BF   A3           INC       DPTR
   \   0000C0   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   0000C3   A3           INC       DPTR
   \   0000C4   F0           MOVX      @DPTR,A
   2200              pNwkDesc->version        = pBeacon->protocolVersion;
   \   0000C5   E5..         MOV       A,?V0
   \   0000C7   2408         ADD       A,#0x8
   \   0000C9   F8           MOV       R0,A
   \   0000CA   E4           CLR       A
   \   0000CB   35..         ADDC      A,?V1
   \   0000CD   F9           MOV       R1,A
   \   0000CE   8882         MOV       DPL,R0
   \   0000D0   8983         MOV       DPH,R1
   \   0000D2   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   0000D5   12....       LCALL     ?Subroutine9 & 0xFFFF
   2201              pNwkDesc->logicalChannel = pBeacon->logicalChannel;
   \                     ??CrossCallReturnLabel_2:
   \   0000D8   E0           MOVX      A,@DPTR
   \   0000D9   8E82         MOV       DPL,R6
   \   0000DB   8F83         MOV       DPH,R7
   \   0000DD   A3           INC       DPTR
   \   0000DE   A3           INC       DPTR
   \   0000DF   12....       LCALL     ?Subroutine26 & 0xFFFF
   2202              pNwkDesc->panId          = pBeacon->panID;
   \                     ??CrossCallReturnLabel_32:
   \   0000E2   E0           MOVX      A,@DPTR
   \   0000E3   FA           MOV       R2,A
   \   0000E4   A3           INC       DPTR
   \   0000E5   E0           MOVX      A,@DPTR
   \   0000E6   FB           MOV       R3,A
   \   0000E7   8E82         MOV       DPL,R6
   \   0000E9   8F83         MOV       DPH,R7
   \   0000EB   12....       LCALL     ??Subroutine41_0 & 0xFFFF
   2203              pNwkDesc->updateId       = pBeacon->updateID;
   \                     ??CrossCallReturnLabel_66:
   \   0000EE   E5..         MOV       A,?V0
   \   0000F0   240C         ADD       A,#0xc
   \   0000F2   F582         MOV       DPL,A
   \   0000F4   E4           CLR       A
   \   0000F5   35..         ADDC      A,?V1
   \   0000F7   F583         MOV       DPH,A
   \   0000F9   E0           MOVX      A,@DPTR
   \   0000FA   C0E0         PUSH      A
   \   0000FC   EE           MOV       A,R6
   \   0000FD   2413         ADD       A,#0x13
   \   0000FF   F582         MOV       DPL,A
   \   000101   E4           CLR       A
   \   000102   3F           ADDC      A,R7
   \   000103   F583         MOV       DPH,A
   \   000105   D0E0         POP       A
   \   000107   F0           MOVX      @DPTR,A
   2204              
   2205              // Save the extended PAN ID from the beacon payload only if 1.1 version network
   2206              if ( pBeacon->protocolVersion != ZB_PROT_V1_0 )
   \   000108   8882         MOV       DPL,R0
   \   00010A   8983         MOV       DPH,R1
   \   00010C   E0           MOVX      A,@DPTR
   \   00010D   6401         XRL       A,#0x1
   \   00010F   6010         JZ        ??ZDO_beaconNotifyIndCB_8
   2207              {
   2208                osal_cpyExtAddr( pNwkDesc->extendedPANID, pBeacon->extendedPanID );
   \   000111                ; Setup parameters for call to function sAddrExtCpy
   \   000111   E5..         MOV       A,?V0
   \   000113   240D         ADD       A,#0xd
   \   000115   FC           MOV       R4,A
   \   000116   E4           CLR       A
   \   000117   35..         ADDC      A,?V1
   \   000119   12....       LCALL     ?Subroutine24 & 0xFFFF
   2209              }
   \                     ??CrossCallReturnLabel_46:
   \   00011C   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   00011F   800C         SJMP      ??ZDO_beaconNotifyIndCB_9
   2210              else
   2211              {
   2212                osal_memset( pNwkDesc->extendedPANID, 0xFF, Z_EXTADDR_LEN );
   \                     ??ZDO_beaconNotifyIndCB_8:
   \   000121                ; Setup parameters for call to function osal_memset
   \   000121   7C08         MOV       R4,#0x8
   \   000123   7D00         MOV       R5,#0x0
   \   000125   79FF         MOV       R1,#-0x1
   \   000127   12....       LCALL     ??Subroutine32_0 & 0xFFFF
   2213              }
   \                     ??CrossCallReturnLabel_44:
   \   00012A   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   2214              
   2215              // check if this device is a better choice to join...
   2216              // ...dont bother checking assocPermit flag is doing a rejoin
   2217              if ( ( pBeacon->LQI > gMIN_TREE_LINK_COST ) &&
   2218                  ( ( pBeacon->permitJoining == TRUE ) || ( _tmpRejoinState ) ) )
   \                     ??ZDO_beaconNotifyIndCB_9:
   \   00012D   85..82       MOV       DPL,?V0
   \   000130   85..83       MOV       DPH,?V1
   \   000133   A3           INC       DPTR
   \   000134   A3           INC       DPTR
   \   000135   A3           INC       DPTR
   \   000136   A3           INC       DPTR
   \   000137   A3           INC       DPTR
   \   000138   A3           INC       DPTR
   \   000139   A3           INC       DPTR
   \   00013A   A3           INC       DPTR
   \   00013B   A3           INC       DPTR
   \   00013C   A3           INC       DPTR
   \   00013D   E0           MOVX      A,@DPTR
   \   00013E   F8           MOV       R0,A
   \   00013F   90....       MOV       DPTR,#gMIN_TREE_LINK_COST
   \   000142   E0           MOVX      A,@DPTR
   \   000143   C3           CLR       C
   \   000144   98           SUBB      A,R0
   \   000145   4003         JC        $+5
   \   000147   02....       LJMP      ??ZDO_beaconNotifyIndCB_1 & 0xFFFF
   \   00014A   85..82       MOV       DPL,?V0
   \   00014D   85..83       MOV       DPH,?V1
   \   000150   A3           INC       DPTR
   \   000151   A3           INC       DPTR
   \   000152   A3           INC       DPTR
   \   000153   A3           INC       DPTR
   \   000154   A3           INC       DPTR
   \   000155   E0           MOVX      A,@DPTR
   \   000156   6401         XRL       A,#0x1
   \   000158   6009         JZ        ??ZDO_beaconNotifyIndCB_10
   \   00015A   90....       MOV       DPTR,#_tmpRejoinState
   \   00015D   E0           MOVX      A,@DPTR
   \   00015E   7003         JNZ       $+5
   \   000160   02....       LJMP      ??ZDO_beaconNotifyIndCB_1 & 0xFFFF
   2219              {
   2220                uint8 selected = FALSE;
   \                     ??ZDO_beaconNotifyIndCB_10:
   \   000163   C2F0         CLR       B.0
   2221                uint8 capacity = FALSE;
   2222                
   2223                if ( _NIB.nwkAddrAlloc == NWK_ADDRESSING_STOCHASTIC )
   \   000165   90....       MOV       DPTR,#_NIB + 96
   \   000168   E0           MOVX      A,@DPTR
   \   000169   6402         XRL       A,#0x2
   \   00016B   702C         JNZ       ??ZDO_beaconNotifyIndCB_11
   2224                {
   2225                  if ( ((pBeacon->LQI   > pNwkDesc->chosenRouterLinkQuality) &&
   2226                        (pBeacon->depth < MAX_NODE_DEPTH)) ||
   2227                      ((pBeacon->LQI   == pNwkDesc->chosenRouterLinkQuality) &&
   2228                       (pBeacon->depth < pNwkDesc->chosenRouterDepth)) ) 
   \   00016D   8E82         MOV       DPL,R6
   \   00016F   8F83         MOV       DPH,R7
   \   000171   A3           INC       DPTR
   \   000172   A3           INC       DPTR
   \   000173   A3           INC       DPTR
   \   000174   A3           INC       DPTR
   \   000175   A3           INC       DPTR
   \   000176   A3           INC       DPTR
   \   000177   A3           INC       DPTR
   \   000178   A3           INC       DPTR
   \   000179   A3           INC       DPTR
   \   00017A   E0           MOVX      A,@DPTR
   \   00017B   C3           CLR       C
   \   00017C   98           SUBB      A,R0
   \   00017D   5009         JNC       ??ZDO_beaconNotifyIndCB_12
   \   00017F   12....       LCALL     ?Subroutine23 & 0xFFFF
   2229                  {
   2230                    selected = TRUE;
   2231                  }
   2232                }
   \                     ??CrossCallReturnLabel_28:
   \   000182   9414         SUBB      A,#0x14
   \   000184   4029         JC        ??ZDO_beaconNotifyIndCB_13
   \   000186   8029         SJMP      ??ZDO_beaconNotifyIndCB_14
   \                     ??ZDO_beaconNotifyIndCB_12:
   \   000188   8E82         MOV       DPL,R6
   \   00018A   8F83         MOV       DPH,R7
   \   00018C   A3           INC       DPTR
   \   00018D   A3           INC       DPTR
   \   00018E   A3           INC       DPTR
   \   00018F   A3           INC       DPTR
   \   000190   A3           INC       DPTR
   \   000191   A3           INC       DPTR
   \   000192   A3           INC       DPTR
   \   000193   A3           INC       DPTR
   \   000194   A3           INC       DPTR
   \   000195   E0           MOVX      A,@DPTR
   \   000196   68           XRL       A,R0
   \   000197   7059         JNZ       ??ZDO_beaconNotifyIndCB_15
   2233                else
   2234                {
   2235                  if ( pBeacon->depth < pNwkDesc->chosenRouterDepth )
   \                     ??ZDO_beaconNotifyIndCB_11:
   \   000199   8E82         MOV       DPL,R6
   \   00019B   8F83         MOV       DPH,R7
   \   00019D   A3           INC       DPTR
   \   00019E   A3           INC       DPTR
   \   00019F   A3           INC       DPTR
   \   0001A0   A3           INC       DPTR
   \   0001A1   A3           INC       DPTR
   \   0001A2   A3           INC       DPTR
   \   0001A3   A3           INC       DPTR
   \   0001A4   A3           INC       DPTR
   \   0001A5   A3           INC       DPTR
   \   0001A6   A3           INC       DPTR
   \   0001A7   E0           MOVX      A,@DPTR
   \   0001A8   F8           MOV       R0,A
   \   0001A9   12....       LCALL     ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   0001AC   98           SUBB      A,R0
   \   0001AD   5043         JNC       ??ZDO_beaconNotifyIndCB_15
   2236                  {
   2237                    selected = TRUE;
   \                     ??ZDO_beaconNotifyIndCB_13:
   \   0001AF   D2F0         SETB      B.0
   2238                  }
   2239                }
   2240                
   2241                if ( ZSTACK_ROUTER_BUILD )
   2242                {
   2243                  capacity = pBeacon->routerCapacity;
   2244                }
   2245                else if ( ZSTACK_END_DEVICE_BUILD )
   2246                {
   2247                  capacity = pBeacon->deviceCapacity;
   2248                }
   2249                
   2250                if ( (capacity) && (selected) )
   \                     ??ZDO_beaconNotifyIndCB_14:
   \   0001B1   85..82       MOV       DPL,?V0
   \   0001B4   85..83       MOV       DPH,?V1
   \   0001B7   A3           INC       DPTR
   \   0001B8   A3           INC       DPTR
   \   0001B9   A3           INC       DPTR
   \   0001BA   A3           INC       DPTR
   \   0001BB   A3           INC       DPTR
   \   0001BC   A3           INC       DPTR
   \   0001BD   A3           INC       DPTR
   \   0001BE   E0           MOVX      A,@DPTR
   \   0001BF   604C         JZ        ??ZDO_beaconNotifyIndCB_16
   \   0001C1   A2F0         MOV       C,B.0
   \   0001C3   503D         JNC       ??ZDO_beaconNotifyIndCB_17
   2251                {
   2252                  // this is the new chosen router for joining...
   2253                  pNwkDesc->chosenRouter            = pBeacon->sourceAddr;
   \   0001C5   85..82       MOV       DPL,?V0
   \   0001C8   85..83       MOV       DPH,?V1
   \   0001CB   12....       LCALL     ??Subroutine40_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_57:
   \   0001CE   8E82         MOV       DPL,R6
   \   0001D0   8F83         MOV       DPH,R7
   \   0001D2   A3           INC       DPTR
   \   0001D3   A3           INC       DPTR
   \   0001D4   A3           INC       DPTR
   \   0001D5   A3           INC       DPTR
   \   0001D6   A3           INC       DPTR
   \   0001D7   A3           INC       DPTR
   \   0001D8   A3           INC       DPTR
   \   0001D9   E8           MOV       A,R0
   \   0001DA   F0           MOVX      @DPTR,A
   \   0001DB   A3           INC       DPTR
   \   0001DC   E9           MOV       A,R1
   \   0001DD   12....       LCALL     ?Subroutine9 & 0xFFFF
   2254                  pNwkDesc->chosenRouterLinkQuality = pBeacon->LQI;
   \                     ??CrossCallReturnLabel_3:
   \   0001E0   A3           INC       DPTR
   \   0001E1   A3           INC       DPTR
   \   0001E2   A3           INC       DPTR
   \   0001E3   A3           INC       DPTR
   \   0001E4   A3           INC       DPTR
   \   0001E5   A3           INC       DPTR
   \   0001E6   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   0001E9   F0           MOVX      @DPTR,A
   2255                  pNwkDesc->chosenRouterDepth       = pBeacon->depth;
   \   0001EA   12....       LCALL     ?Subroutine29 & 0xFFFF
   2256                }
   \                     ??CrossCallReturnLabel_38:
   \   0001ED   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   0001F0   A3           INC       DPTR
   \   0001F1   F0           MOVX      @DPTR,A
   2257                
   2258                if ( pBeacon->deviceCapacity )
   \                     ??ZDO_beaconNotifyIndCB_15:
   \   0001F2   85..82       MOV       DPL,?V0
   \   0001F5   85..83       MOV       DPH,?V1
   \   0001F8   A3           INC       DPTR
   \   0001F9   A3           INC       DPTR
   \   0001FA   A3           INC       DPTR
   \   0001FB   A3           INC       DPTR
   \   0001FC   A3           INC       DPTR
   \   0001FD   A3           INC       DPTR
   \   0001FE   A3           INC       DPTR
   \   0001FF   E0           MOVX      A,@DPTR
   \   000200   600B         JZ        ??ZDO_beaconNotifyIndCB_16
   2259                  pNwkDesc->deviceCapacity = 1;
   \                     ??ZDO_beaconNotifyIndCB_17:
   \   000202   8E82         MOV       DPL,R6
   \   000204   8F83         MOV       DPH,R7
   \   000206   A3           INC       DPTR
   \   000207   A3           INC       DPTR
   \   000208   A3           INC       DPTR
   \   000209   A3           INC       DPTR
   \   00020A   7401         MOV       A,#0x1
   \   00020C   F0           MOVX      @DPTR,A
   2260                
   2261                if ( pBeacon->routerCapacity )
   \                     ??ZDO_beaconNotifyIndCB_16:
   \   00020D   85..82       MOV       DPL,?V0
   \   000210   85..83       MOV       DPH,?V1
   \   000213   A3           INC       DPTR
   \   000214   A3           INC       DPTR
   \   000215   A3           INC       DPTR
   \   000216   A3           INC       DPTR
   \   000217   A3           INC       DPTR
   \   000218   A3           INC       DPTR
   \   000219   E0           MOVX      A,@DPTR
   \   00021A   600A         JZ        ??ZDO_beaconNotifyIndCB_1
   2262                  pNwkDesc->routerCapacity = 1;
   \   00021C   8E82         MOV       DPL,R6
   \   00021E   8F83         MOV       DPH,R7
   \   000220   A3           INC       DPTR
   \   000221   A3           INC       DPTR
   \   000222   A3           INC       DPTR
   \   000223   7401         MOV       A,#0x1
   \   000225   F0           MOVX      @DPTR,A
   2263              }
   2264            }
   2265          }
   \                     ??ZDO_beaconNotifyIndCB_1:
   \   000226   02....       LJMP      ?Subroutine5 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   12....       LCALL     ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   C3           CLR       C
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   E5..         MOV       A,?V0
   \   000002   240B         ADD       A,#0xb
   \   000004   F582         MOV       DPL,A
   \   000006   E4           CLR       A
   \   000007   35..         ADDC      A,?V1
   \   000009   F583         MOV       DPH,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   12....       LCALL     ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   8E82         MOV       DPL,R6
   \   000003   8F83         MOV       DPH,R7
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   12....       LCALL     ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   12....       LCALL     ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   85..82       MOV       DPL,?V0
   \   000004   85..83       MOV       DPH,?V1
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   22           RET
   2266          
   2267          /*********************************************************************
   2268           * @fn          ZDO_StartRouterConfirmCB
   2269           *
   2270           * @brief       This function reports the results of the request to
   2271           *              start functioning as a router in a network.
   2272           *
   2273           * @param       Status - Result of NLME_StartRouterRequest()
   2274           *
   2275           * @return      none
   2276           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2277          void ZDO_StartRouterConfirmCB( ZStatus_t Status )
   \                     ZDO_StartRouterConfirmCB:
   2278          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   2279            nwkStatus = (byte)Status;
   \   000006   90....       MOV       DPTR,#nwkStatus
   \   000009   F0           MOVX      @DPTR,A
   2280          
   2281            if ( Status == ZSUCCESS )
   \   00000A   7019         JNZ       ??ZDO_StartRouterConfirmCB_0
   2282            {
   2283              // LED on shows Router started
   2284              HalLedSet ( HAL_LED_3, HAL_LED_MODE_ON );
   \   00000C                ; Setup parameters for call to function HalLedSet
   \   00000C   7A01         MOV       R2,#0x1
   \   00000E   7904         MOV       R1,#0x4
   \   000010   12....       LCALL     `??HalLedSet::?relay`; Banked call to: HalLedSet
   2285              // LED off forgets HOLD_AUTO_START
   2286              HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF);
   \   000013                ; Setup parameters for call to function HalLedSet
   \   000013   7A00         MOV       R2,#0x0
   \   000015   7908         MOV       R1,#0x8
   \   000017   12....       LCALL     `??HalLedSet::?relay`; Banked call to: HalLedSet
   2287              if ( devState == DEV_HOLD )
   \   00001A   90....       MOV       DPTR,#devState
   \   00001D   E0           MOVX      A,@DPTR
   \   00001E   700C         JNZ       ??ZDO_StartRouterConfirmCB_1
   2288              {
   2289                // Began with HOLD_AUTO_START
   2290                devState = DEV_END_DEVICE;
   \   000020   7406         MOV       A,#0x6
   \   000022   F0           MOVX      @DPTR,A
   \   000023   8007         SJMP      ??ZDO_StartRouterConfirmCB_1
   2291              }
   2292            }
   2293          #if defined(BLINK_LEDS)
   2294            else
   2295            {
   2296              HalLedSet( HAL_LED_3, HAL_LED_MODE_FLASH );  // Flash LED to show failure
   \                     ??ZDO_StartRouterConfirmCB_0:
   \   000025                ; Setup parameters for call to function HalLedSet
   \   000025   7A04         MOV       R2,#0x4
   \   000027   7904         MOV       R1,#0x4
   \   000029   12....       LCALL     `??HalLedSet::?relay`; Banked call to: HalLedSet
   2297            }
   2298          #endif
   2299          
   2300            osal_set_event( ZDAppTaskID, ZDO_ROUTER_START );
   \                     ??ZDO_StartRouterConfirmCB_1:
   \   00002C                ; Setup parameters for call to function osal_set_event
   \   00002C   7A20         MOV       R2,#0x20
   \   00002E   02....       LJMP      ?Subroutine0 & 0xFFFF
   2301          }
   2302          
   2303          /*********************************************************************
   2304           * @fn          ZDO_JoinConfirmCB
   2305           *
   2306           * @brief       This function allows the next hight layer to be notified
   2307           *              of the results of its request to join itself or another
   2308           *              device to a network.
   2309           *
   2310           * @param       Status - Result of NLME_JoinRequest()
   2311           *
   2312           * @return      none
   2313           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2314          void ZDO_JoinConfirmCB( uint16 PanId, ZStatus_t Status )
   \                     ZDO_JoinConfirmCB:
   2315          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV       A,#-0x5
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FE           MOV       R6,A
   2316            (void)PanId;  // remove if this parameter is used.
   2317            
   2318            nwkStatus = (byte)Status;
   \   00000C   90....       MOV       DPTR,#nwkStatus
   \   00000F   F0           MOVX      @DPTR,A
   2319          
   2320            if ( Status == ZSUCCESS )
   \   000010   7019         JNZ       ??ZDO_JoinConfirmCB_0
   2321            {
   2322              // LED on shows device joined
   2323              HalLedSet ( HAL_LED_3, HAL_LED_MODE_ON );
   \   000012                ; Setup parameters for call to function HalLedSet
   \   000012   7A01         MOV       R2,#0x1
   \   000014   7904         MOV       R1,#0x4
   \   000016   12....       LCALL     `??HalLedSet::?relay`; Banked call to: HalLedSet
   2324              // LED off forgets HOLD_AUTO_START
   2325              HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF);
   \   000019                ; Setup parameters for call to function HalLedSet
   \   000019   7A00         MOV       R2,#0x0
   \   00001B   7908         MOV       R1,#0x8
   \   00001D   12....       LCALL     `??HalLedSet::?relay`; Banked call to: HalLedSet
   2326              if ( (devState == DEV_HOLD) )
   \   000020   90....       MOV       DPTR,#devState
   \   000023   E0           MOVX      A,@DPTR
   \   000024   700C         JNZ       ??ZDO_JoinConfirmCB_1
   2327              {
   2328                // Began with HOLD_AUTO_START
   2329                devState = DEV_NWK_JOINING;
   \   000026   7403         MOV       A,#0x3
   \   000028   F0           MOVX      @DPTR,A
   \   000029   8007         SJMP      ??ZDO_JoinConfirmCB_1
   2330              }
   2331          
   2332              if ( !ZG_SECURE_ENABLED )
   2333              {
   2334                // Notify to save info into NV
   2335                ZDApp_NVUpdate();
   2336              }
   2337            }
   2338            else
   2339            {
   2340          #if defined(BLINK_LEDS)
   2341              HalLedSet ( HAL_LED_3, HAL_LED_MODE_FLASH );  // Flash LED to show failure
   \                     ??ZDO_JoinConfirmCB_0:
   \   00002B                ; Setup parameters for call to function HalLedSet
   \   00002B   7A04         MOV       R2,#0x4
   \   00002D   7904         MOV       R1,#0x4
   \   00002F   12....       LCALL     `??HalLedSet::?relay`; Banked call to: HalLedSet
   2342          #endif
   2343            }
   2344              
   2345            // Pass the join confirm to higher layer if callback registered
   2346            if (zdoCBFunc[ZDO_JOIN_CNF_CBID] != NULL )
   \                     ??ZDO_JoinConfirmCB_1:
   \   000032   90....       MOV       DPTR,#zdoCBFunc + 8
   \   000035   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   000038   6038         JZ        ??ZDO_JoinConfirmCB_2
   2347            {  
   2348              zdoJoinCnf_t joinCnf;
   2349              
   2350              joinCnf.status = Status;
   \   00003A   EE           MOV       A,R6
   \   00003B   85..82       MOV       DPL,?XSP + 0
   \   00003E   85..83       MOV       DPH,?XSP + 1
   \   000041   F0           MOVX      @DPTR,A
   2351              joinCnf.deviceAddr = _NIB.nwkDevAddress;
   \   000042   90....       MOV       DPTR,#_NIB + 20
   \   000045   12....       LCALL     ??Subroutine40_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   000048   7401         MOV       A,#0x1
   \   00004A   12....       LCALL     ?XSTACK_DISP0_8
   \   00004D   E8           MOV       A,R0
   \   00004E   F0           MOVX      @DPTR,A
   \   00004F   A3           INC       DPTR
   \   000050   E9           MOV       A,R1
   \   000051   F0           MOVX      @DPTR,A
   2352              joinCnf.parentAddr = _NIB.nwkCoordAddress;
   \   000052   90....       MOV       DPTR,#_NIB + 23
   \   000055   12....       LCALL     ??Subroutine40_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_59:
   \   000058   7403         MOV       A,#0x3
   \   00005A   12....       LCALL     ?XSTACK_DISP0_8
   \   00005D   E8           MOV       A,R0
   \   00005E   F0           MOVX      @DPTR,A
   \   00005F   A3           INC       DPTR
   \   000060   E9           MOV       A,R1
   \   000061   F0           MOVX      @DPTR,A
   2353                     
   2354              zdoCBFunc[ZDO_JOIN_CNF_CBID]( (void*)&joinCnf );
   \   000062                ; Setup parameters for indirect call
   \   000062   AA..         MOV       R2,?XSP + 0
   \   000064   AB..         MOV       R3,?XSP + 1
   \   000066   90....       MOV       DPTR,#zdoCBFunc + 8
   \   000069   E0           MOVX      A,@DPTR
   \   00006A   F8           MOV       R0,A
   \   00006B   A3           INC       DPTR
   \   00006C   12....       LCALL     ??Subroutine38_0 & 0xFFFF
   2355            }
   \                     ??CrossCallReturnLabel_48:
   \   00006F   12....       LCALL     ?CALL_IND
   2356            
   2357            // Notify ZDApp
   2358            ZDApp_SendMsg( ZDAppTaskID, ZDO_NWK_JOIN_IND, sizeof(osal_event_hdr_t), (byte*)NULL );
   \                     ??ZDO_JoinConfirmCB_2:
   \   000072                ; Setup parameters for call to function ZDApp_SendMsg
   \   000072   7C00         MOV       R4,#0x0
   \   000074   7D00         MOV       R5,#0x0
   \   000076   7B02         MOV       R3,#0x2
   \   000078   7A02         MOV       R2,#0x2
   \   00007A   90....       MOV       DPTR,#ZDAppTaskID
   \   00007D   E0           MOVX      A,@DPTR
   \   00007E   F9           MOV       R1,A
   \   00007F   12....       LCALL     `??ZDApp_SendMsg::?relay`; Banked call to: ZDApp_SendMsg
   2359            
   2360          }
   \   000082                REQUIRE ?Subroutine6
   \   000082                ; // Fall through to label ?Subroutine6

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   7405         MOV       A,#0x5
   \   000002   12....       LCALL     ?DEALLOC_XSTACK8
   \   000005   02....       LJMP      ??Subroutine37_0 & 0xFFFF
   2361          
   2362          /*********************************************************************
   2363           * @fn          ZDO_AddrChangeIndicationCB
   2364           *
   2365           * @brief       This function notifies the application that this
   2366           *              device's address has changed.  Could happen in 
   2367           *              a network with stochastic addressing (PRO).
   2368           *
   2369           * @param       newAddr - the new address
   2370           *
   2371           * @return      none
   2372           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2373          void ZDO_AddrChangeIndicationCB( uint16 newAddr )
   \                     ZDO_AddrChangeIndicationCB:
   2374          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2375            (void)newAddr;  // remove if this parameter is used
   2376            
   2377            // Notify to save info into NV
   2378            ZDApp_NVUpdate();
   2379          
   2380            // Notify the applications   
   2381            osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   000004                ; Setup parameters for call to function osal_set_event
   \   000004   7A10         MOV       R2,#0x10
   \   000006   7B00         MOV       R3,#0x0
   \   000008   90....       MOV       DPTR,#ZDAppTaskID
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   F9           MOV       R1,A
   \   00000D   12....       LCALL     `??osal_set_event::?relay`; Banked call to: osal_set_event
   2382          
   2383            // Send out a device announce
   2384            ZDApp_AnnounceNewAddress();
   \   000010                ; Setup parameters for call to function ZDApp_AnnounceNewAddress
   \   000010   12....       LCALL     `??ZDApp_AnnounceNewAddress::?relay`; Banked call to: ZDApp_AnnounceNewAddress
   2385          }
   \   000013   02....       LJMP      ?Subroutine3 & 0xFFFF
   2386          
   2387          /*********************************************************************
   2388           * @fn          ZDO_JoinIndicationCB
   2389           *
   2390           * @brief       This function allows the next higher layer of a
   2391           *              coordinator to be notified of a remote join request.
   2392           *
   2393           * @param       ShortAddress - 16-bit address
   2394           * @param       ExtendedAddress - IEEE (64-bit) address
   2395           * @param       CapabilityFlags - Association Capability Flags
   2396           * @param       type - of joining - 
   2397           *                          NWK_ASSOC_JOIN
   2398           *                          NWK_ASSOC_REJOIN_UNSECURE
   2399           *                          NWK_ASSOC_REJOIN_SECURE
   2400           *
   2401           * @return      ZStatus_t
   2402           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2403          ZStatus_t ZDO_JoinIndicationCB(uint16 ShortAddress, uint8 *ExtendedAddress,
   \                     ZDO_JoinIndicationCB:
   2404                                          uint8 CapabilityFlags, uint8 type)
   2405          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   2406            (void)ShortAddress;
   2407            (void)ExtendedAddress;
   2408          #if ZDO_NV_SAVE_RFDs
   2409            (void)CapabilityFlags;
   2410            
   2411          #else  // if !ZDO_NV_SAVE_RFDs
   2412            if (CapabilityFlags & CAPINFO_DEVICETYPE_FFD)
   2413          #endif
   2414            {
   2415              ZDApp_NVUpdate();  // Notify to save info into NV.
   2416            }
   2417          
   2418            if (ZG_SECURE_ENABLED)  // Send notification to TC of new device.
   2419            {
   2420              if (type == NWK_ASSOC_JOIN || type == NWK_ASSOC_REJOIN_UNSECURE)
   2421              {
   2422                osal_start_timerEx( ZDAppTaskID, ZDO_NEW_DEVICE, 600 );
   2423              }
   2424            }
   2425          
   2426            return ZSuccess;
   \   000000                REQUIRE ?Subroutine4
   \   000000                ; // Fall through to label ?Subroutine4

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   7900         MOV       R1,#0x0
   \   000002   02....       LJMP      ?BRET
   2427          }
   2428          
   2429          /*********************************************************************
   2430           * @fn          ZDO_ConcentratorIndicationCB
   2431           *
   2432           * @brief       This function allows the next higher layer of a
   2433           *              device to be notified of existence of the concentrator.
   2434           *
   2435           * @param       nwkAddr - 16-bit NWK address of the concentrator
   2436           * @param       extAddr - pointer to extended Address
   2437           *                        NULL if not available
   2438           * @param       pktCost - PktCost from RREQ
   2439           *
   2440           * @return      void 
   2441           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2442          void ZDO_ConcentratorIndicationCB( uint16 nwkAddr, uint8 *extAddr, uint8 pktCost )
   \                     ZDO_ConcentratorIndicationCB:
   2443          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV       A,#-0x5
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   2444            zdoConcentratorInd_t conInd;
   2445            
   2446            conInd.nwkAddr = nwkAddr;
   \   00000A   12....       LCALL     ?Subroutine10 & 0xFFFF
   2447            conInd.extAddr = extAddr;
   \                     ??CrossCallReturnLabel_69:
   \   00000D   7402         MOV       A,#0x2
   \   00000F   12....       LCALL     ?XSTACK_DISP0_8
   \   000012   EC           MOV       A,R4
   \   000013   F0           MOVX      @DPTR,A
   \   000014   A3           INC       DPTR
   \   000015   ED           MOV       A,R5
   \   000016   F0           MOVX      @DPTR,A
   2448            conInd.pktCost = pktCost;
   \   000017   7404         MOV       A,#0x4
   \   000019   12....       LCALL     ?XSTACK_DISP0_8
   \   00001C   E9           MOV       A,R1
   \   00001D   F0           MOVX      @DPTR,A
   2449            
   2450            if( zdoCBFunc[ZDO_CONCENTRATOR_IND_CBID] != NULL )
   \   00001E   90....       MOV       DPTR,#zdoCBFunc + 2
   \   000021   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   000024   6006         JZ        ??ZDO_ConcentratorIndicationCB_0
   2451            {
   2452              zdoCBFunc[ZDO_CONCENTRATOR_IND_CBID]( (void*)&conInd );
   \   000026                ; Setup parameters for indirect call
   \   000026   12....       LCALL     ?Subroutine17 & 0xFFFF
   2453            }
   \                     ??CrossCallReturnLabel_50:
   \   000029   12....       LCALL     ?CALL_IND
   2454          }
   \                     ??ZDO_ConcentratorIndicationCB_0:
   \   00002C   80..         SJMP      ?Subroutine6
   2455          
   2456          /*********************************************************************
   2457           * @fn          ZDO_LeaveCnf
   2458           *
   2459           * @brief       This function allows the next higher layer to be
   2460           *              notified of the results of its request for this or
   2461           *              a child device to leave the network.
   2462           *
   2463           * @param       cnf - NLME_LeaveCnf_t
   2464           *
   2465           * @return      none
   2466           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2467          void ZDO_LeaveCnf( NLME_LeaveCnf_t* cnf )
   \                     ZDO_LeaveCnf:
   2468          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   2469            // Check for this device
   2470            if ( osal_ExtAddrEqual( cnf->extAddr,
   2471                                    NLME_GetExtAddr() ) == TRUE )
   \   000009                ; Setup parameters for call to function sAddrExtCmp
   \   000009                ; Setup parameters for call to function NLME_GetExtAddr
   \   000009   12....       LCALL     `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
   \   00000C   EA           MOV       A,R2
   \   00000D   FC           MOV       R4,A
   \   00000E   EB           MOV       A,R3
   \   00000F   FD           MOV       R5,A
   \   000010   EE           MOV       A,R6
   \   000011   2402         ADD       A,#0x2
   \   000013   FA           MOV       R2,A
   \   000014   E4           CLR       A
   \   000015   3F           ADDC      A,R7
   \   000016   FB           MOV       R3,A
   \   000017   12....       LCALL     `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   00001A   E9           MOV       A,R1
   \   00001B   6401         XRL       A,#0x1
   \   00001D   7007         JNZ       ??ZDO_LeaveCnf_0
   2472            {
   2473              // Prepare to leave with reset
   2474              ZDApp_LeaveReset( cnf->rejoin );
   \   00001F                ; Setup parameters for call to function ZDApp_LeaveReset
   \   00001F   12....       LCALL     ?Subroutine21 & 0xFFFF
   2475            }
   \                     ??CrossCallReturnLabel_23:
   \   000022   F9           MOV       R1,A
   \   000023   12....       LCALL     `??ZDApp_LeaveReset::?relay`; Banked call to: ZDApp_LeaveReset
   2476            else if ( ZSTACK_ROUTER_BUILD )
   2477            {
   2478              // Remove device address(optionally descendents) from data
   2479              ZDApp_LeaveUpdate( cnf->dstAddr,
   2480                                 cnf->extAddr,
   2481                                 cnf->removeChildren );
   2482            }
   2483          }
   \                     ??ZDO_LeaveCnf_0:
   \   000026   02....       LJMP      ??Subroutine37_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   EE           MOV       A,R6
   \   000001   240B         ADD       A,#0xb
   \   000003   F582         MOV       DPL,A
   \   000005   E4           CLR       A
   \   000006   3F           ADDC      A,R7
   \   000007   F583         MOV       DPH,A
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   22           RET
   2484          
   2485          /*********************************************************************
   2486           * @fn          ZDO_LeaveInd
   2487           *
   2488           * @brief       This function allows the next higher layer of a
   2489           *              device to be notified of a remote leave request or
   2490           *              indication.
   2491           *
   2492           * @param       ind - NLME_LeaveInd_t
   2493           *
   2494           * @return      none
   2495           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2496          void ZDO_LeaveInd( NLME_LeaveInd_t* ind )
   \                     ZDO_LeaveInd:
   2497          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   2498            uint8 leave;
   2499          
   2500          
   2501            // Parent is requesting the leave - NWK layer filters out illegal
   2502            // requests
   2503            if ( ind->request == TRUE )
   \   000009   8E82         MOV       DPL,R6
   \   00000B   8F83         MOV       DPH,R7
   \   00000D   A3           INC       DPTR
   \   00000E   A3           INC       DPTR
   \   00000F   A3           INC       DPTR
   \   000010   A3           INC       DPTR
   \   000011   A3           INC       DPTR
   \   000012   A3           INC       DPTR
   \   000013   A3           INC       DPTR
   \   000014   A3           INC       DPTR
   \   000015   A3           INC       DPTR
   \   000016   A3           INC       DPTR
   \   000017   E0           MOVX      A,@DPTR
   \   000018   6401         XRL       A,#0x1
   \   00001A   6029         JZ        ??ZDO_LeaveInd_0
   2504            {
   2505              // Notify network of leave
   2506              if ( ZSTACK_ROUTER_BUILD )
   2507              {
   2508                NLME_LeaveRsp_t rsp;
   2509                rsp.rejoin         = ind->rejoin;
   2510                rsp.removeChildren = ind->removeChildren;
   2511                NLME_LeaveRsp( &rsp );
   2512              }
   2513          
   2514              // Prepare to leave with reset
   2515              ZDApp_LeaveReset( ind->rejoin );
   \   00001C                ; Setup parameters for call to function ZDApp_LeaveReset
   2516            }
   2517            else
   2518            {
   2519              leave = FALSE;
   2520          
   2521              // Check if this device needs to leave as a child or descendent
   2522              if ( ind->srcAddr == NLME_GetCoordShortAddr() )
   \   00001C                ; Setup parameters for call to function NLME_GetCoordShortAddr
   \   00001C   12....       LCALL     `??NLME_GetCoordShortAddr::?relay`; Banked call to: NLME_GetCoordShortAddr
   \   00001F   8A..         MOV       ?V0,R2
   \   000021   8B..         MOV       ?V1,R3
   \   000023   A8..         MOV       R0,?V0
   \   000025   A9..         MOV       R1,?V1
   \   000027   8E82         MOV       DPL,R6
   \   000029   8F83         MOV       DPH,R7
   \   00002B   E0           MOVX      A,@DPTR
   \   00002C   68           XRL       A,R0
   \   00002D   7003         JNZ       ??ZDO_LeaveInd_1
   \   00002F   A3           INC       DPTR
   \   000030   E0           MOVX      A,@DPTR
   \   000031   69           XRL       A,R1
   \                     ??ZDO_LeaveInd_1:
   \   000032   7018         JNZ       ??ZDO_LeaveInd_2
   2523              {
   2524                if ( ( ind->removeChildren == TRUE               ) ||
   2525                     ( ZDO_Config_Node_Descriptor.LogicalType ==
   2526                       NODETYPE_DEVICE                           )    )
   \   000034   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   000037   6401         XRL       A,#0x1
   \   000039   600A         JZ        ??ZDO_LeaveInd_0
   \   00003B   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor
   \   00003E   E0           MOVX      A,@DPTR
   \   00003F   5407         ANL       A,#0x7
   \   000041   6402         XRL       A,#0x2
   \   000043   7007         JNZ       ??ZDO_LeaveInd_2
   2527                {
   2528                  leave = TRUE;
   2529                }
   2530              }
   2531              else if ( ind->removeChildren == TRUE )
   2532              {
   2533                // Check NWK address allocation algorithm
   2534                //leave = RTG_ANCESTOR(nwkAddr,thisAddr);
   2535              }
   2536          
   2537              if ( leave == TRUE )
   2538              {
   2539                // Prepare to leave with reset
   2540                ZDApp_LeaveReset( ind->rejoin );
   \                     ??ZDO_LeaveInd_0:
   \   000045                ; Setup parameters for call to function ZDApp_LeaveReset
   \   000045   12....       LCALL     ?Subroutine25 & 0xFFFF
   2541              }
   2542              else
   2543              {
   2544                // Remove device address(optionally descendents) from data
   2545                ZDApp_LeaveUpdate( ind->srcAddr,
   2546                                   ind->extAddr,
   2547                                   ind->removeChildren );
   2548              }
   2549            }
   \                     ??CrossCallReturnLabel_30:
   \   000048   F9           MOV       R1,A
   \   000049   12....       LCALL     `??ZDApp_LeaveReset::?relay`; Banked call to: ZDApp_LeaveReset
   2550          }
   \                     ??ZDO_LeaveInd_2:
   \   00004C   02....       LJMP      ??Subroutine34_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   12....       LCALL     ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_41:
   \   000003   22           RET
   2551          
   2552          /*********************************************************************
   2553           * @fn          ZDO_SyncIndicationCB
   2554           *
   2555           * @brief       This function allows the next higher layer of a
   2556           *              coordinator to be notified of a loss of synchronization
   2557           *                          with the parent/child device.
   2558           *
   2559           * @param       type: 0 - child; 1 - parent
   2560           *
   2561           *
   2562           * @return      none
   2563           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2564          void ZDO_SyncIndicationCB( uint8 type, uint16 shortAddr )
   \                     ZDO_SyncIndicationCB:
   2565          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
   2566            (void)shortAddr;  // Remove this line if this parameter is used.
   2567            
   2568            if ( ZSTACK_END_DEVICE_BUILD
   2569              || (ZSTACK_ROUTER_BUILD && ((_NIB.CapabilityFlags & ZMAC_ASSOC_CAPINFO_FFD_TYPE) == 0)))
   2570            {
   2571              if ( type == 1 )
   \   000007   7401         MOV       A,#0x1
   \   000009   6E           XRL       A,R6
   \   00000A   7013         JNZ       ??ZDO_SyncIndicationCB_0
   2572              {
   2573                // We lost contact with our parent.  Clear the neighbor Table.
   2574                nwkNeighborInitTable();
   \   00000C                ; Setup parameters for call to function nwkNeighborInitTable
   \   00000C   12....       LCALL     `??nwkNeighborInitTable::?relay`; Banked call to: nwkNeighborInitTable
   2575                
   2576                // Start the rejoin process.
   2577                ZDApp_SendMsg( ZDAppTaskID, ZDO_NWK_JOIN_REQ, sizeof(osal_event_hdr_t), NULL );
   \   00000F                ; Setup parameters for call to function ZDApp_SendMsg
   \   00000F   7C00         MOV       R4,#0x0
   \   000011   7D00         MOV       R5,#0x0
   \   000013   7B02         MOV       R3,#0x2
   \   000015   7A03         MOV       R2,#0x3
   \   000017   90....       MOV       DPTR,#ZDAppTaskID
   \   00001A   E0           MOVX      A,@DPTR
   \   00001B   F9           MOV       R1,A
   \   00001C   12....       LCALL     `??ZDApp_SendMsg::?relay`; Banked call to: ZDApp_SendMsg
   2578              }
   2579            }
   2580          }
   \                     ??ZDO_SyncIndicationCB_0:
   \   00001F   02....       LJMP      ??Subroutine37_0 & 0xFFFF
   2581          
   2582          /*********************************************************************
   2583           * @fn          ZDO_ManytoOneFailureIndicationCB
   2584           *
   2585           * @brief       This function allows the next higher layer of a
   2586           *              concentrator to be notified of a many-to-one route 
   2587           *              failure. 
   2588           *
   2589           * @param       none
   2590           *
   2591           *
   2592           * @return      none
   2593           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2594          void ZDO_ManytoOneFailureIndicationCB()
   \                     ZDO_ManytoOneFailureIndicationCB:
   2595          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2596            // By default, the concentrator automatically redo many-to-one route 
   2597            // discovery to update all many-to-one routes in the network
   2598            // If you want anything processing other than the default,
   2599            // please replace the following code.
   2600            
   2601            RTG_MTORouteReq();
   \   000004                ; Setup parameters for call to function RTG_MTORouteReq
   \   000004   12....       LCALL     `??RTG_MTORouteReq::?relay`; Banked call to: RTG_MTORouteReq
   2602          }
   \   000007   02....       LJMP      ?Subroutine3 & 0xFFFF
   2603          
   2604          /*********************************************************************
   2605           * @fn          ZDO_PollConfirmCB
   2606           *
   2607           * @brief       This function allows the next higher layer to be
   2608           *              notified of a Poll Confirm.
   2609           *
   2610           * @param       none
   2611           *
   2612           * @return      none
   2613           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2614          void ZDO_PollConfirmCB( uint8 status )
   \                     ZDO_PollConfirmCB:
   2615          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   2616            (void)status;  // Remove this line if this parameter is used.
   2617            return;
   \   000000   02....       LJMP      ?BRET
   2618          }
   2619          
   2620          /******************************************************************************
   2621           * @fn          ZDApp_NwkWriteNVRequest (stubs AddrMgrWriteNVRequest)
   2622           *
   2623           * @brief       Stub routine implemented by NHLE. NHLE should call
   2624           *              <AddrMgrWriteNV> when appropriate.
   2625           *
   2626           * @param       none
   2627           *
   2628           * @return      none
   2629           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2630          void ZDApp_NwkWriteNVRequest( void )
   \                     AddrMgrWriteNVRequest:
   2631          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   2632          #if defined ( NV_RESTORE )  
   2633            if ( !osal_get_timeoutEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV ) )
   2634            {
   2635              // Trigger to save info into NV
   2636              ZDApp_NVUpdate();
   2637            }
   2638          #endif
   2639          }
   \   000000   02....       LJMP      ?BRET
   2640          
   2641          /*********************************************************************
   2642           * Call Back Functions from Security  - API
   2643           */
   2644          
   2645           /*********************************************************************
   2646           * @fn          ZDO_UpdateDeviceIndication
   2647           *
   2648           * @brief       This function notifies the "Trust Center" of a
   2649           *              network when a device joins or leaves the network.
   2650           *
   2651           * @param       extAddr - pointer to 64 bit address of new device
   2652           * @param       status  - 0 if a new device joined securely
   2653           *                      - 1 if a new device joined un-securely
   2654           *                      - 2 if a device left the network
   2655           *
   2656           * @return      true if newly joined device should be allowed to
   2657           *                                              remain on network
   2658           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2659          ZStatus_t ZDO_UpdateDeviceIndication( uint8 *extAddr, uint8 status )
   \                     ZDO_UpdateDeviceIndication:
   2660          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   2661            // can implement a network access policy based on the
   2662            // IEEE address of newly joining devices...
   2663            (void)extAddr;
   2664            (void)status;
   2665            
   2666            return ZSuccess;
   \   000000   02....       LJMP      ?Subroutine4 & 0xFFFF
   2667          }
   2668          
   2669          /*********************************************************************
   2670           * @fn          ZDApp_InMsgCB
   2671           *
   2672           * @brief       This function is called to pass up any message that is
   2673           *              not yet supported.  This allows for the developer to
   2674           *              support features themselves..
   2675           *
   2676           * @return      none
   2677           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2678          void ZDApp_InMsgCB( zdoIncomingMsg_t *inMsg )
   \                     ZDApp_InMsgCB:
   2679          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   2680            if ( inMsg->clusterID & ZDO_RESPONSE_BIT )
   \   000009   12....       LCALL     ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   00000C   A3           INC       DPTR
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   5480         ANL       A,#0x80
   \   000010   704D         JNZ       ??ZDApp_InMsgCB_0
   2681            {
   2682              // Handle the response message
   2683            }
   2684            else
   2685            {
   2686              // Handle the request message by sending a generic "not supported".
   2687              // Device Announce doesn't have a response.
   2688              if ( !(inMsg->wasBroadcast) && inMsg->clusterID != Device_annce )
   \   000012   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   000015   7048         JNZ       ??ZDApp_InMsgCB_0
   \   000017   12....       LCALL     ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   00001A   6413         XRL       A,#0x13
   \   00001C   7002         JNZ       ??ZDApp_InMsgCB_1
   \   00001E   A3           INC       DPTR
   \   00001F   E0           MOVX      A,@DPTR
   \                     ??ZDApp_InMsgCB_1:
   \   000020   603D         JZ        ??ZDApp_InMsgCB_0
   2689              {
   2690                ZDP_GenericRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZDP_NOT_SUPPORTED, 0,
   2691                                (uint16)(inMsg->clusterID | ZDO_RESPONSE_BIT), inMsg->SecurityUse );
   \   000022                ; Setup parameters for call to function ZDP_GenericRsp
   \   000022   12....       LCALL     ?Subroutine22 & 0xFFFF
   2692              }
   2693            }
   \                     ??CrossCallReturnLabel_27:
   \   000025   4480         ORL       A,#0x80
   \   000027   F5..         MOV       ?V1,A
   \   000029   78..         MOV       R0,#?V0
   \   00002B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002E   E4           CLR       A
   \   00002F   F5..         MOV       ?V0,A
   \   000031   F5..         MOV       ?V1,A
   \   000033   78..         MOV       R0,#?V0
   \   000035   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000038   EE           MOV       A,R6
   \   000039   240E         ADD       A,#0xe
   \   00003B   F582         MOV       DPL,A
   \   00003D   E4           CLR       A
   \   00003E   3F           ADDC      A,R7
   \   00003F   F583         MOV       DPH,A
   \   000041   E0           MOVX      A,@DPTR
   \   000042   FD           MOV       R5,A
   \   000043   7C84         MOV       R4,#-0x7c
   \   000045   EE           MOV       A,R6
   \   000046   2402         ADD       A,#0x2
   \   000048   FA           MOV       R2,A
   \   000049   E4           CLR       A
   \   00004A   3F           ADDC      A,R7
   \   00004B   FB           MOV       R3,A
   \   00004C   EE           MOV       A,R6
   \   00004D   240F         ADD       A,#0xf
   \   00004F   F582         MOV       DPL,A
   \   000051   E4           CLR       A
   \   000052   3F           ADDC      A,R7
   \   000053   F583         MOV       DPH,A
   \   000055   E0           MOVX      A,@DPTR
   \   000056   F9           MOV       R1,A
   \   000057   12....       LCALL     `??ZDP_GenericRsp::?relay`; Banked call to: ZDP_GenericRsp
   \   00005A   7404         MOV       A,#0x4
   \   00005C   12....       LCALL     ?DEALLOC_XSTACK8
   2694          }
   \                     ??ZDApp_InMsgCB_0:
   \   00005F   02....       LJMP      ??Subroutine34_0 & 0xFFFF
   2695          
   2696          
   2697          /*********************************************************************
   2698           * @fn      ZDApp_ChangeMatchDescRespPermission()
   2699           *
   2700           * @brief   Changes the Match Descriptor Response permission.
   2701           *
   2702           * @param   endpoint - endpoint to allow responses
   2703           * @param   action - true to allow responses, false to not
   2704           *
   2705           * @return  none
   2706           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2707          void ZDApp_ChangeMatchDescRespPermission( uint8 endpoint, uint8 action )
   \                     ZDApp_ChangeMatchDescRespPermission:
   2708          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   2709            // Store the action
   2710            afSetMatch( endpoint, action );
   \   000005                ; Setup parameters for call to function afSetMatch
   \   000005   12....       LCALL     `??afSetMatch::?relay`; Banked call to: afSetMatch
   2711          }
   \   000008   02....       LJMP      ??Subroutine37_0 & 0xFFFF
   2712          
   2713          /*********************************************************************
   2714           * @fn      ZDApp_NetworkInit()
   2715           *
   2716           * @brief   Used to start the network joining process
   2717           *
   2718           * @param   delay - mSec delay to wait before starting
   2719           *
   2720           * @return  none
   2721           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2722          void ZDApp_NetworkInit( uint16 delay )
   \                     ZDApp_NetworkInit:
   2723          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2724            if ( delay )
   \   000004   EA           MOV       A,R2
   \   000005   4B           ORL       A,R3
   \   000006   6012         JZ        ??ZDApp_NetworkInit_0
   2725            {
   2726              // Wait awhile before starting the device
   2727              osal_start_timerEx( ZDAppTaskID, ZDO_NETWORK_INIT, delay );
   \   000008                ; Setup parameters for call to function osal_start_timerEx
   \   000008   EA           MOV       A,R2
   \   000009   FC           MOV       R4,A
   \   00000A   EB           MOV       A,R3
   \   00000B   FD           MOV       R5,A
   \   00000C   7A01         MOV       R2,#0x1
   \   00000E   7B00         MOV       R3,#0x0
   \   000010   90....       MOV       DPTR,#ZDAppTaskID
   \   000013   E0           MOVX      A,@DPTR
   \   000014   F9           MOV       R1,A
   \   000015   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000018   800C         SJMP      ??ZDApp_NetworkInit_1
   2728            }
   2729            else
   2730            {
   2731              osal_set_event( ZDAppTaskID, ZDO_NETWORK_INIT );
   \                     ??ZDApp_NetworkInit_0:
   \   00001A                ; Setup parameters for call to function osal_set_event
   \   00001A   7A01         MOV       R2,#0x1
   \   00001C   7B00         MOV       R3,#0x0
   \   00001E   90....       MOV       DPTR,#ZDAppTaskID
   \   000021   E0           MOVX      A,@DPTR
   \   000022   F9           MOV       R1,A
   \   000023   12....       LCALL     `??osal_set_event::?relay`; Banked call to: osal_set_event
   2732            }
   2733          }
   \                     ??ZDApp_NetworkInit_1:
   \   000026   02....       LJMP      ?Subroutine3 & 0xFFFF
   2734          
   2735          /*********************************************************************
   2736           * @fn      ZDApp_NwkStateUpdateCB()
   2737           *
   2738           * @brief   This function notifies that this device's network 
   2739           *          state info has been changed.
   2740           *
   2741           * @param   none
   2742           *
   2743           * @return  none
   2744           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2745          void ZDApp_NwkStateUpdateCB( void )
   \                     ZDApp_NwkStateUpdateCB:
   2746          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2747            // Notify to save info into NV
   2748            if ( !osal_get_timeoutEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV ) )
   \   000004                ; Setup parameters for call to function osal_get_timeoutEx
   \   000004   7A00         MOV       R2,#0x0
   \   000006   7B02         MOV       R3,#0x2
   \   000008   90....       MOV       DPTR,#ZDAppTaskID
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   F9           MOV       R1,A
   \   00000D   12....       LCALL     `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
   2749            {
   2750              // Trigger to save info into NV
   2751              ZDApp_NVUpdate();
   2752            }
   2753          }
   \   000010   02....       LJMP      ?Subroutine3 & 0xFFFF
   2754          
   2755          /*********************************************************************
   2756           * @fn      ZDApp_NodeProfileSync()
   2757           *
   2758           * @brief   Sync node with stack profile.
   2759           *
   2760           * @param   stackProfile - stack profile of the network to join
   2761           *
   2762           * @return  none
   2763           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2764          void ZDApp_NodeProfileSync( uint8 stackProfile )
   \                     ZDApp_NodeProfileSync:
   2765          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
   2766            if ( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_DEVICETYPE_FFD  )
   \   000007   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor + 2
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   A2E1         MOV       C,0xE0 /* A   */.1
   \   00000D   501A         JNC       ??ZDApp_NodeProfileSync_0
   2767            {
   2768              if ( stackProfile != zgStackProfile )
   \   00000F   90....       MOV       DPTR,#zgStackProfile
   \   000012   E0           MOVX      A,@DPTR
   \   000013   6E           XRL       A,R6
   \   000014   6013         JZ        ??ZDApp_NodeProfileSync_0
   2769              {
   2770                ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_DEVICE;
   \   000016   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor
   \   000019   E0           MOVX      A,@DPTR
   \   00001A   54F8         ANL       A,#0xf8
   \   00001C   4402         ORL       A,#0x2
   \   00001E   F0           MOVX      @DPTR,A
   2771                ZDO_Config_Node_Descriptor.CapabilityFlags = CAPINFO_DEVICETYPE_RFD | CAPINFO_POWER_AC | CAPINFO_RCVR_ON_IDLE;
   \   00001F   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000022   740C         MOV       A,#0xc
   \   000024   F0           MOVX      @DPTR,A
   2772                NLME_SetBroadcastFilter( ZDO_Config_Node_Descriptor.CapabilityFlags );
   \   000025                ; Setup parameters for call to function NLME_SetBroadcastFilter
   \   000025   F9           MOV       R1,A
   \   000026   12....       LCALL     `??NLME_SetBroadcastFilter::?relay`; Banked call to: NLME_SetBroadcastFilter
   2773              }
   2774            }
   2775          }
   \                     ??ZDApp_NodeProfileSync_0:
   \   000029   02....       LJMP      ??Subroutine37_0 & 0xFFFF
   2776          
   2777          /*********************************************************************
   2778           * @fn      ZDApp_StartJoiningCycle()
   2779           *
   2780           * @brief   Starts the joining cycle of a device.  This will only 
   2781           *          continue an already started (or stopped) joining cycle.
   2782           *
   2783           * @param   none
   2784           *
   2785           * @return  TRUE if joining stopped, FALSE if joining or rejoining
   2786           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2787          uint8 ZDApp_StartJoiningCycle( void )
   \                     ZDApp_StartJoiningCycle:
   2788          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2789            if ( devState == DEV_INIT || devState == DEV_NWK_DISC )
   \   000004   90....       MOV       DPTR,#devState
   \   000007   E0           MOVX      A,@DPTR
   \   000008   6401         XRL       A,#0x1
   \   00000A   6005         JZ        ??ZDApp_StartJoiningCycle_0
   \   00000C   E0           MOVX      A,@DPTR
   \   00000D   6402         XRL       A,#0x2
   \   00000F   7011         JNZ       ??ZDApp_StartJoiningCycle_1
   2790            {
   2791              continueJoining = TRUE;
   \                     ??ZDApp_StartJoiningCycle_0:
   \   000011   90....       MOV       DPTR,#continueJoining
   \   000014   7401         MOV       A,#0x1
   \   000016   F0           MOVX      @DPTR,A
   2792              ZDApp_NetworkInit( 0 );
   \   000017                ; Setup parameters for call to function ZDApp_NetworkInit
   \   000017   7A00         MOV       R2,#0x0
   \   000019   7B00         MOV       R3,#0x0
   \   00001B   12....       LCALL     `??ZDApp_NetworkInit::?relay`; Banked call to: ZDApp_NetworkInit
   2793          
   2794              return ( TRUE );
   \   00001E   7901         MOV       R1,#0x1
   \   000020   8002         SJMP      ??ZDApp_StartJoiningCycle_2
   2795            }
   2796            else
   2797              return ( FALSE );
   \                     ??ZDApp_StartJoiningCycle_1:
   \   000022   7900         MOV       R1,#0x0
   \                     ??ZDApp_StartJoiningCycle_2:
   \   000024   02....       LJMP      ?Subroutine3 & 0xFFFF
   2798          }
   2799          
   2800          /*********************************************************************
   2801           * @fn      ZDApp_StopJoiningCycle()
   2802           *
   2803           * @brief   Stops the joining or rejoining process of a device.
   2804           *
   2805           * @param   none
   2806           *
   2807           * @return  TRUE if joining stopped, FALSE if joining or rejoining
   2808           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2809          uint8 ZDApp_StopJoiningCycle( void )
   \                     ZDApp_StopJoiningCycle:
   2810          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2811            if ( devState == DEV_INIT || devState == DEV_NWK_DISC )
   \   000004   90....       MOV       DPTR,#devState
   \   000007   E0           MOVX      A,@DPTR
   \   000008   6401         XRL       A,#0x1
   \   00000A   6005         JZ        ??ZDApp_StopJoiningCycle_0
   \   00000C   E0           MOVX      A,@DPTR
   \   00000D   6402         XRL       A,#0x2
   \   00000F   7009         JNZ       ??ZDApp_StopJoiningCycle_1
   2812            {
   2813              continueJoining = FALSE;
   \                     ??ZDApp_StopJoiningCycle_0:
   \   000011   90....       MOV       DPTR,#continueJoining
   \   000014   E4           CLR       A
   \   000015   F0           MOVX      @DPTR,A
   2814              return ( TRUE );
   \   000016   7901         MOV       R1,#0x1
   \   000018   8002         SJMP      ??ZDApp_StopJoiningCycle_2
   2815            }
   2816            else
   2817              return ( FALSE );
   \                     ??ZDApp_StopJoiningCycle_1:
   \   00001A   7900         MOV       R1,#0x0
   \                     ??ZDApp_StopJoiningCycle_2:
   \   00001C   02....       LJMP      ?Subroutine3 & 0xFFFF
   2818          }
   2819          
   2820          /*********************************************************************
   2821           * @fn      ZDApp_AnnounceNewAddress()
   2822           *
   2823           * @brief   Send Device Announce and hold all transmissions for 
   2824           *          new address timeout.
   2825           *
   2826           * @param   none
   2827           *
   2828           * @return  none
   2829           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2830          void ZDApp_AnnounceNewAddress( void )
   \                     ZDApp_AnnounceNewAddress:
   2831          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   2832          #if defined ( ZIGBEE_NWK_UNIQUE_ADDR_CHECK )
   2833            // Turn off data request hold
   2834            APSME_HoldDataRequests( 0 );
   \   000005                ; Setup parameters for call to function APSME_HoldDataRequests
   \   000005   7A00         MOV       R2,#0x0
   \   000007   7B00         MOV       R3,#0x0
   \   000009   12....       LCALL     `??APSME_HoldDataRequests::?relay`; Banked call to: APSME_HoldDataRequests
   2835          #endif
   2836            
   2837            ZDP_DeviceAnnce( NLME_GetShortAddr(), NLME_GetExtAddr(),
   2838                               ZDO_Config_Node_Descriptor.CapabilityFlags, 0 );
   \   00000C                ; Setup parameters for call to function NLME_GetExtAddr
   \   00000C   12....       LCALL     `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
   \   00000F   8A..         MOV       ?V0,R2
   \   000011   8B..         MOV       ?V1,R3
   \   000013   AE..         MOV       R6,?V0
   \   000015                ; Setup parameters for call to function NLME_GetShortAddr
   \   000015   12....       LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   000018                ; Setup parameters for call to function ZDP_DeviceAnnce
   \   000018   75..00       MOV       ?V0,#0x0
   \   00001B   78..         MOV       R0,#?V0
   \   00001D   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000020   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000023   E0           MOVX      A,@DPTR
   \   000024   F9           MOV       R1,A
   \   000025   EE           MOV       A,R6
   \   000026   FC           MOV       R4,A
   \   000027   AD..         MOV       R5,?V1
   \   000029   12....       LCALL     `??ZDP_DeviceAnnce::?relay`; Banked call to: ZDP_DeviceAnnce
   \   00002C   7401         MOV       A,#0x1
   \   00002E   12....       LCALL     ?DEALLOC_XSTACK8
   2839            
   2840          #if defined ( ZIGBEE_NWK_UNIQUE_ADDR_CHECK )
   2841            // Setup the timeout
   2842            APSME_HoldDataRequests( ZDAPP_HOLD_DATA_REQUESTS_TIMEOUT );
   \   000031                ; Setup parameters for call to function APSME_HoldDataRequests
   \   000031   7A00         MOV       R2,#0x0
   \   000033   7B00         MOV       R3,#0x0
   \   000035   12....       LCALL     `??APSME_HoldDataRequests::?relay`; Banked call to: APSME_HoldDataRequests
   2843          #endif  
   2844          }
   \   000038   02....       LJMP      ??Subroutine34_0 & 0xFFFF
   2845          
   2846          /*********************************************************************
   2847           * @fn          ZDApp_NVUpdate
   2848           *
   2849           * @brief       Set the NV Update Timer.
   2850           *
   2851           * @param       none
   2852           *
   2853           * @return      none
   2854           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2855          void ZDApp_NVUpdate( void )
   \                     ZDApp_NVUpdate:
   2856          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   2857          #if defined ( NV_RESTORE )
   2858            osal_start_timerEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV, ZDAPP_UPDATE_NWK_NV_TIME );
   2859          #endif
   2860          }
   \   000000   02....       LJMP      ?BRET
   2861          
   2862          /*********************************************************************
   2863           * @fn      ZDApp_CoordStartPANIDConflictCB()
   2864           *
   2865           * @brief   Returns a PAN ID for the network layer to use during
   2866           *          a coordinator start and there is another network with 
   2867           *          the intended PANID.
   2868           *
   2869           * @param   panid - the intended PAN ID
   2870           *
   2871           * @return  PANID to try
   2872           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2873          uint16 ZDApp_CoordStartPANIDConflictCB( uint16 panid )
   \                     ZDApp_CoordStartPANIDConflictCB:
   2874          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   2875            return ( panid + 1 );
   \   000000   EA           MOV       A,R2
   \   000001   2401         ADD       A,#0x1
   \   000003   0A           INC       R2
   \   000004   5001         JNC       ??ZDApp_CoordStartPANIDConflictCB_0
   \   000006   0B           INC       R3
   \                     ??ZDApp_CoordStartPANIDConflictCB_0:
   \   000007   02....       LJMP      ?BRET
   2876          }
   2877          
   2878          /*********************************************************************
   2879           * @fn          ZDO_SrcRtgIndCB
   2880           *
   2881           * @brief       This function notifies the ZDO available src route record received.
   2882           *
   2883           * @param       srcAddr - source address of the source route
   2884           * @param       relayCnt - number of devices in the relay list
   2885           * @param       relayList - relay list of the source route
   2886           *
   2887           * @return      none
   2888           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2889          void ZDO_SrcRtgIndCB (uint16 srcAddr, uint8 relayCnt, uint16* pRelayList )
   \                     ZDO_SrcRtgIndCB:
   2890          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV       A,#-0x5
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   2891            zdoSrcRtg_t srcRtg;
   2892            
   2893            srcRtg.srcAddr = srcAddr;
   \   00000A   12....       LCALL     ?Subroutine10 & 0xFFFF
   2894            srcRtg.relayCnt = relayCnt;
   \                     ??CrossCallReturnLabel_70:
   \   00000D   7402         MOV       A,#0x2
   \   00000F   12....       LCALL     ?XSTACK_DISP0_8
   \   000012   E9           MOV       A,R1
   \   000013   F0           MOVX      @DPTR,A
   2895            srcRtg.pRelayList = pRelayList;
   \   000014   7403         MOV       A,#0x3
   \   000016   12....       LCALL     ?XSTACK_DISP0_8
   \   000019   EC           MOV       A,R4
   \   00001A   F0           MOVX      @DPTR,A
   \   00001B   A3           INC       DPTR
   \   00001C   ED           MOV       A,R5
   \   00001D   F0           MOVX      @DPTR,A
   2896            
   2897            if( zdoCBFunc[ZDO_SRC_RTG_IND_CBID] != NULL )
   \   00001E   90....       MOV       DPTR,#zdoCBFunc
   \   000021   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   000024   6006         JZ        ??ZDO_SrcRtgIndCB_0
   2898            {
   2899              zdoCBFunc[ZDO_SRC_RTG_IND_CBID]( (void*)&srcRtg );
   \   000026                ; Setup parameters for indirect call
   \   000026   12....       LCALL     ?Subroutine17 & 0xFFFF
   2900            }
   \                     ??CrossCallReturnLabel_51:
   \   000029   12....       LCALL     ?CALL_IND
   2901          }
   \                     ??ZDO_SrcRtgIndCB_0:
   \   00002C   02....       LJMP      ?Subroutine6 & 0xFFFF
   2902          
   2903          /*********************************************************************
   2904           * @fn          ZDApp_InitZdoCBFunc
   2905           *
   2906           * @brief       Call this function to initialize zdoCBFunc[]
   2907           *
   2908           * @param       none
   2909           *
   2910           * @return      none
   2911           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2912          void ZDApp_InitZdoCBFunc( void )
   \                     ZDApp_InitZdoCBFunc:
   2913          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2914            uint8 i;
   2915            
   2916            for ( i=0; i< MAX_ZDO_CB_FUNC; i++ )
   \   000004   7A00         MOV       R2,#0x0
   2917            {
   2918              zdoCBFunc[i] = NULL;
   \                     ??ZDApp_InitZdoCBFunc_0:
   \   000006   EA           MOV       A,R2
   \   000007   25E0         ADD       A,0xE0 /* A   */
   \   000009   12....       LCALL     ?Subroutine28 & 0xFFFF
   2919            }
   \                     ??CrossCallReturnLabel_36:
   \   00000C   E4           CLR       A
   \   00000D   F0           MOVX      @DPTR,A
   \   00000E   A3           INC       DPTR
   \   00000F   F0           MOVX      @DPTR,A
   \   000010   0A           INC       R2
   \   000011   EA           MOV       A,R2
   \   000012   C3           CLR       C
   \   000013   9405         SUBB      A,#0x5
   \   000015   40EF         JC        ??ZDApp_InitZdoCBFunc_0
   2920          }
   \   000017   02....       LJMP      ?Subroutine3 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   F8           MOV       R0,A
   \   000001   E4           CLR       A
   \   000002   33           RLC       A
   \   000003   F9           MOV       R1,A
   \   000004   74..         MOV       A,#zdoCBFunc & 0xff
   \   000006   28           ADD       A,R0
   \   000007   F582         MOV       DPL,A
   \   000009   74..         MOV       A,#(zdoCBFunc >> 8) & 0xff
   \   00000B   39           ADDC      A,R1
   \   00000C   F583         MOV       DPH,A
   \   00000E   22           RET
   2921          
   2922          /*********************************************************************
   2923           * @fn          ZDO_RegisterForZdoCB
   2924           *
   2925           * @brief       Call this function to register the higher layer (for 
   2926           *              example, the Application layer or MT layer) with ZDO 
   2927           *              callbacks to get notified of some ZDO indication like
   2928           *              existence of a concentrator or receipt of a source 
   2929           *              route record.
   2930           *
   2931           * @param       indID - ZDO Indication ID
   2932           * @param       pFn   - Callback function pointer
   2933           *
   2934           * @return      ZSuccess - successful, ZInvalidParameter if not
   2935           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2936          ZStatus_t ZDO_RegisterForZdoCB( uint8 indID, pfnZdoCb pFn )
   \                     ZDO_RegisterForZdoCB:
   2937          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   E9           MOV       A,R1
   \   000005   FC           MOV       R4,A
   2938            // Check the range of the indication ID
   2939            if ( indID < MAX_ZDO_CB_FUNC )
   \   000006   C3           CLR       C
   \   000007   9405         SUBB      A,#0x5
   \   000009   500B         JNC       ??ZDO_RegisterForZdoCB_0
   2940            {
   2941              zdoCBFunc[indID] = pFn;
   \   00000B   EC           MOV       A,R4
   \   00000C   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   00000F   12....       LCALL     ??Subroutine41_0 & 0xFFFF
   2942              return ZSuccess;
   \                     ??CrossCallReturnLabel_67:
   \   000012   7900         MOV       R1,#0x0
   \   000014   8002         SJMP      ??ZDO_RegisterForZdoCB_1
   2943            }
   2944            
   2945            return ZInvalidParameter;
   \                     ??ZDO_RegisterForZdoCB_0:
   \   000016   7902         MOV       R1,#0x2
   \                     ??ZDO_RegisterForZdoCB_1:
   \   000018   02....       LJMP      ?Subroutine3 & 0xFFFF
   2946          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   29           ADD       A,R1
   \   000001   12....       LCALL     ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_37:
   \   000004   22           RET
   2947          
   2948          /*********************************************************************
   2949           * @fn          ZDO_DeregisterForZdoCB
   2950           *
   2951           * @brief       Call this function to de-register the higher layer (for 
   2952           *              example, the Application layer or MT layer) with ZDO 
   2953           *              callbacks to get notified of some ZDO indication like
   2954           *              existence of a concentrator or receipt of a source 
   2955           *              route record.
   2956           *
   2957           * @param       indID - ZDO Indication ID
   2958           *
   2959           * @return      ZSuccess - successful, ZInvalidParameter if not
   2960           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2961          ZStatus_t ZDO_DeregisterForZdoCB( uint8 indID )
   \                     ZDO_DeregisterForZdoCB:
   2962          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   E9           MOV       A,R1
   \   000005   FA           MOV       R2,A
   2963            // Check the range of the indication ID
   2964            if ( indID < MAX_ZDO_CB_FUNC )
   \   000006   C3           CLR       C
   \   000007   9405         SUBB      A,#0x5
   \   000009   500B         JNC       ??ZDO_DeregisterForZdoCB_0
   2965            {
   2966              zdoCBFunc[indID] = NULL;
   \   00000B   EA           MOV       A,R2
   \   00000C   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   00000F   E4           CLR       A
   \   000010   F0           MOVX      @DPTR,A
   \   000011   A3           INC       DPTR
   \   000012   F0           MOVX      @DPTR,A
   2967              return ZSuccess;
   \   000013   F9           MOV       R1,A
   \   000014   8002         SJMP      ??ZDO_DeregisterForZdoCB_1
   2968            }
   2969            
   2970            return ZInvalidParameter;
   \                     ??ZDO_DeregisterForZdoCB_0:
   \   000016   7902         MOV       R1,#0x2
   \                     ??ZDO_DeregisterForZdoCB_1:
   \   000018   02....       LJMP      ?Subroutine3 & 0xFFFF
   2971          }

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zdoDiscCounter>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for continueJoining>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for devState>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for ZDApp_epDesc>`:
   \   000000   00           DB 0
   \   000001   ....         DW ZDAppTaskID
   \   000003   0000         DW 0H
   \   000005   00           DB 0

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for ZDApp_SavedPollRate>`:
   \   000000   E803         DW 1000

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_1:
   \   000000   01000000     DD 1

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_3e8:
   \   000000   E8030000     DD 1000

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_Init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_SecInit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SecInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_event_loop::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_event_loop

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ProcessSecEvent::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ProcessSecEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDOInitDevice::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDOInitDevice

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ReadNetworkRestoreState::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ReadNetworkRestoreState

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDAppDetermineDeviceType::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDAppDetermineDeviceType

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_NetworkStartEvt::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NetworkStartEvt

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_DeviceAuthEvt::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_DeviceAuthEvt

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_SaveNetworkStateEvt::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SaveNetworkStateEvt

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_RestoreNetworkState::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_RestoreNetworkState

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_InitUserDesc::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_InitUserDesc

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDAppCheckForHoldKey::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDAppCheckForHoldKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ProcessOSALMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ProcessOSALMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ProcessMsgCBs::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ProcessMsgCBs

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_RegisterCBs::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_RegisterCBs

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ProcessSecMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ProcessSecMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ProcessNetworkJoin::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ProcessNetworkJoin

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_SaveNwkKey::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SaveNwkKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ResetNwkKey::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ResetNwkKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_RestoreNwkKey::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_RestoreNwkKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ResetTimerStart::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ResetTimerStart

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ResetTimerCancel::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ResetTimerCancel

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_LeaveCtrlInit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveCtrlInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_LeaveCtrlSet::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveCtrlSet

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_LeaveCtrlBypass::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveCtrlBypass

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_LeaveCtrlStartup::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveCtrlStartup

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_LeaveReset::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveReset

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_LeaveUpdate::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveUpdate

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_NetworkDiscoveryReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NetworkDiscoveryReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_JoinReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_JoinReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_SendEventMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SendEventMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_SendMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SendMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_NetworkDiscoveryConfirmCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_NetworkDiscoveryConfirmCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_NwkDescListProcessing::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NwkDescListProcessing

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_NetworkFormationConfirmCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_NetworkFormationConfirmCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_beaconNotifyIndCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_beaconNotifyIndCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_StartRouterConfirmCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_StartRouterConfirmCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_JoinConfirmCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_JoinConfirmCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_AddrChangeIndicationCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_AddrChangeIndicationCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_JoinIndicationCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_JoinIndicationCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ConcentratorIndicationCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ConcentratorIndicationCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_LeaveCnf::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_LeaveCnf

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_LeaveInd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_LeaveInd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_SyncIndicationCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_SyncIndicationCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ManytoOneFailureIndicationCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ManytoOneFailureIndicationCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_PollConfirmCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_PollConfirmCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??AddrMgrWriteNVRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    AddrMgrWriteNVRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_UpdateDeviceIndication::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_UpdateDeviceIndication

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_InMsgCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_InMsgCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ChangeMatchDescRespPermission::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ChangeMatchDescRespPermission

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_NetworkInit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NetworkInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_NwkStateUpdateCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NwkStateUpdateCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_NodeProfileSync::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NodeProfileSync

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_StartJoiningCycle::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_StartJoiningCycle

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_StopJoiningCycle::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_StopJoiningCycle

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_AnnounceNewAddress::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_AnnounceNewAddress

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_NVUpdate::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NVUpdate

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_CoordStartPANIDConflictCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_CoordStartPANIDConflictCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_SrcRtgIndCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_SrcRtgIndCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_InitZdoCBFunc::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_InitZdoCBFunc

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_RegisterForZdoCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_RegisterForZdoCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_DeregisterForZdoCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_DeregisterForZdoCB
   2972          
   2973          /*********************************************************************
   2974          *********************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0      0   AddrMgrWriteNVRequest
      2      9   ZDAppCheckForHoldKey
        2      0   -> HalKeyRead
      2     12   ZDAppDetermineDeviceType
        2      0   -> nwk_ExtPANIDValid
      0     23   ZDApp_AnnounceNewAddress
        0     10   -> APSME_HoldDataRequests
        0     10   -> NLME_GetExtAddr
        0     10   -> NLME_GetShortAddr
        0     11   -> ZDP_DeviceAnnce
      0      9   ZDApp_ChangeMatchDescRespPermission
        0      9   -> afSetMatch
      0      0   ZDApp_CoordStartPANIDConflictCB
      2      9   ZDApp_DeviceAuthEvt
        2      0   -> NLME_SetPollRate
        2      0   -> ZDApp_AnnounceNewAddress
        2      0   -> ZDApp_ResetTimerCancel
        2      0   -> ZDApp_SaveNwkKey
        2      0   -> osal_set_event
      0     14   ZDApp_InMsgCB
        0     14   -> ZDP_GenericRsp
      0      9   ZDApp_Init
        0      9   -> HalLedBlink
        0      9   -> NLME_GetExtAddr
        0      9   -> ZDAppCheckForHoldKey
        0      9   -> ZDApp_InitZdoCBFunc
        0      9   -> ZDApp_RegisterCBs
        0      9   -> ZDOInitDevice
        0      9   -> ZDO_Init
        0      9   -> afRegister
      0     31   ZDApp_InitUserDesc
        0     27   -> osal_memset
        0     29   -> osal_nv_item_init
        0     31   -> osal_nv_read
      2      9   ZDApp_InitZdoCBFunc
      0     20   ZDApp_JoinReq
        0     16   -> NLME_JoinRequest
        0     12   -> ZDApp_NodeProfileSync
      2      0   ZDApp_LeaveCtrlBypass
      0     26   ZDApp_LeaveCtrlInit
        0     12   -> osal_nv_item_init
        0     14   -> osal_nv_read
      0     23   ZDApp_LeaveCtrlSet
        0     14   -> osal_nv_write
      0     26   ZDApp_LeaveCtrlStartup
        0     14   -> osal_nv_write
      0     19   ZDApp_LeaveReset
        0      9   -> ZDApp_LeaveCtrlSet
        0      9   -> ZDApp_ResetTimerStart
      0      0   ZDApp_LeaveUpdate
      0      0   ZDApp_NVUpdate
      0     12   ZDApp_NetworkDiscoveryReq
        0     12   -> NLME_NetworkDiscoveryRequest
      2     12   ZDApp_NetworkInit
        2      0   -> osal_set_event
        2      0   -> osal_start_timerEx
      2      0   ZDApp_NetworkStartEvt
        2      0   -> NLME_GetEnergyThreshold
        2      0   -> NLME_SetEnergyThreshold
        2      0   -> osal_pwrmgr_device
        2      0   -> osal_set_event
      0     21   ZDApp_NodeProfileSync
        0      9   -> NLME_SetBroadcastFilter
      0     25   ZDApp_NwkDescListProcessing
        0     14   -> nwk_ExtPANIDValid
        0     14   -> nwk_getNwkDescList
        0     14   -> sAddrExtCmp
      2      0   ZDApp_NwkStateUpdateCB
        2      0   -> osal_get_timeoutEx
      0     42   ZDApp_ProcessMsgCBs
        0     31   -> ZDO_ParseAddrRsp
        0     31   -> ZDO_ParseBindUnbindReq
        0     31   -> ZDO_ProcessBindUnbindReq
        0     31   -> ZDO_UpdateAddrManager
        0     31   -> osal_mem_free
      0     23   ZDApp_ProcessNetworkJoin
        0     12   -> NLME_GetShortAddr
        0     12   -> NLME_NwkDiscTerm
        0     12   -> NLME_SetPollRate
        0     12   -> NLME_SetQueuedPollRate
        0     12   -> NLME_SetResponseRate
        0     12   -> ZDApp_AnnounceNewAddress
        0     12   -> ZDApp_NetworkInit
        0     12   -> ZMacSetReq
        0     12   -> nwkNeighborInitTable
        0     12   -> osal_rand
        0     12   -> osal_set_event
      0     27   ZDApp_ProcessOSALMsg
        0     15   -> NLME_JoinRequest
        0     11   -> NLME_ReJoinRequest
        0     11   -> NLME_SetPollRate
        0     11   -> NLME_SetQueuedPollRate
        0     11   -> NLME_SetResponseRate
        0     11   -> ZDApp_NetworkInit
        0     11   -> ZDApp_NodeProfileSync
        0     11   -> ZDApp_NwkDescListProcessing
        0     11   -> ZDApp_ProcessMsgCBs
        0     11   -> ZDApp_ProcessNetworkJoin
        0     11   -> ZDP_IncomingData
        0     11   -> ZMacSetReq
        0     11   -> osal_rand
        0     11   -> sAddrExtCpy
      0      9   ZDApp_ProcessSecEvent
        0      9   -> ZDApp_DeviceAuthEvt
        0      9   -> ZDApp_SaveNwkKey
        0      9   -> ZDSecMgrSaveTCLinkKey
      2      0   ZDApp_ProcessSecMsg
        2      0   -> ZDSecMgrSwitchKeyInd
        2      0   -> ZDSecMgrTransportKeyInd
      0      9   ZDApp_ReadNetworkRestoreState
        0      9   -> zgReadStartupOptions
      2      9   ZDApp_RegisterCBs
        2      0   -> ZDO_RegisterForZDOMsg
      0     35   ZDApp_ResetNwkKey
        0     31   -> osal_memset
        0     35   -> osal_nv_write
      2      0   ZDApp_ResetTimerCancel
        2      0   -> osal_stop_timerEx
      2      9   ZDApp_ResetTimerStart
        2      0   -> osal_start_timerEx
      0      9   ZDApp_RestoreNetworkState
        0      9   -> NLME_GetShortAddr
        0      9   -> NLME_InitNV
        0      9   -> NLME_RestoreFromNV
        0      9   -> sAddrExtCpy
      0     37   ZDApp_RestoreNwkKey
        0     33   -> osal_memset
        0     37   -> osal_nv_read
      0      0   ZDApp_SaveNetworkStateEvt
      0     46   ZDApp_SaveNwkKey
        0     33   -> SSP_ReadNwkActiveKey
        0     33   -> osal_memset
        0     37   -> osal_nv_write
      0      9   ZDApp_SecInit
        0      9   -> ZDSecMgrInit
      0      9   ZDApp_SendEventMsg
        0      9   -> ZDApp_SendMsg
      1     33   ZDApp_SendMsg
        0     19   -> osal_memcpy
        0     16   -> osal_msg_allocate
        0     16   -> osal_msg_send
      2      0   ZDApp_StartJoiningCycle
        2      0   -> ZDApp_NetworkInit
      2      0   ZDApp_StopJoiningCycle
      0     12   ZDApp_event_loop
        0     12   -> Onboard_soft_reset
        0     12   -> ZDApp_ProcessOSALMsg
        0     12   -> ZDO_StartDevice
        0     12   -> ZDO_UpdateNwkStatus
        0     12   -> osal_msg_deallocate
        0     12   -> osal_msg_receive
        0     12   -> osal_start_timerEx
      0     21   ZDOInitDevice
        0     12   -> NLME_SetBroadcastFilter
        0     12   -> ZDAppDetermineDeviceType
        0     12   -> ZDApp_LeaveCtrlInit
        0     12   -> ZDApp_LeaveCtrlStartup
        0     12   -> ZDApp_NetworkInit
        0     12   -> ZDConfig_InitDescriptors
        0     12   -> ZDSecMgrInit
        0     12   -> osal_rand
        0     12   -> osal_set_event
        0     12   -> zgInitItems
        0     12   -> zgWriteStartupOptions
      2      0   ZDO_AddrChangeIndicationCB
        2      0   -> ZDApp_AnnounceNewAddress
        2      0   -> osal_set_event
      1     14   ZDO_ConcentratorIndicationCB
      2      0   ZDO_DeregisterForZdoCB
      1     14   ZDO_JoinConfirmCB
        0     14   -> HalLedSet
        0     14   -> ZDApp_SendMsg
      0      1   ZDO_JoinIndicationCB
      0      9   ZDO_LeaveCnf
        0      9   -> NLME_GetExtAddr
        0      9   -> ZDApp_LeaveReset
        0      9   -> sAddrExtCmp
      0     10   ZDO_LeaveInd
        0     10   -> NLME_GetCoordShortAddr
        0     10   -> ZDApp_LeaveReset
      2      0   ZDO_ManytoOneFailureIndicationCB
        2      0   -> RTG_MTORouteReq
      3      3   ZDO_NetworkDiscoveryConfirmCB
        2      3   -> ZDApp_SendMsg
      0      9   ZDO_NetworkFormationConfirmCB
        0      9   -> HalLedSet
        0      9   -> osal_set_event
      0      0   ZDO_PollConfirmCB
      2      0   ZDO_RegisterForZdoCB
      1     14   ZDO_SrcRtgIndCB
      0      9   ZDO_StartRouterConfirmCB
        0      9   -> HalLedSet
        0      9   -> osal_set_event
      0      9   ZDO_SyncIndicationCB
        0      9   -> ZDApp_SendMsg
        0      9   -> nwkNeighborInitTable
      0      0   ZDO_UpdateDeviceIndication
      1     14   ZDO_beaconNotifyIndCB
        0     14   -> osal_mem_alloc
        0     14   -> osal_memset
        0     14   -> sAddrExtCpy


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       2  ?<Initializer for ZDApp_SavedPollRate>
       6  ?<Initializer for ZDApp_epDesc>
       1  ?<Initializer for continueJoining>
       1  ?<Initializer for devState>
       1  ?<Initializer for zdoDiscCounter>
       8  ??Subroutine32_0
       3  ??Subroutine33_0
       5  ??Subroutine34_0
       3  ??Subroutine35_0
       5  ??Subroutine36_0
       5  ??Subroutine37_0
       6  ??Subroutine38_0
       6  ??Subroutine39_0
       6  ??Subroutine40_0
       6  ??Subroutine41_0
      10  ?Subroutine0
       2  ?Subroutine1
       6  ?Subroutine10
      16  ?Subroutine11
      10  ?Subroutine12
      14  ?Subroutine13
       8  ?Subroutine14
       4  ?Subroutine15
       8  ?Subroutine16
       4  ?Subroutine17
       4  ?Subroutine18
       9  ?Subroutine19
       2  ?Subroutine2
       5  ?Subroutine20
      11  ?Subroutine21
       8  ?Subroutine22
       6  ?Subroutine23
       1  ?Subroutine24
       4  ?Subroutine25
      10  ?Subroutine26
      11  ?Subroutine27
      15  ?Subroutine28
      12  ?Subroutine29
       7  ?Subroutine3
       5  ?Subroutine30
      10  ?Subroutine31
       5  ?Subroutine4
       5  ?Subroutine5
       8  ?Subroutine6
       5  ?Subroutine7
      12  ?Subroutine8
       6  ?Subroutine9
       3  AddrMgrWriteNVRequest
       6  AddrMgrWriteNVRequest::?relay
      20  ZDAppCheckForHoldKey
       6  ZDAppCheckForHoldKey::?relay
      74  ZDAppDetermineDeviceType
       6  ZDAppDetermineDeviceType::?relay
       9  ZDAppNwkAddr
       1  ZDAppTaskID
      59  ZDApp_AnnounceNewAddress
       6  ZDApp_AnnounceNewAddress::?relay
       2  ZDApp_AutoFindMode_epDesc
      11  ZDApp_ChangeMatchDescRespPermission
       6  ZDApp_ChangeMatchDescRespPermission::?relay
      10  ZDApp_CoordStartPANIDConflictCB
       6  ZDApp_CoordStartPANIDConflictCB::?relay
      49  ZDApp_DeviceAuthEvt
       6  ZDApp_DeviceAuthEvt::?relay
      98  ZDApp_InMsgCB
       6  ZDApp_InMsgCB::?relay
      85  ZDApp_Init
       6  ZDApp_Init::?relay
     111  ZDApp_InitUserDesc
       6  ZDApp_InitUserDesc::?relay
      26  ZDApp_InitZdoCBFunc
       6  ZDApp_InitZdoCBFunc::?relay
      74  ZDApp_JoinReq
       6  ZDApp_JoinReq::?relay
       1  ZDApp_LeaveCtrl
      16  ZDApp_LeaveCtrlBypass
       6  ZDApp_LeaveCtrlBypass::?relay
      64  ZDApp_LeaveCtrlInit
       6  ZDApp_LeaveCtrlInit::?relay
      56  ZDApp_LeaveCtrlSet
       6  ZDApp_LeaveCtrlSet::?relay
      78  ZDApp_LeaveCtrlStartup
       6  ZDApp_LeaveCtrlStartup::?relay
      18  ZDApp_LeaveReset
       6  ZDApp_LeaveReset::?relay
       3  ZDApp_LeaveUpdate
       6  ZDApp_LeaveUpdate::?relay
       3  ZDApp_NVUpdate
       6  ZDApp_NVUpdate::?relay
      10  ZDApp_NetworkDiscoveryReq
       6  ZDApp_NetworkDiscoveryReq::?relay
      41  ZDApp_NetworkInit
       6  ZDApp_NetworkInit::?relay
      89  ZDApp_NetworkStartEvt
       6  ZDApp_NetworkStartEvt::?relay
      44  ZDApp_NodeProfileSync
       6  ZDApp_NodeProfileSync::?relay
     262  ZDApp_NwkDescListProcessing
       6  ZDApp_NwkDescListProcessing::?relay
      19  ZDApp_NwkStateUpdateCB
       6  ZDApp_NwkStateUpdateCB::?relay
     107  ZDApp_ProcessMsgCBs
       6  ZDApp_ProcessMsgCBs::?relay
     387  ZDApp_ProcessNetworkJoin
       6  ZDApp_ProcessNetworkJoin::?relay
     453  ZDApp_ProcessOSALMsg
       6  ZDApp_ProcessOSALMsg::?relay
     100  ZDApp_ProcessSecEvent
       6  ZDApp_ProcessSecEvent::?relay
      56  ZDApp_ProcessSecMsg
       6  ZDApp_ProcessSecMsg::?relay
      23  ZDApp_ReadNetworkRestoreState
       6  ZDApp_ReadNetworkRestoreState::?relay
      55  ZDApp_RegisterCBs
       6  ZDApp_RegisterCBs::?relay
      66  ZDApp_ResetNwkKey
       6  ZDApp_ResetNwkKey::?relay
      19  ZDApp_ResetTimerCancel
       6  ZDApp_ResetTimerCancel::?relay
      23  ZDApp_ResetTimerStart
       6  ZDApp_ResetTimerStart::?relay
      68  ZDApp_RestoreNetworkState
       6  ZDApp_RestoreNetworkState::?relay
     130  ZDApp_RestoreNwkKey
       6  ZDApp_RestoreNwkKey::?relay
       3  ZDApp_SaveNetworkStateEvt
       6  ZDApp_SaveNetworkStateEvt::?relay
      96  ZDApp_SaveNwkKey
       6  ZDApp_SaveNwkKey::?relay
       2  ZDApp_SavedPollRate
      11  ZDApp_SecInit
       6  ZDApp_SecInit::?relay
      21  ZDApp_SendEventMsg
       6  ZDApp_SendEventMsg::?relay
      85  ZDApp_SendMsg
       6  ZDApp_SendMsg::?relay
      39  ZDApp_StartJoiningCycle
       6  ZDApp_StartJoiningCycle::?relay
      31  ZDApp_StopJoiningCycle
       6  ZDApp_StopJoiningCycle::?relay
       6  ZDApp_epDesc
     162  ZDApp_event_loop
       6  ZDApp_event_loop::?relay
     155  ZDOInitDevice
       6  ZDOInitDevice::?relay
      22  ZDO_AddrChangeIndicationCB
       6  ZDO_AddrChangeIndicationCB::?relay
      46  ZDO_ConcentratorIndicationCB
       6  ZDO_ConcentratorIndicationCB::?relay
      27  ZDO_DeregisterForZdoCB
       6  ZDO_DeregisterForZdoCB::?relay
     130  ZDO_JoinConfirmCB
       6  ZDO_JoinConfirmCB::?relay
       0  ZDO_JoinIndicationCB
       6  ZDO_JoinIndicationCB::?relay
      41  ZDO_LeaveCnf
       6  ZDO_LeaveCnf::?relay
      79  ZDO_LeaveInd
       6  ZDO_LeaveInd::?relay
      10  ZDO_ManytoOneFailureIndicationCB
       6  ZDO_ManytoOneFailureIndicationCB::?relay
      63  ZDO_NetworkDiscoveryConfirmCB
       6  ZDO_NetworkDiscoveryConfirmCB::?relay
      49  ZDO_NetworkFormationConfirmCB
       6  ZDO_NetworkFormationConfirmCB::?relay
       3  ZDO_PollConfirmCB
       6  ZDO_PollConfirmCB::?relay
      27  ZDO_RegisterForZdoCB
       6  ZDO_RegisterForZdoCB::?relay
      47  ZDO_SrcRtgIndCB
       6  ZDO_SrcRtgIndCB::?relay
      49  ZDO_StartRouterConfirmCB
       6  ZDO_StartRouterConfirmCB::?relay
      34  ZDO_SyncIndicationCB
       6  ZDO_SyncIndicationCB::?relay
       3  ZDO_UpdateDeviceIndication
       6  ZDO_UpdateDeviceIndication::?relay
       8  ZDO_UseExtendedPANID
     553  ZDO_beaconNotifyIndCB
       6  ZDO_beaconNotifyIndCB::?relay
       4  __Constant_1
       4  __Constant_3e8
       1  _tmpRejoinState
       1  continueJoining
       1  devStartMode
       1  devState
       2  nwkFrameCounterChanges
       1  nwkStatus
       1  retryCnt
       1  zdappMgmtNwkDiscReqInProgress
       9  zdappMgmtNwkDiscRspAddr
       1  zdappMgmtNwkDiscRspTransSeq
       1  zdappMgmtNwkDiscStartIndex
       1  zdappMgmtSavedNwkState
      10  zdoCBFunc
       1  zdoDiscCounter

 
 4 892 bytes in segment BANKED_CODE
   378 bytes in segment BANK_RELAYS
    11 bytes in segment XDATA_I
    11 bytes in segment XDATA_ID
     8 bytes in segment XDATA_ROM_C
    50 bytes in segment XDATA_Z
 
   389 bytes of CODE     memory
     0 bytes of CONST    memory (+ 8 bytes shared)
 4 892 bytes of HUGECODE memory
    61 bytes of XDATA    memory

Errors: none
Warnings: none
