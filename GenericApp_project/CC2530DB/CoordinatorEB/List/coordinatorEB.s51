///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V10.10.1.4655 for 8051              29/Apr/2024  11:27:02
// Copyright 2004-2017 IAR Systems AB.
// Standalone license - IAR Embedded Workbench for 8051
//
//    Core               =  plain
//    Code model         =  banked
//    Data model         =  large
//    Calling convention =  xdata reentrant
//    Constant location  =  data_rom
//    Dptr setup         =  1,16
//                          
//    Source file        =  
//        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\Source\coordinatorEB.c
//    Command line       =  
//        -f C:\Users\Со\AppData\Local\Temp\EW3E0A.tmp
//        (D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\Source\coordinatorEB.c
//        -D ZTOOL_P1 -D xMT_TASK -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D
//        xLCD_SUPPORTED=DEBUG -lC
//        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\CC2530DB\CoordinatorEB\List
//        -lA
//        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\CC2530DB\CoordinatorEB\List
//        --diag_suppress Pe001,Pa010 -o
//        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\CC2530DB\CoordinatorEB\Obj
//        -e --debug --core=plain --dptr=16,1 --data_model=large
//        --code_model=banked --calling_convention=xdata_reentrant
//        --place_constants=data_rom --nr_virtual_regs 8 -f
//        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg
//        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
//        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
//        -DZDO_COORDINATOR -DRTR_NWK) -f
//        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
//        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
//        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0x520
//        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
//        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
//        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
//        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
//        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
//        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
//        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
//        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
//        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
//        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
//        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=TRUE
//        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
//        -DREJOIN_POLL_RATE=440) -I
//        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\CC2530DB\
//        -I
//        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\CC2530DB\..\Source\
//        -I
//        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\CC2530DB\..\..\..\ZMain\TI2530DB\
//        -I
//        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\CC2530DB\..\..\..\..\..\Components\hal\include\
//        -I
//        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
//        -I
//        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\CC2530DB\..\..\..\..\..\Components\mac\include\
//        -I
//        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\CC2530DB\..\..\..\..\..\Components\mac\high_level\
//        -I
//        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
//        -I
//        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
//        -I
//        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\CC2530DB\..\..\..\..\..\Components\mt\
//        -I
//        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\CC2530DB\..\..\..\..\..\Components\osal\include\
//        -I
//        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\CC2530DB\..\..\..\..\..\Components\osal\mcu\ccsoc\
//        -I
//        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\CC2530DB\..\..\..\..\..\Components\services\saddr\
//        -I
//        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\CC2530DB\..\..\..\..\..\Components\services\sdata\
//        -I
//        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\CC2530DB\..\..\..\..\..\Components\stack\af\
//        -I
//        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\CC2530DB\..\..\..\..\..\Components\stack\nwk\
//        -I
//        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\CC2530DB\..\..\..\..\..\Components\stack\sapi\
//        -I
//        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\CC2530DB\..\..\..\..\..\Components\stack\sec\
//        -I
//        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\CC2530DB\..\..\..\..\..\Components\stack\sys\
//        -I
//        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\CC2530DB\..\..\..\..\..\Components\stack\zdo\
//        -I
//        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\CC2530DB\..\..\..\..\..\Components\zmac\
//        -I
//        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
//        -Ohz --require_prototypes --no_code_motion)
//    Locale             =  Chinese (Simplified)_China.936
//    List file          =  
//        D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\CC2530DB\CoordinatorEB\List\coordinatorEB.s51
//
///////////////////////////////////////////////////////////////////////////////

        NAME coordinatorEB

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__register_banks", "*"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?V0
        EXTERN ?V1
        EXTERN ?V2
        EXTERN ?V3
        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN ?XSTACK_DISP101_8
        EXTERN __INIT_XDATA_Z

        PUBLIC `??GenericApp_Init::?relay`
        FUNCTION `??GenericApp_Init::?relay`,0203H
        PUBLIC `??GenericApp_MessageMSGCB::?relay`
        FUNCTION `??GenericApp_MessageMSGCB::?relay`,0203H
        PUBLIC `??GenericApp_ProcessEvent::?relay`
        FUNCTION `??GenericApp_ProcessEvent::?relay`,0203H
        PUBLIC `??GenericApp_SendTheMessage::?relay`
        FUNCTION `??GenericApp_SendTheMessage::?relay`,0203H
        FUNCTION `??rxCB::?relay`,0203H
        PUBLIC GenericApp_ClusterList
        PUBLIC GenericApp_Init
        FUNCTION GenericApp_Init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        PUBLIC GenericApp_MessageMSGCB
        FUNCTION GenericApp_MessageMSGCB,0a1203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 78, STACK
        PUBLIC GenericApp_ProcessEvent
        FUNCTION GenericApp_ProcessEvent,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC GenericApp_SendTheMessage
        FUNCTION GenericApp_SendTheMessage,0a1203H
        ARGFRAME XSTACK, 59, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 31, STACK
        PUBLIC GenericApp_SimpleDesc
        PUBLIC GenericApp_TaskID
        PUBLIC GenericApp_TransID
        PUBLIC GenericApp_epDesc
        FUNCTION rxCB,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 59, STACK
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource SP:8, PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
AF_DataRequest      SYMBOL "AF_DataRequest"
`??AF_DataRequest::?relay` SYMBOL "?relay", AF_DataRequest
HalUARTOpen         SYMBOL "HalUARTOpen"
`??HalUARTOpen::?relay` SYMBOL "?relay", HalUARTOpen
HalUARTRead         SYMBOL "HalUARTRead"
`??HalUARTRead::?relay` SYMBOL "?relay", HalUARTRead
HalUARTWrite        SYMBOL "HalUARTWrite"
`??HalUARTWrite::?relay` SYMBOL "?relay", HalUARTWrite
Hal_UART_RxBufLen   SYMBOL "Hal_UART_RxBufLen"
`??Hal_UART_RxBufLen::?relay` SYMBOL "?relay", Hal_UART_RxBufLen
MT_UartInit         SYMBOL "MT_UartInit"
`??MT_UartInit::?relay` SYMBOL "?relay", MT_UartInit
afRegister          SYMBOL "afRegister"
`??afRegister::?relay` SYMBOL "?relay", afRegister
osal_memcpy         SYMBOL "osal_memcpy"
`??osal_memcpy::?relay` SYMBOL "?relay", osal_memcpy
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
`??osal_msg_deallocate::?relay` SYMBOL "?relay", osal_msg_deallocate
osal_msg_receive    SYMBOL "osal_msg_receive"
`??osal_msg_receive::?relay` SYMBOL "?relay", osal_msg_receive
GenericApp_Init     SYMBOL "GenericApp_Init"
`??GenericApp_Init::?relay` SYMBOL "?relay", GenericApp_Init
GenericApp_MessageMSGCB SYMBOL "GenericApp_MessageMSGCB"
`??GenericApp_MessageMSGCB::?relay` SYMBOL "?relay", GenericApp_MessageMSGCB
GenericApp_ProcessEvent SYMBOL "GenericApp_ProcessEvent"
`??GenericApp_ProcessEvent::?relay` SYMBOL "?relay", GenericApp_ProcessEvent
GenericApp_SendTheMessage SYMBOL "GenericApp_SendTheMessage"
`??GenericApp_SendTheMessage::?relay` SYMBOL "?relay", GenericApp_SendTheMessage

        EXTERN `??AF_DataRequest::?relay`
        FUNCTION `??AF_DataRequest::?relay`,00H
        EXTERN `??HalUARTOpen::?relay`
        FUNCTION `??HalUARTOpen::?relay`,00H
        EXTERN `??HalUARTRead::?relay`
        FUNCTION `??HalUARTRead::?relay`,00H
        EXTERN `??HalUARTWrite::?relay`
        FUNCTION `??HalUARTWrite::?relay`,00H
        EXTERN `??Hal_UART_RxBufLen::?relay`
        FUNCTION `??Hal_UART_RxBufLen::?relay`,00H
        EXTERN `??MT_UartInit::?relay`
        FUNCTION `??MT_UartInit::?relay`,00H
        EXTERN `??afRegister::?relay`
        FUNCTION `??afRegister::?relay`,00H
        EXTERN `??osal_memcpy::?relay`
        FUNCTION `??osal_memcpy::?relay`,00H
        EXTERN `??osal_msg_deallocate::?relay`
        FUNCTION `??osal_msg_deallocate::?relay`,00H
        EXTERN `??osal_msg_receive::?relay`
        FUNCTION `??osal_msg_receive::?relay`,00H
        EXTERN AF_DataRequest
        FUNCTION AF_DataRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTOpen
        FUNCTION HalUARTOpen,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTRead
        FUNCTION HalUARTRead,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 59, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTWrite
        FUNCTION HalUARTWrite,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 75, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN Hal_UART_RxBufLen
        FUNCTION Hal_UART_RxBufLen,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 59, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MT_UartInit
        FUNCTION MT_UartInit,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN afRegister
        FUNCTION afRegister,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC

// D:\qtfile\ZStack-CC2530-2.4.0-1.4.0\ZStack-CC2530-2.4.0-1.4.0\Projects\zstack\Samples\GenericApp_project\Source\coordinatorEB.c
//    1 #include "coordinatorEB.h"
//    2 #include "OSAL.h"
//    3 #include "AF.h"
//    4 #include "ZDApp.h"
//    5 #include "ZDObject.h"
//    6 #include "ZDProfile.h"
//    7 #include "DebugTrace.h"
//    8 
//    9 #if !defined( WIN32 )
//   10   #include "OnBoard.h"
//   11 #endif
//   12 
//   13 /* HAL */
//   14 #include "hal_lcd.h"
//   15 #include "hal_led.h"
//   16 #include "hal_key.h"
//   17 #include "hal_uart.h"
//   18 #include "MT_UART.h"
//   19 
//   20 extern void GenericApp_Init( byte task_id );
//   21 extern UINT16 GenericApp_ProcessEvent( byte task_id, UINT16 events );
//   22 void GenericApp_MessageMSGCB( afIncomingMSGPacket_t *pkt );
//   23 void GenericApp_SendTheMessage(char *theMessageData,byte len);
//   24 static void rxCB(uint8 port ,uint8 event);
//   25 
//   26 
//   27 //КдИлґШ
//   28 // This list should be filled with Application specific Cluster IDs.

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA16
//   29 const cId_t GenericApp_ClusterList[GENERICAPP_MAX_CLUSTERS] =
GenericApp_ClusterList:
        DW 1
//   30 {
//   31   GENERICAPP_CLUSTERID  
//   32 };
//   33 

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//   34 const SimpleDescriptionFormat_t GenericApp_SimpleDesc =
GenericApp_SimpleDesc:
        DB 10
        DATA16
        DW 3844
        DW 1
        DATA8
        DB 0
        DB 1
        DATA16
        DW GenericApp_ClusterList
        DATA8
        DB 1
        DATA16
        DW GenericApp_ClusterList
//   35 {
//   36   GENERICAPP_ENDPOINT,              //  int Endpoint;
//   37   GENERICAPP_PROFID,                //  uint16 AppProfId[2];
//   38   GENERICAPP_DEVICEID,              //  uint16 AppDeviceId[2];
//   39   GENERICAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
//   40   GENERICAPP_FLAGS,                 //  int   AppFlags:4;
//   41   GENERICAPP_MAX_CLUSTERS,          //  byte  AppNumInClusters;
//   42   (cId_t *)GenericApp_ClusterList,  //  byte *pAppInClusterList;
//   43   GENERICAPP_MAX_CLUSTERS,          //  byte  AppNumInClusters;
//   44   (cId_t *)GenericApp_ClusterList,   //  byte *pAppInClusterList;
//   45 };
//   46 
//   47 //¶ЁТе¶ЛµгГиКц·ы

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   48 endPointDesc_t GenericApp_epDesc;
GenericApp_epDesc:
        DS 6
        REQUIRE __INIT_XDATA_Z
//   49 
//   50 //¶ЁТеИООсµДУЕПИј¶

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   51 byte GenericApp_TaskID; 
GenericApp_TaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   52 
//   53 //¶ЁТе·ўЛНКэѕЭРтєЕЈЁјЖКэЈ©

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   54 byte GenericApp_TransID;  // This is the unique message ID (counter)
GenericApp_TransID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   55 
//   56 
//   57 
//   58 //ИООсіхКј»ЇПµНііхКј»ЇµДК±єтЈ¬»б±»µчУГ

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//   59 void GenericApp_Init( byte task_id )
GenericApp_Init:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function GenericApp_Init
        CODE
//   60 {
        FUNCALL GenericApp_Init, MT_UartInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_Init, afRegister
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_Init, HalUARTOpen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 29
        MOV       A,#-0x1d
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 38)
        MOV       A,R1
        MOV       R6,A
//   61   MT_UartInit();
        ; Setup parameters for call to function MT_UartInit
        LCALL     `??MT_UartInit::?relay`; Banked call to: MT_UartInit
//   62   
//   63   
//   64   
//   65   GenericApp_TaskID = task_id;
        MOV       A,R6
        MOV       DPTR,#GenericApp_TaskID
        MOVX      @DPTR,A
//   66 
//   67 
//   68   // Fill out the endpoint description.
//   69   GenericApp_epDesc.endPoint = GENERICAPP_ENDPOINT;
        MOV       DPTR,#GenericApp_epDesc
        MOV       A,#0xa
        MOVX      @DPTR,A
//   70   GenericApp_epDesc.task_id = &GenericApp_TaskID;
        INC       DPTR
        MOV       A,#GenericApp_TaskID & 0xff
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#(GenericApp_TaskID >> 8) & 0xff
        MOVX      @DPTR,A
//   71   GenericApp_epDesc.simpleDesc
//   72             = (SimpleDescriptionFormat_t *)&GenericApp_SimpleDesc;
        INC       DPTR
        MOV       A,#GenericApp_SimpleDesc & 0xff
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#(GenericApp_SimpleDesc >> 8) & 0xff
        MOVX      @DPTR,A
//   73   GenericApp_epDesc.latencyReq = noLatencyReqs;
        INC       DPTR
        CLR       A
        MOVX      @DPTR,A
//   74 
//   75   // Register the endpoint description with the AF
//   76   afRegister( &GenericApp_epDesc );
        ; Setup parameters for call to function afRegister
        MOV       R2,#GenericApp_epDesc & 0xff
        MOV       R3,#(GenericApp_epDesc >> 8) & 0xff
        LCALL     `??afRegister::?relay`; Banked call to: afRegister
//   77   
//   78   
//   79   
//   80   
//   81  
//   82  //¶ФУ¦µДґ®їЪЕдЦГµДЅб№№Ме
//   83   halUARTCfg_t uartConfig;
//   84 //КЗ·сЕдЦГ   µчУГЎ°HalUARTOpen()Ў±єЇКэК±»бЧФ¶ЇЅ«Ў°.configuredЎ±ІОКэЦГОЄTRUEЈ»
//   85 //ИфЎ°.configuredЎ±=TUREЈ¬ФЩµчУГЎ°HalUARTOpen()Ў±єЇКэґтїЄН¬Т»ёцґ®їЪК±Ј¬
//   86 //Фт»бЧФ¶ЇЗеіэґ®їЪµДRXЎўTX»єґжєНґ®їЪЕдЦГЎ°uartRecordЎ±ФЩЦШРВЕдЦГЎЈґЛґ¦ОТГЗЙиЦГОЄTRUEЎЈ
//   87   uartConfig.configured = true; 
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,#0x1
        MOVX      @DPTR,A
//   88 
//   89   uartConfig.baudRate =HAL_UART_BR_115200;// ЕдЦГІЁМШВКОЄ115200
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x4
        MOVX      @DPTR,A
//   90 
//   91   //УІјюБчїШЦЖЈ¬TRUEОЄїЄЖфУІјюБчїШЈ¬FALSEОЄ№Ш±ХУІјюБчїШЎЈ
//   92   //УРУІјюБчїШ№¦ДЬµДїЙТФїЄЖфУІјюБчїШЈ¬ґЛґ¦ОТГЗЙиЦГОЄFALSEЈ¬№Ш±ХУІјюБчїШ№¦ДЬЎЈ
//   93   uartConfig.flowControl = false; //І»РиТЄБчїШЎЈ¶ФУ¦µДflowControlThresholdєНidleTimeoutІ»РиТЄЕдЦГ
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        CLR       A
        MOVX      @DPTR,A
//   94 
//   95   
//   96   //ґЛІОКэ±нКѕRX»єґжґпµЅЎ°maxRxBufSizeЎ±Ц®З°»№УР¶аЙЩЧЦЅЪїХУаЎЈµ±RX»єґжµЅґпЎ°maxRxBufSize ЁC flowControlThresholdЎ±К±Ј¬
//   97   //»бґҐ·ўПаУ¦µДУ¦УГКВјюЈєЎ°HAL_UART_RX_ABOUT_FULLЎ±ЎЈґЛґ¦ОТГЗЙиЦГОЄ64Ј¬Т»°гЙиЦГОЄЎ°maxRxBufSizeЎ±µДТ»°лЎЈ
//   98   uartConfig.flowControlThreshold = 64;
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x40
        MOVX      @DPTR,A
        INC       DPTR
        CLR       A
        MOVX      @DPTR,A
//   99   
//  100   //Из№ыЙи±ёґ®їЪКХµЅКэѕЭЦ®єуФЪЎ°idleTimoutЎ±К±јдДЪRXГ»УРКХµЅРВµДКэѕЭБЛЈ¬
//  101   //Ѕ«»бґҐ·ўПаУ¦µДКВјюЎ°HAL_UART_RX_TIMEOUTЎ±Ј¬ХвК±У¦УГіМРтїЙТФСЎФс¶БіцЛщУРRXµДЦµ»тХЯТ»Ії·ЦµДЦµЈ¬
//  102   //µҐО»ЈєєБГлЎЈґЛґ¦ОТГЗЙиЦГОЄ6msЈ¬µ±ґ®їЪКХµЅКэѕЭєуЈ¬6msДЪГ»УРФЩКХµЅРВµДКэѕЭЈ¬ФтґҐ·ўЎ°HAL_UART_RX_ABOUT_FULLЎ±КВјюЎЈ
//  103   uartConfig.idleTimeout = 6;             // 6msєуґ®їЪїХПРФт·ўЛНґ®їЪїХПРКВјю,ІОКэІ»їЙЙиОЄ0
        MOV       A,#0x5
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x6
        MOVX      @DPTR,A
//  104  
//  105   //rx°ьє¬Ў°halUARTBufControl_tЎ±КэѕЭЅб№№Ј¬УГУЪІЩЧчRX »єіеЗшЎЈ
//  106   //µ±ЅУКХµДЧЦЅЪКэµЅґпЎ°rx.maxBufSizeЎ±К±Ј¬»бІъЙъЎ°HAL_UART_RX_FULLЎ±КВјюЎЈґЛґ¦ОТГЗЙиЦГОЄ128ёцЧЦЅЪ
//  107   uartConfig.rx.maxBufSize = 128;
        MOV       A,#0xa
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#-0x80
        MOVX      @DPTR,A
        INC       DPTR
        CLR       A
        MOVX      @DPTR,A
//  108   
//  109   //tx°ьє¬Ў°halUARTBufControl_tЎ±КэѕЭЅб№№Ј¬УГУЪІЩЧчTX »єіеЗшЎЈ
//  110   //µ±ЅУКХµДЧЦЅЪКэµЅґпЎ°tx.maxBufSizeЎ±К±Ј¬»бІъЙъЎ°HAL_UART_RX_FULLЎ±КВјюЎЈґЛґ¦ОТГЗЙиЦГОЄ128ёцЧЦЅЪ
//  111   uartConfig.tx.maxBufSize = 128;
        MOV       A,#0x12
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#-0x80
        MOVX      @DPTR,A
        INC       DPTR
        CLR       A
        MOVX      @DPTR,A
//  112   
//  113   //ґ®їЪЦР¶ПК№ДЬЈ¬TRUEОЄК№ДЬґ®їЪЦР¶П№¦ДЬЈ¬FALSEОЄК§ДЬґ®їЪЦР¶П№¦ДЬЎЈґЛґ¦ОТГЗЙиЦГОЄTRUEЈ¬К№ДЬґ®їЪЦР¶П№¦ДЬ
//  114   uartConfig.intEnable = true; //К№ДЬЦР¶П    rxChRvdTime ОЄЅУКХµДК±јдУГД¬ИПјґїЙ
        MOV       A,#0x16
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x1
        MOVX      @DPTR,A
//  115 
//  116   //»ШµчєЇКэЈ¬У¦УГіМРтїЙТФёщѕЭRXЎўTXіц·ўµДІ»Н¬КВјюЅшРРґ¦АнЎЈ
//  117   uartConfig.callBackFunc = rxCB;  //ЅУКХµД»ШµчєЇКэ
        MOV       A,#0x1b
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#`??rxCB::?relay` & 0xff
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#(`??rxCB::?relay` >> 8) & 0xff
        MOVX      @DPTR,A
//  118   
//  119   //ґтїЄ¶ФУ¦µДґ®їЪ
//  120   HalUARTOpen(0,&uartConfig);
        ; Setup parameters for call to function HalUARTOpen
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        MOV       R1,#0x0
        LCALL     `??HalUARTOpen::?relay`; Banked call to: HalUARTOpen
//  121   
//  122 
//  123   
//  124   
//  125   
//  126   
//  127   
//  128   
//  129   
//  130   
//  131 
//  132 
//  133 }
        MOV       A,#0x1d
          CFI EndBlock cfiBlock0
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 38)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Valid
        MOV       R7,#0x1
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock1
//  134 
//  135 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  136 UINT16 GenericApp_ProcessEvent( byte task_id, UINT16 events )
GenericApp_ProcessEvent:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function GenericApp_ProcessEvent
        CODE
//  137 {
        FUNCALL GenericApp_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_ProcessEvent, GenericApp_MessageMSGCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_ProcessEvent, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
//  138   afIncomingMSGPacket_t *MSGpkt;  //ПыПў°ьµДЦёХл
//  139 
//  140   if ( events & SYS_EVENT_MSG )
        ANL       A,#0x80
        JZ        ??GenericApp_ProcessEvent_0
//  141   {
//  142     MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( GenericApp_TaskID );
        ; Setup parameters for call to function osal_msg_receive
        SJMP      ??GenericApp_ProcessEvent_1
//  143     while ( MSGpkt )
//  144     {
//  145       switch ( MSGpkt->hdr.event )
??GenericApp_ProcessEvent_2:
        MOV       DPL,?V0
        MOV       DPH,?V1
        MOVX      A,@DPTR
        XRL       A,#0x1a
        JNZ       ??GenericApp_ProcessEvent_3
//  146       {
//  147    
//  148 
//  149         case AF_INCOMING_MSG_CMD:
//  150           GenericApp_MessageMSGCB( MSGpkt );
        ; Setup parameters for call to function GenericApp_MessageMSGCB
        MOV       R2,?V0
        MOV       R3,?V1
        LCALL     `??GenericApp_MessageMSGCB::?relay`; Banked call to: GenericApp_MessageMSGCB
//  151           break;
//  152 
//  153         default:
//  154           break;
//  155       }
//  156 
//  157       // Release the memory
//  158       osal_msg_deallocate( (uint8 *)MSGpkt );
??GenericApp_ProcessEvent_3:
        ; Setup parameters for call to function osal_msg_deallocate
        MOV       R2,?V0
        MOV       R3,?V1
        LCALL     `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
//  159       // Next
//  160       MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( GenericApp_TaskID );
        ; Setup parameters for call to function osal_msg_receive
??GenericApp_ProcessEvent_1:
        MOV       DPTR,#GenericApp_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
        MOV       ?V0,R2
        MOV       ?V1,R3
//  161     }
        MOV       A,?V0
        ORL       A,?V1
        JNZ       ??GenericApp_ProcessEvent_2
//  162     // return unprocessed events
//  163     return (events ^ SYS_EVENT_MSG);
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        XRL       A,#0x80
        MOV       R3,A
        SJMP      ??GenericApp_ProcessEvent_4
//  164   }
//  165   return 0;
??GenericApp_ProcessEvent_0:
        MOV       R2,#0x0
        MOV       R3,#0x0
??GenericApp_ProcessEvent_4:
        MOV       R7,#0x4
        LJMP      ?BANKED_LEAVE_XDATA
//  166 }
          CFI EndBlock cfiBlock2
//  167 
//  168 
//  169 //їЅ±ґ»ШµчєЇКэЈ¬ЈЁЅУКЬµЅЙдЖµґ«№эАґµДПыПўµДґ¦АнПыПўЈ©

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  170 void GenericApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
GenericApp_MessageMSGCB:
          CFI Block cfiBlock3 Using cfiCommon0
          CFI Function GenericApp_MessageMSGCB
        CODE
//  171 {
        FUNCALL GenericApp_MessageMSGCB, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_MessageMSGCB, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 75, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 75, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        MOV       A,#-0xb
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 64
        MOV       A,#-0x40
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 75)
//  172   uint8 buf[64];
//  173   uint16 len;
//  174   switch ( pkt->clusterId )
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,#0x1
        JNZ       ??GenericApp_MessageMSGCB_0
        INC       DPTR
        MOVX      A,@DPTR
??GenericApp_MessageMSGCB_0:
        JNZ       ??GenericApp_MessageMSGCB_1
//  175   {
//  176     case GENERICAPP_CLUSTERID:
//  177       // "the" message
//  178     len = pkt->cmd.DataLength;
        MOV       A,R2
        ADD       A,#0x1f
        MOV       DPL,A
        CLR       A
        ADDC      A,R3
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       R6,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R7,A
//  179     if (len > 0) {
        MOV       A,R6
        ORL       A,R7
        JZ        ??GenericApp_MessageMSGCB_1
//  180     osal_memcpy(buf, pkt->cmd.Data, len);
        ; Setup parameters for call to function osal_memcpy
        MOV       A,R2
        ADD       A,#0x21
        MOV       DPL,A
        CLR       A
        ADDC      A,R3
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       ?V0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V1,A
        MOV       ?V2,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 78)
        MOV       A,R6
        MOV       R4,A
        MOV       A,R7
        MOV       R5,A
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 75)
//  181     buf[len] = 0;
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,DPL
        ADD       A,R6
        MOV       DPL,A
        MOV       A,DPH
        ADDC      A,R7
        MOV       DPH,A
        CLR       A
        MOVX      @DPTR,A
//  182     
//  183     HalUARTWrite(HAL_UART_PORT_0,buf,len);
        ; Setup parameters for call to function HalUARTWrite
        MOV       A,R6
        MOV       R4,A
        MOV       A,R7
        MOV       R5,A
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        MOV       R1,#0x0
        LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
//  184     
//  185   } 
//  186       break;
//  187   }
//  188 }
??GenericApp_MessageMSGCB_1:
        MOV       A,#0x40
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 11)
        MOV       R7,#0x3
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock3
//  189 
//  190 
//  191 //ґ®їЪЅУКХµД»ШµчєЇКэ

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  192 static void rxCB(uint8 port ,uint8 event)
rxCB:
          CFI Block cfiBlock4 Using cfiCommon0
          CFI Function rxCB
        CODE
//  193 {
        FUNCALL rxCB, Hal_UART_RxBufLen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 59, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 59, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxCB, HalUARTRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 59, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 59, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxCB, GenericApp_SendTheMessage
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 59, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 59, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 50
        MOV       A,#-0x32
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 59)
//  194   uint8 buf[50];
//  195   uint8 rxLength = 0;//ЅУКХµЅЧЦ·ыµДґуРЎ
//  196   rxLength = Hal_UART_RxBufLen(0);  //ЅУКХЧЦ·ыґ®µДёцКэ
        ; Setup parameters for call to function Hal_UART_RxBufLen
        MOV       R1,#0x0
        LCALL     `??Hal_UART_RxBufLen::?relay`; Banked call to: Hal_UART_RxBufLen
        MOV       A,R2
        MOV       R6,A
//  197   if(rxLength > 0)
        JZ        ??rxCB_0
//  198   {
//  199     HalUARTRead(0,buf,rxLength);//¶БИЎµЅ±ЈіЦµЅbufЦР
        ; Setup parameters for call to function HalUARTRead
        MOV       R4,A
        MOV       R5,#0x0
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        MOV       R1,#0x0
        LCALL     `??HalUARTRead::?relay`; Banked call to: HalUARTRead
//  200     //HalUARTWrite(0,buf,rxLength);//ґУbufЦРРґµЅµзДФАпГж
//  201     GenericApp_SendTheMessage((char *)buf,rxLength);
        ; Setup parameters for call to function GenericApp_SendTheMessage
        MOV       A,R6
        MOV       R1,A
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        LCALL     `??GenericApp_SendTheMessage::?relay`; Banked call to: GenericApp_SendTheMessage
//  202     
//  203     
//  204   }
//  205 }
??rxCB_0:
        MOV       A,#0x32
        LJMP      ?Subroutine0 & 0xFFFF
          CFI EndBlock cfiBlock4
//  206 
//  207 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  208 void GenericApp_SendTheMessage(char *theMessageData,byte len)
GenericApp_SendTheMessage:
          CFI Block cfiBlock5 Using cfiCommon0
          CFI Function GenericApp_SendTheMessage
        CODE
//  209 {
        FUNCALL GenericApp_SendTheMessage, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 12
        MOV       A,#-0xc
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 22)
        MOV       A,R1
        MOV       R6,A
//  210   afAddrType_t GenericApp_DstAddr;
//  211   GenericApp_DstAddr.addr.shortAddr = 0xffff;   //¶МµШЦ·ЈЁВЯј­/НшВзЈ©
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,#-0x1
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
//  212   GenericApp_DstAddr.addrMode = AddrBroadcast;    //НЁРЕµДДЈКЅ  µг¶Фµг
        MOV       A,#0x8
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0xf
        MOVX      @DPTR,A
//  213   GenericApp_DstAddr.endPoint  = GENERICAPP_ENDPOINT;   //ДїµДµШ¶ЛµгєЕ 
        MOV       A,#0x9
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0xa
        MOVX      @DPTR,A
//  214  
//  215   
//  216    AF_DataRequest( &GenericApp_DstAddr,     //ДїµДµШЦ·
//  217                        &GenericApp_epDesc,    //¶ЛµгГиКц·ыЈЁ·ўЛН¶ЛЈ©
//  218                        GENERICAPP_CLUSTERID,   //ГьБоєЕЈЁґШIDЈ©
//  219                        len,//ПыПўµДі¤¶И
//  220                        (byte *)theMessageData, //ПыПўДЪИЭ
//  221                        &GenericApp_TransID,   //·ўЛНРтєЕ
//  222                        AF_DISCV_ROUTE, AF_DEFAULT_RADIUS );
        ; Setup parameters for call to function AF_DataRequest
        MOV       ?V0,#0x1e
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 23)
        MOV       ?V0,#GenericApp_TransID & 0xff
        MOV       ?V1,#(GenericApp_TransID >> 8) & 0xff
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 25)
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 27)
        MOV       A,R6
        MOV       ?V0,A
        MOV       ?V1,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 29)
        MOV       ?V0,#0x1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 31)
        MOV       R1,#0x20
        MOV       R4,#GenericApp_epDesc & 0xff
        MOV       R5,#(GenericApp_epDesc >> 8) & 0xff
        MOV       A,#0x9
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
        MOV       A,#0x9
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 22)
//  223 
//  224 }
        MOV       A,#0xc
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
        MOV       R7,#0x2
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock5

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??GenericApp_Init::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    GenericApp_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??GenericApp_ProcessEvent::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    GenericApp_ProcessEvent

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??GenericApp_MessageMSGCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    GenericApp_MessageMSGCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??rxCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    rxCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??GenericApp_SendTheMessage::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    GenericApp_SendTheMessage

        END
//  225 
//  226 
//  227 
//  228 
//  229 
//  230 
//  231 
//  232 
//  233 
//  234 
// 
// 516 bytes in segment BANKED_CODE
//  30 bytes in segment BANK_RELAYS
//  14 bytes in segment XDATA_ROM_C
//   8 bytes in segment XDATA_Z
// 
//  30 bytes of CODE     memory
//  14 bytes of CONST    memory
// 516 bytes of HUGECODE memory
//   8 bytes of XDATA    memory
//
//Errors: none
//Warnings: 1
